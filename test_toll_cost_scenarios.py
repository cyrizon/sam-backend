"""
Test de calcul de co√ªt avec p√©ages ouverts
------------------------------------------
"""

import os
import sys

# Ajouter le r√©pertoire src au path pour les imports
sys.path.append(os.path.join(os.path.dirname(__file__), 'src'))

from src.cache.v2.managers.v2_cache_manager_with_pricing import V2CacheManagerWithPricing


def main():
    """Test calculs de co√ªts avec diff√©rents types de p√©ages."""
    print("üí∞ Test de calcul de co√ªt avec p√©ages ouverts")
    print("=" * 60)
    
    # Initialiser le gestionnaire
    data_dir = os.path.join(os.path.dirname(__file__), "data")
    manager = V2CacheManagerWithPricing(data_dir)
    
    # Charger toutes les donn√©es
    if not manager.load_all():
        print("‚ùå √âchec du chargement des donn√©es")
        return
    
    # R√©cup√©rer diff√©rents types de p√©ages
    open_tolls = [tb for tb in manager.toll_booths if tb.is_open_toll]
    closed_tolls = [tb for tb in manager.toll_booths if tb.is_closed_toll]
    
    if len(open_tolls) >= 1 and len(closed_tolls) >= 1:
        open_toll = open_tolls[0]
        closed_toll = closed_tolls[0]
        
        print(f"\nüîÑ Tests de calcul entre diff√©rents types de p√©ages:")
        print(f"   P√©age ouvert: {open_toll.display_name} ({open_toll.type})")
        print(f"   P√©age ferm√©: {closed_toll.display_name} ({closed_toll.type})")
        
        # Test 1: Ouvert vers Ferm√©
        print(f"\n1. üö™‚û°Ô∏èüîí Ouvert vers Ferm√©:")
        result = manager.calculate_toll_cost(open_toll.osm_id, closed_toll.osm_id, "1")
        if result:
            print(f"   Co√ªt: {result['cost']:.2f}‚Ç¨" if result['cost'] else "Gratuit")
            print(f"   Explication: {result['explanation']}")
        
        # Test 2: Ferm√© vers Ouvert
        print(f"\n2. üîí‚û°Ô∏èüö™ Ferm√© vers Ouvert:")
        result = manager.calculate_toll_cost(closed_toll.osm_id, open_toll.osm_id, "1")
        if result:
            print(f"   Co√ªt: {result['cost']:.2f}‚Ç¨" if result['cost'] else "Gratuit")
            print(f"   Explication: {result['explanation']}")
        
        # Test 3: Ouvert vers Ouvert (si on a 2 p√©ages ouverts)
        if len(open_tolls) >= 2:
            open_toll2 = open_tolls[1]
            print(f"\n3. üö™‚û°Ô∏èüö™ Ouvert vers Ouvert:")
            result = manager.calculate_toll_cost(open_toll.osm_id, open_toll2.osm_id, "1")
            if result:
                print(f"   Co√ªt: {result['cost']:.2f}‚Ç¨" if result['cost'] else "Gratuit")
                print(f"   Explication: {result['explanation']}")
        
        # Test 4: Ferm√© vers Ferm√© (d√©j√† test√© pr√©c√©demment)
        print(f"\n4. üîí‚û°Ô∏èüîí Ferm√© vers Ferm√© (op√©rateurs diff√©rents):")
        if len(closed_tolls) >= 2:
            closed_toll2 = closed_tolls[1]
            result = manager.calculate_toll_cost(closed_toll.osm_id, closed_toll2.osm_id, "1")
            if result:
                print(f"   Co√ªt: {result['cost']:.2f}‚Ç¨" if result['cost'] else "Gratuit")
                print(f"   Explication: {result['explanation']}")
        
        # Test 5: Op√©rateurs √©quivalents (ASF, COFIROUTE, ESCOTA)
        print(f"\n5. üîí‚û°Ô∏èüîí Ferm√© vers Ferm√© (op√©rateurs √©quivalents):")
        equivalent_operators = ["ASF", "COFIROUTE", "ESCOTA"]
        
        # Chercher des p√©ages avec des op√©rateurs √©quivalents
        equivalent_tolls = {}
        for toll in closed_tolls:
            if toll.operator in equivalent_operators:
                if toll.operator not in equivalent_tolls:
                    equivalent_tolls[toll.operator] = []
                equivalent_tolls[toll.operator].append(toll)
        
        # Test entre deux op√©rateurs √©quivalents diff√©rents
        if len(equivalent_tolls) >= 2:
            operators = list(equivalent_tolls.keys())
            toll1 = equivalent_tolls[operators[0]][0]
            toll2 = equivalent_tolls[operators[1]][0]
            
            print(f"   Test: {toll1.display_name} ({toll1.operator}) ‚û°Ô∏è {toll2.display_name} ({toll2.operator})")
            result = manager.calculate_toll_cost(toll1.osm_id, toll2.osm_id, "1")
            if result:
                print(f"   Co√ªt: {result['cost']:.2f}‚Ç¨" if result['cost'] else "Gratuit")
                print(f"   Explication: {result['explanation']}")
        else:
            print(f"   ‚ö†Ô∏è  Pas assez d'op√©rateurs √©quivalents trouv√©s pour le test")
            print(f"   Op√©rateurs √©quivalents disponibles: {list(equivalent_tolls.keys())}")
    
    else:
        print("‚ùå Pas assez de p√©ages de types diff√©rents pour les tests")


if __name__ == "__main__":
    main()
