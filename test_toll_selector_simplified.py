"""
Test Toll Selector Simplifi√©
============================

Test du nouveau syst√®me simplifi√© de s√©lection en 3 √©tapes.
"""

import sys
import os
sys.path.append(os.path.dirname(__file__))

from src.services.toll.route_optimization.toll_analysis.toll_selector import TollSelector


def create_simple_test_data():
    """Cr√©e des donn√©es de test simples."""
    
    # 5 p√©ages : 2 ouverts, 3 ferm√©s
    tolls_on_route = [
        {
            'osm_id': '1001',
            'name': 'P√©age Ouvert 1',
            'toll_type': 'ouvert',
            'coordinates': [2.0, 47.0],
        },
        {
            'osm_id': '1002', 
            'name': 'P√©age Ferm√© 1',
            'toll_type': 'ferm√©',
            'coordinates': [2.1, 47.1],
        },
        {
            'osm_id': '1003',
            'name': 'P√©age Ferm√© 2',
            'toll_type': 'ferm√©',
            'coordinates': [2.2, 47.2],
        },
        {
            'osm_id': '1004',
            'name': 'P√©age Ouvert 2',
            'toll_type': 'ouvert',
            'coordinates': [2.3, 47.3],
        },
        {
            'osm_id': '1005',
            'name': 'P√©age Ferm√© 3',
            'toll_type': 'ferm√©',
            'coordinates': [2.4, 47.4],
        }
    ]
    
    identification_result = {
        'route_info': {
            'start_point': [2.0, 47.0],  # D√©but
            'end_point': [2.5, 47.5]     # Fin
        }
    }
    
    return tolls_on_route, identification_result


def test_step1_removal():
    """Test de l'√©tape 1 : suppression pour respecter la demande."""
    print("üß™ Test √âtape 1 : Suppression de p√©ages...")
    
    toll_selector = TollSelector()
    tolls_on_route, _ = create_simple_test_data()
    
    # Test avec 3 p√©ages demand√©s (on doit supprimer 2)
    result = toll_selector._remove_tolls_to_match_count(tolls_on_route, 3)
    
    print(f"   - S√©lection valide: {result['selection_valid']}")
    print(f"   - P√©ages s√©lectionn√©s: {len(result['selected_tolls'])}")
    print(f"   - P√©ages supprim√©s: {len(result['removed_tolls'])}")
    
    # V√©rifier qu'on supprime les ferm√©s d'abord
    removed_types = [t['toll_type'] for t in result['removed_tolls']]
    print(f"   - Types supprim√©s: {removed_types}")
    
    return result


def test_isolated_closed_toll():
    """Test du cas p√©age ferm√© isol√©."""
    print("\nüß™ Test P√©age ferm√© isol√©...")
    
    toll_selector = TollSelector()
    tolls_on_route, _ = create_simple_test_data()
    
    # Demander 1 seul p√©age ‚Üí p√©age ferm√© isol√© impossible
    result = toll_selector._remove_tolls_to_match_count(tolls_on_route, 1)
    
    print(f"   - S√©lection valide: {result['selection_valid']}")
    print(f"   - Raison: {result['reason']}")
    
    return result


def test_full_process():
    """Test du processus complet en 3 √©tapes."""
    print("\nüß™ Test Processus complet...")
    
    toll_selector = TollSelector()
    tolls_on_route, identification_result = create_simple_test_data()
    
    # Test avec 3 p√©ages
    result = toll_selector.select_tolls_by_count(
        tolls_on_route=tolls_on_route,
        target_count=3,
        identification_result=identification_result
    )
    
    print(f"   - S√©lection valide: {result['selection_valid']}")
    print(f"   - √âl√©ments s√©lectionn√©s: {len(result['selected_tolls'])}")
    print(f"   - Segments cr√©√©s: {len(result.get('segments', []))}")
    print(f"   - Optimisation appliqu√©e: {result.get('optimization_applied')}")
    
    # D√©tails des segments
    segments = result.get('segments', [])
    for i, seg in enumerate(segments):
        toll_status = 'avec p√©age' if seg.get('has_toll') else 'sans p√©age'
        print(f"     Segment {i+1}: {toll_status}")
    
    return result


def test_zero_tolls():
    """Test avec 0 p√©age demand√©."""
    print("\nüß™ Test 0 p√©age demand√©...")
    
    toll_selector = TollSelector()
    tolls_on_route, identification_result = create_simple_test_data()
    
    result = toll_selector.select_tolls_by_count(
        tolls_on_route=tolls_on_route,
        target_count=0,
        identification_result=identification_result
    )
    
    print(f"   - S√©lection valide: {result['selection_valid']}")
    print(f"   - √âl√©ments s√©lectionn√©s: {len(result['selected_tolls'])}")
    print(f"   - Segments: {len(result.get('segments', []))}")
    
    if result.get('segments'):
        segment = result['segments'][0]
        print(f"   - Segment unique: {'avec p√©age' if segment.get('has_toll') else 'sans p√©age'}")


def main():
    """Test principal."""
    print("=" * 50)
    print("üöß Test Toll Selector Simplifi√© (3 √âtapes)")
    print("=" * 50)
    
    try:
        # Tests des √©tapes individuelles
        test_step1_removal()
        test_isolated_closed_toll()
        
        # Test du processus complet
        test_full_process()
        test_zero_tolls()
        
        print("\n‚úÖ Tous les tests termin√©s avec succ√®s!")
        
    except Exception as e:
        print(f"\n‚ùå Erreur lors des tests: {e}")
        import traceback
        traceback.print_exc()


if __name__ == "__main__":
    main()
