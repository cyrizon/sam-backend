"""
intelligent_segmentation_strategy_v2.py
--------------------------------------

Impl√©mentation simplifi√©e de l'algorithme de segmentation intelligente.
Bas√© sur l'analyse de la route de base et la segmentation aux points de sortie.

Algorithme en 9 √©tapes :
1. Route de base
2. Identifier p√©ages SUR la route
3. S√©lectionner X p√©ages (prioriser syst√®me ouvert)
4. Trouver derni√®re sortie avant p√©age suivant
5. R√©cup√©rer motorway_link associ√©
6. Segmenter en 2 trajets
7. Requ√™te segment 1 (avec p√©ages) + segment 2 (sans p√©ages)
8. Assembler les trajets (enlever point dupliqu√©)
9. Retourner le r√©sultat
"""

from typing import List, Dict, Optional
from .toll_segment_builder import TollSegmentBuilder
from .segment_route_calculator import SegmentRouteCalculator
from .toll_matcher import TollMatcher, MatchedToll, convert_osm_tolls_to_matched_format
from .toll_deduplicator import TollDeduplicator
from .intelligent_segmentation_helpers import SegmentationSpecialCases, RouteUtils
from .segmentation_point_finder import SegmentationPointFinder
from .segment_calculator import SegmentCalculator
from .route_assembler import RouteAssembler
from .polyline_intersection import filter_tolls_on_route_strict
from .exit_optimization import ExitOptimizationManager
from benchmark.performance_tracker import performance_tracker
from src.services.osm_data_cache import osm_data_cache


class IntelligentSegmentationStrategyV2:
    """
    Strat√©gie de segmentation intelligente simplifi√©e.
    Bas√©e sur la route de base et la segmentation aux points de sortie.
    """
    
    def __init__(self, ors_service, osm_data_file: str = None):
        """
        Initialise la strat√©gie avec un service ORS et les donn√©es OSM du cache global.
        
        Args:
            ors_service: Service ORS pour les calculs de routes
            osm_data_file: (ignor√©, conserv√© pour compatibilit√©)
        """
        self.ors = ors_service
        self.osm_parser = osm_data_cache._osm_parser  # Utilise le parser du cache global
        self.toll_matcher = TollMatcher()
        self.exit_optimizer = ExitOptimizationManager(self.osm_parser, self.toll_matcher, self.ors)
        self.osm_loaded = True  # Toujours True car le cache est initialis√© au d√©marrage
        self.special_cases = SegmentationSpecialCases(ors_service)
        self.point_finder = SegmentationPointFinder(self.osm_parser)
        self.segment_calculator = SegmentCalculator(ors_service)
        self.route_assembler = RouteAssembler()
        
        # Nouveaux modules pour la segmentation intelligente
        self.segment_builder = TollSegmentBuilder(ors_service)
        self.route_calculator = SegmentRouteCalculator(ors_service)
    
    def find_route_with_exact_tolls(
        self, 
        coordinates: List[List[float]], 
        target_tolls: int
    ) -> Optional[Dict]:
        """
        Trouve une route avec exactement le nombre de p√©ages demand√©.
        Algorithme simplifi√© en 9 √©tapes bas√© sur la route de base.
        
        Args:
            coordinates: [d√©part, arriv√©e]
            target_tolls: Nombre exact de p√©ages voulu
            
        Returns:
            dict: Route segment√©e ou None si √©chec
        """
        with performance_tracker.measure_operation("intelligent_segmentation_v2"):
            print(f"üß† Segmentation Intelligente V2 : {target_tolls} p√©age(s) exact(s)")
            
            # CAS SP√âCIAL 1 : 0 p√©age demand√© ‚Üí route sans p√©ages directement
            if target_tolls == 0:
                print("üö´ Cas sp√©cial : 0 p√©age demand√©")
                return self.special_cases.get_toll_free_route(coordinates)
            
            # √âtape 0 : Charger les donn√©es OSM si n√©cessaire
            if not self._ensure_osm_data_loaded():
                return None
            
            # √âtape 1 : R√©cup√©rer la route de base
            base_route = self._get_base_route(coordinates)
            if not base_route:
                return None
            # √âtape 2 : Identifier les p√©ages SUR la route de base
            route_coords = RouteUtils.extract_route_coordinates(base_route)
            tolls_on_route = self._identify_tolls_on_base_route(route_coords)
              # CAS SP√âCIAL 2 : Plus de p√©ages demand√©s que disponibles ‚Üí retourner route de base
            if len(tolls_on_route) < target_tolls:
                print(f"‚ö†Ô∏è Pas assez de p√©ages sur la route ({len(tolls_on_route)} < {target_tolls})")
                return self.special_cases.format_base_route_as_result(base_route)
            
            # OPTIMISATION : Si le trajet de base a exactement le bon nombre de p√©ages, on le retourne directement
            if len(tolls_on_route) == target_tolls:
                print(f"‚úÖ Optimisation : trajet de base avec exactement {len(tolls_on_route)} p√©age(s) = {target_tolls} demand√©(s)")
                return self.special_cases.format_base_route_as_result(base_route)            # √âtape 3 : S√©lectionner les p√©ages √† utiliser (prioriser syst√®me ouvert)
            selected_tolls = self._select_target_tolls(tolls_on_route, target_tolls)
            if not selected_tolls:
                return None
              # √âtape 3.5 : Optimiser les p√©ages pour √©viter les bugs de sortie
            selected_tolls = self._optimize_tolls_for_exit(selected_tolls, tolls_on_route, coordinates[1], route_coords)
            
            # √âtape 3.6 : Mettre √† jour tolls_on_route avec les p√©ages optimis√©s
            tolls_on_route = self._update_tolls_list_with_optimized(tolls_on_route, selected_tolls)
            
            # √âtape 4 : Construction des segments intelligents (nouvelle approche)
            print("üèóÔ∏è √âtape 4 : Construction des segments intelligents...")
            segments = self.segment_builder.build_intelligent_segments(
                coordinates[0], coordinates[1], tolls_on_route, selected_tolls,
                osm_parser=self.osm_parser, route_coords=route_coords
            )
            if not segments:
                print("‚ùå Impossible de construire les segments intelligents")
                return self.special_cases.format_base_route_as_result(base_route)
            
            # √âtape 5 : Calcul des routes pour chaque segment
            print("üìç √âtape 5 : Calcul des routes pour chaque segment...")
            segment_routes = self.route_calculator.calculate_all_segments(segments)
            if not segment_routes:
                print("‚ùå √âchec du calcul des segments, fallback vers route de base")
                return self.special_cases.format_base_route_as_result(base_route)
            
            # √âtape 6 : Assembler et retourner le r√©sultat final
            print("üîß √âtape 6 : Assemblage du r√©sultat final...")
            return self.route_assembler.assemble_final_route_multi(
                segment_routes, target_tolls, selected_tolls
            )
    
    def _ensure_osm_data_loaded(self) -> bool:
        """Assure que les donn√©es OSM sont charg√©es (toujours True avec le cache)."""
        return True
    
    def _get_base_route(self, coordinates: List[List[float]]) -> Optional[Dict]:
        """√âtape 1 : R√©cup√©rer la route de base."""
        try:
            print(f"üõ£Ô∏è √âtape 1 : Route de base {coordinates[0]} ‚Üí {coordinates[1]}")
            return self.ors.get_base_route(coordinates, include_tollways=True)
        except Exception as e:
            print(f"‚ùå Erreur route de base : {e}")
            return None

    def _identify_tolls_on_base_route(self, route_coords: List[List[float]]) -> List[MatchedToll]:
        """√âtape 2 : Identifier les p√©ages SUR la route de base avec d√©tection stricte."""
        print("üîç √âtape 2 : Identification des p√©ages sur la route...")
        
        # Recherche large des p√©ages proches SANS d√©duplication (pour avoir tous les candidats)
        osm_tolls_large = self.osm_parser.find_tolls_near_route(route_coords, max_distance_km=0.5)
        print(f"   üìç D√©tection large : {len(osm_tolls_large)} p√©ages dans 500m")
        
        # Recherche stricte des p√©ages vraiment SUR la route (intersection g√©om√©trique)
        tolls_on_route_strict = filter_tolls_on_route_strict(
            osm_tolls_large, 
            route_coords, 
            max_distance_m=1,  # 1m max de la polyline (ultra-strict pour √©viter les p√©ages c√¥t√© oppos√©)
            coordinate_attr='coordinates',
            verbose=True  # Pas de spam des rejets
        )
        
        # Extraire les p√©ages de la d√©tection stricte
        osm_tolls_strict = [toll_data[0] for toll_data in tolls_on_route_strict]
        print(f"   üéØ D√©tection stricte : {len(osm_tolls_strict)} p√©ages vraiment sur la route (dans 1m)")
          # Afficher seulement les p√©ages accept√©s
        if osm_tolls_strict:
            print(f"   ‚úÖ P√©ages valid√©s sur la route :")
            for toll in osm_tolls_strict:
                # Acc√®s correct aux propri√©t√©s de TollStation
                toll_name = toll.name or "Sans nom"
                print(f"      ‚Ä¢ {toll_name}")
        else:
            print(f"   ‚ùå Aucun p√©age trouv√© sur la route")
        
        # Convertir et matcher avec les donn√©es CSV (utiliser la d√©tection stricte)
        osm_tolls_formatted = convert_osm_tolls_to_matched_format(osm_tolls_strict)
        matched_tolls = self.toll_matcher.match_osm_tolls_with_csv(
            osm_tolls_formatted, 
            max_distance_km=2.0
        )
        
        # D√©duplication par proximit√© √† la route (√©liminer les doublons des portes de p√©age)
        deduplicated_tolls = TollDeduplicator.deduplicate_tolls_by_proximity(matched_tolls, route_coords)
        
        # Ordonner les p√©ages selon leur position sur la route
        ordered_tolls = TollDeduplicator.sort_tolls_by_route_position(deduplicated_tolls, route_coords)
        
        # Afficher les p√©ages finaux ordonn√©s
        print(f"   üìã P√©ages finaux d√©tect√©s sur la route :")
        for i, toll in enumerate(ordered_tolls, 1):
            system_type = "ouvert" if toll.is_open_system else "ferm√©"
            print(f"      {i}. {toll.effective_name} (syst√®me {system_type})")
        
        return ordered_tolls
    
    def _select_target_tolls(self, available_tolls: List[MatchedToll], target_count: int) -> List[MatchedToll]:
        """
        √âtape 3 : S√©lectionner les p√©ages √† utiliser en respectant les contraintes des syst√®mes.
        
        R√®gles :
        - 1 p√©age : Seulement syst√®me ouvert (ferm√© seul = impossible)
        - 2+ p√©ages : Priorit√© aux ferm√©s (plus logique entrance‚Üíexit), puis ouverts
        - Contrainte : Jamais de p√©age ferm√© seul (toujours par paires minimum)
        """
        print(f"üéØ √âtape 3 : S√©lection de {target_count} p√©age(s) avec contraintes syst√®mes...")
        
        if target_count > len(available_tolls):
            print(f"‚ùå Pas assez de p√©ages disponibles ({len(available_tolls)} < {target_count})")
            return []
        
        # S√©parer les p√©ages par syst√®me
        open_tolls = [t for t in available_tolls if t.is_open_system]
        closed_tolls = [t for t in available_tolls if not t.is_open_system]
        print(f"   üìä Disponibles : {len(open_tolls)} ouverts, {len(closed_tolls)} ferm√©s")
        
        # Logique unifi√©e : toujours prioriser les ferm√©s, puis compl√©ter avec ouverts
        return self._select_tolls_unified(open_tolls, closed_tolls, target_count)
    
    def _select_tolls_unified(self, open_tolls: List[MatchedToll], closed_tolls: List[MatchedToll], target_count: int) -> List[MatchedToll]:
        """
        Logique unifi√©e de s√©lection de p√©ages.
        
        R√®gles :
        1. Toujours prioriser les p√©ages ferm√©s (par paires)
        2. Si contrainte viol√©e (1 seul ferm√©), passer aux ouverts
        3. Compl√©ter avec les ouverts si n√©cessaire
        """
        selected_tolls = []
        
        # √âtape 1 : Prendre d'abord les ferm√©s (par paires si possible)
        if len(closed_tolls) >= 2:
            # Calculer combien de paires on peut prendre
            pairs_available = len(closed_tolls) // 2
            pairs_needed = min(pairs_available, target_count // 2)
            
            # Si target_count est impair et qu'on a assez de ferm√©s, prendre une paire de plus
            if target_count % 2 == 1 and pairs_available > pairs_needed:
                pairs_needed += 1
            
            selected_tolls.extend(closed_tolls[:pairs_needed * 2])
        
        # √âtape 2 : Compl√©ter avec des ouverts si n√©cessaire
        remaining = target_count - len(selected_tolls)
        if remaining > 0:
            selected_tolls.extend(open_tolls[:remaining])
        
        # √âtape 3 : Ajuster √† la taille exacte
        final_selected = selected_tolls[:target_count]
        
        # √âtape 4 : V√©rifier la contrainte (pas de ferm√© seul)
        closed_count = sum(1 for t in final_selected if not t.is_open_system)
        if closed_count == 1:
            print(f"   ‚ö†Ô∏è Contrainte viol√©e : 1 seul ferm√© d√©tect√©, passage aux ouverts...")
            # Si on ne peut pas respecter la contrainte, prendre que des ouverts
            final_selected = open_tolls[:target_count]
        
        print(f"   ‚úÖ {len(final_selected)} p√©ages s√©lectionn√©s : {[t.effective_name for t in final_selected]}")
        print(f"      - Ferm√©s : {sum(1 for t in final_selected if not t.is_open_system)}")
        print(f"      - Ouverts : {sum(1 for t in final_selected if t.is_open_system)}")
        
        return final_selected
    
    def _optimize_tolls_for_exit(self, selected_tolls: List[MatchedToll], all_tolls: List[MatchedToll], destination: List[float], route_coords: List[List[float]]) -> List[MatchedToll]:
        """
        Optimise les p√©ages s√©lectionn√©s en trouvant des sorties d'autoroute optimales.
        
        Args:
            selected_tolls: Les p√©ages s√©lectionn√©s initialement
            all_tolls: Tous les p√©ages disponibles sur la route
            destination: Destination finale de la route
            route_coords: Coordonn√©es compl√®tes de la route
            
        Returns:
            List[MatchedToll]: Les p√©ages optimis√©s
        """
        return self.exit_optimizer.optimize_multiple_tolls(selected_tolls, all_tolls, destination, route_coords)
    
    def _update_tolls_list_with_optimized(self, original_tolls: List[MatchedToll], optimized_tolls: List[MatchedToll]) -> List[MatchedToll]:
        """
        Met √† jour la liste des p√©ages sur la route en rempla√ßant les p√©ages optimis√©s.
        
        Args:
            original_tolls: Liste originale des p√©ages sur la route
            optimized_tolls: Liste des p√©ages apr√®s optimisation
            
        Returns:
            List[MatchedToll]: Liste mise √† jour avec les p√©ages optimis√©s
        """
        print(f"üîÑ Mise √† jour de la liste des p√©ages avec optimisations...")
        
        # Cr√©er une copie de la liste originale
        updated_tolls = original_tolls.copy()
        
        # Pour chaque p√©age optimis√©, v√©rifier s'il remplace un p√©age existant
        for optimized_toll in optimized_tolls:
            # Chercher si ce p√©age optimis√© remplace un p√©age existant
            replaced = False
            for i, original_toll in enumerate(updated_tolls):
                # Si le p√©age optimis√© a le m√™me nom/id qu'un original, le remplacer
                if (original_toll.osm_id == optimized_toll.osm_id or 
                    original_toll.effective_name == optimized_toll.effective_name):
                    updated_tolls[i] = optimized_toll
                    replaced = True
                    print(f"   üîÑ P√©age mis √† jour : {optimized_toll.effective_name}")
                    break
            
            # Si c'est un nouveau p√©age (suite √† l'optimisation), l'ajouter
            if not replaced:
                # Essayer de l'ins√©rer √† la bonne position selon les coordonn√©es
                inserted = False
                for i, existing_toll in enumerate(updated_tolls):
                    # Si le nouveau p√©age a des coordonn√©es et qu'on peut estimer sa position
                    if (optimized_toll.osm_coordinates and existing_toll.osm_coordinates and
                        self._is_toll_before(optimized_toll, existing_toll)):
                        updated_tolls.insert(i, optimized_toll)
                        inserted = True
                        print(f"   ‚ûï Nouveau p√©age ins√©r√© : {optimized_toll.effective_name}")
                        break
                
                # Si on n'a pas pu l'ins√©rer, l'ajouter √† la fin
                if not inserted:
                    updated_tolls.append(optimized_toll)
                    print(f"   ‚ûï Nouveau p√©age ajout√© : {optimized_toll.effective_name}")
        
        print(f"   ‚úÖ Liste mise √† jour : {len(updated_tolls)} p√©ages")
        return updated_tolls
    
    def _is_toll_before(self, toll1: MatchedToll, toll2: MatchedToll) -> bool:
        """
        D√©termine si toll1 vient avant toll2 sur la route (approximation basique).
        """
        if not toll1.osm_coordinates or not toll2.osm_coordinates:
            return False
        
        # Approximation simple : comparer les latitudes (pour routes Nord-Sud)
        return toll1.osm_coordinates[1] > toll2.osm_coordinates[1]
