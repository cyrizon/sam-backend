"""
exit_optimization_manager.py
----------------------------

Module orchestrateur pour l'optimisation des sorties d'autoroute.

Responsabilit√© unique :
- Coordonner la recherche de sorties d'autoroute optimales
- G√©rer le processus de remplacement p√©age ‚Üí sortie ‚Üí nouveau p√©age
- Orchestrer les diff√©rents composants (finder, detector, etc.)
- Fournir une interface simple pour l'int√©gration

Architecture :
1. D√©tecter le besoin d'optimisation (syst√®me ferm√© + p√©ages restants)
2. Trouver les sorties d'autoroute proches
3. Calculer une route test via la sortie
4. D√©tecter les nouveaux p√©ages sur cette route
5. Valider et retourner le p√©age optimis√©
"""

from typing import List, Optional
from src.services.toll.new_segmentation.exit_optimization.motorway_exit_finder import MotorwayExitFinder
from src.services.toll.new_segmentation.exit_optimization.exit_toll_detector import ExitTollDetector
from src.cache.models.matched_toll import MatchedToll
from src.cache.parsers.osm_parser import OSMParser, MotorwayJunction
from src.cache.parsers.toll_matcher import TollMatcher


class ExitOptimizationManager:
    """
    Gestionnaire principal pour l'optimisation des sorties d'autoroute.
    """
    
    def __init__(self, osm_data_parser: OSMParser, toll_matcher: TollMatcher, ors_service):
        """
        Initialise le gestionnaire avec les services n√©cessaires.
        
        Args:
            osm_data_parser: Parser pour acc√©der aux donn√©es OSM
            toll_matcher: Matcher pour identifier les p√©ages
            ors_service: Service ORS pour calculer les routes
        """
        self.exit_finder = MotorwayExitFinder(osm_data_parser)
        self.toll_detector = ExitTollDetector(osm_data_parser, toll_matcher)
        self.ors = ors_service
    
    def optimize_toll_exit(
        self, 
        target_toll: MatchedToll, 
        remaining_tolls: List[MatchedToll],
        route_destination: List[float],
        previous_toll: Optional[MatchedToll] = None,
        route_coords: Optional[List[List[float]]] = None
    ) -> Optional[MatchedToll]:
        """
        Optimise un p√©age en trouvant une sortie d'autoroute alternative.
        
        Args:
            target_toll: Le p√©age qu'on voudrait optimiser
            remaining_tolls: Les p√©ages restants sur la route
            route_destination: Destination finale de la route
            previous_toll: Le p√©age pr√©c√©dent (pour d√©limiter le segment de recherche)
            route_coords: Coordonn√©es de la route compl√®te
            
        Returns:
            Optional[MatchedToll]: Le p√©age optimis√©, ou None si pas d'optimisation possible
        """
        print(f"   üéØ Optimisation de sortie pour : {target_toll.effective_name}")
        
        # 1. V√©rifier si l'optimisation est n√©cessaire
        if not self._should_optimize(target_toll, remaining_tolls):
            return None
        
        # 2. R√©cup√©rer les coordonn√©es du p√©age cible et du p√©age pr√©c√©dent
        target_coords = self._get_toll_coordinates(target_toll)
        if not target_coords:
            print(f"   ‚ùå Impossible de r√©cup√©rer les coordonn√©es de {target_toll.effective_name}")
            return None
          # 3. Utiliser les coordonn√©es pour cr√©er un segment de recherche
        if previous_toll:
            prev_coords = self._get_toll_coordinates(previous_toll)
            if prev_coords and route_coords:
                print(f"   üéØ Recherche sur segment de route entre {previous_toll.effective_name} et {target_toll.effective_name}")
                # Chercher la derni√®re sortie AVANT le p√©age cible sur le segment
                exits = self._find_exits_on_route_segment(prev_coords, target_coords, route_coords)
            else:
                print(f"   ‚ö†Ô∏è Fallback: recherche autour du p√©age (prev_coords: {bool(prev_coords)}, route_coords: {bool(route_coords)})")
                # Fallback: chercher autour du p√©age cible
                exits = self.exit_finder.find_exits_near_point(target_coords, search_radius_km=1.0)
        else:
            print(f"   ‚ö†Ô∏è Pas de p√©age pr√©c√©dent, recherche autour du p√©age cible")
            # Pas de p√©age pr√©c√©dent, chercher autour du p√©age cible
            exits = self.exit_finder.find_exits_near_point(target_coords, search_radius_km=1.0)
        
        if not exits:
            print(f"   ‚ö†Ô∏è Aucune sortie d'autoroute trouv√©e sur le segment avant {target_toll.effective_name}")
            return None
        
        # 3. Tester la sortie la plus proche
        closest_exit = self.exit_finder.get_closest_exit(exits)
        if not closest_exit:
            return None
        # 4. Calculer une route via cette sortie
        exit_toll = self._test_exit_route(closest_exit, route_destination)
        if not exit_toll:
            print(f"   ‚ùå Aucun p√©age d√©tect√© sur la route via {closest_exit.properties.get('name', 'sortie inconnue')}")
            return None

        print(f"   üîç P√©age candidat trouv√© : {exit_toll.effective_name}")
        # 5. Valider le remplacement
        if exit_toll and self.toll_detector.validate_exit_toll_replacement(target_toll, exit_toll):
            print(f"   ‚úÖ Optimisation r√©ussie : {target_toll.effective_name} ‚Üí {exit_toll.effective_name}")
            # Marquer ce p√©age comme √©tant une sortie d'autoroute
            exit_toll.is_exit = True
            # IMPORTANT: Utiliser les coordonn√©es de la sortie r√©elle, pas du p√©age
            exit_coords = self.exit_finder.get_exit_link_last_point({'coordinates': closest_exit.coordinates})
            exit_toll.osm_coordinates = exit_coords
            print(f"   üéØ Coordonn√©es de sortie assign√©es au p√©age : {exit_coords}")
            return exit_toll
        else:
            print(f"   ‚ùå Validation du remplacement √©chou√©e")
        
        return None
    
    def _should_optimize(self, target_toll: MatchedToll, remaining_tolls: List[MatchedToll]) -> bool:
        """
        D√©termine si une optimisation est n√©cessaire.
        
        Args:
            target_toll: Le p√©age cible
            remaining_tolls: Les p√©ages restants
            
        Returns:
            bool: True si l'optimisation est recommand√©e
        """
        # V√©rifier que le p√©age cible est un syst√®me ferm√©
        if target_toll.is_open_system:
            return False
        
        # V√©rifier qu'il y a des p√©ages restants
        if not remaining_tolls:
            return False
        
        # V√©rifier qu'il y a au moins un p√©age ferm√© dans les restants
        has_closed_remaining = any(not toll.is_open_system for toll in remaining_tolls)
        
        return has_closed_remaining
    
    def _get_toll_coordinates(self, toll: MatchedToll) -> Optional[List[float]]:
        """
        R√©cup√®re les coordonn√©es d'un p√©age (priorit√© OSM puis CSV).
        
        Args:
            toll: Le p√©age dont r√©cup√©rer les coordonn√©es
            
        Returns:
            Optional[List[float]]: [longitude, latitude] ou None
        """
        if toll.osm_coordinates and len(toll.osm_coordinates) == 2:
            return toll.osm_coordinates
        elif toll.csv_coordinates and len(toll.csv_coordinates) == 2:
            return toll.csv_coordinates
        else:            return None

    def _test_exit_route(
        self, 
        exit_data: MotorwayJunction, 
        destination: List[float]
    ) -> Optional[MatchedToll]:
        """
        Teste une route via une sortie et d√©tecte les p√©ages.
        
        Args:
            exit_data: Donn√©es de la sortie d'autoroute
            destination: Destination finale
            
        Returns:
            Optional[MatchedToll]: P√©age d√©tect√© sur la route de sortie
        """
        # Utiliser le dernier point de la way motorway_link au lieu des coordonn√©es de la junction
        exit_coords = self.exit_finder.get_exit_link_last_point({'coordinates': exit_data.coordinates})
        print(f"   üéØ Point de sortie final utilis√© : {exit_coords}")
        
        if not exit_coords:
            return None
        
        try:
            # Calculer une route courte depuis la sortie vers la destination
            junction_name = exit_data.properties.get('name', 'inconnue')
            print(f"   üß™ Test route via sortie {junction_name}")
            print(f"       üìç Coordonn√©es sortie : {exit_coords}")
            print(f"       üìç Destination : {destination}")
              # Route de test courte (premier segment seulement)
            test_route = self.ors.get_base_route([exit_coords, destination], include_tollways=True)
            
            if not test_route:
                print(f"       ‚ùå Impossible de calculer la route via {junction_name}")
                return None
            
            # Extraire les coordonn√©es de la r√©ponse GeoJSON
            route_coords = None
            if 'features' in test_route and len(test_route['features']) > 0:
                geometry = test_route['features'][0].get('geometry', {})
                route_coords = geometry.get('coordinates', [])
            elif 'coordinates' in test_route:
                # Fallback pour format simple
                route_coords = test_route['coordinates']
            
            if not route_coords:
                print(f"       ‚ùå Impossible d'extraire les coordonn√©es de la route via {junction_name}")
                return None
                
            print(f"       ‚úÖ Route calcul√©e : {len(route_coords)} points")
            print(f"       üîç Recherche de p√©ages sur cette route...")
            
            exit_toll = self.toll_detector.detect_tolls_on_exit_route(route_coords, exit_coords)
            if exit_toll:
                print(f"       ‚úÖ P√©age trouv√© : {exit_toll.effective_name}")
            else:
                print(f"       ‚ùå Aucun p√©age d√©tect√© sur cette route")
            
            return exit_toll
            
        except Exception as e:
            print(f"   ‚ö†Ô∏è Erreur lors du test de route via sortie : {e}")
            return None
    
    def optimize_multiple_tolls(
        self, 
        selected_tolls: List[MatchedToll], 
        all_tolls: List[MatchedToll],
        route_destination: List[float],
        route_coords: Optional[List[List[float]]] = None
    ) -> List[MatchedToll]:
        """
        Optimise uniquement le dernier p√©age s√©lectionn√© si n√©cessaire.
        
        Logic: L'optimisation n'est n√©cessaire que pour le dernier p√©age s√©lectionn√©,
        et seulement s'il y a des p√©ages restants apr√®s lui sur la route.
        
        Args:
            selected_tolls: Les p√©ages s√©lectionn√©s initialement
            all_tolls: Tous les p√©ages disponibles sur la route
            route_destination: Destination finale
            
        Returns:
            List[MatchedToll]: Les p√©ages optimis√©s
        """
        if len(selected_tolls) == 0:
            return selected_tolls
        
        print(f"üîç Optimisation des sorties pour {len(selected_tolls)} p√©ages...")
        
        # Ne consid√©rer que le dernier p√©age s√©lectionn√©
        last_toll = selected_tolls[-1]
        remaining_tolls = self._get_remaining_tolls(last_toll, all_tolls)
        
        print(f"   üìç Dernier p√©age s√©lectionn√© : {last_toll.effective_name}")
        print(f"   üìç P√©ages restants apr√®s le dernier : {len(remaining_tolls)}")
        
        if len(remaining_tolls) == 0:
            print(f"   ‚úÖ Aucun p√©age restant apr√®s le dernier - pas d'optimisation n√©cessaire")
            return selected_tolls
          # V√©rifier si le dernier p√©age a d√©j√† √©t√© optimis√©
        if hasattr(last_toll, 'is_exit') and last_toll.is_exit:
            print(f"   ‚úÖ Dernier p√©age d√©j√† optimis√© comme sortie - pas de re-optimisation")
            return selected_tolls
          # V√©rifier si le dernier p√©age est un syst√®me ferm√© (condition pour optimisation)
        if last_toll.is_open_system:
            print(f"   ‚úÖ Dernier p√©age est un syst√®me ouvert - pas d'optimisation n√©cessaire")
            return selected_tolls
        
        print(f"   üéØ Optimisation n√©cessaire pour le dernier p√©age (syst√®me ferm√© avec p√©ages restants)")
        
        # Optimiser uniquement le dernier p√©age avec le p√©age pr√©c√©dent si disponible
        previous_toll = selected_tolls[-2] if len(selected_tolls) > 1 else None
        optimized_last_toll = self.optimize_toll_exit(
            last_toll, 
            remaining_tolls, 
            route_destination, 
            previous_toll, 
            route_coords
        )
        
        # Construire la liste finale
        optimized_tolls = selected_tolls[:-1]  # Tous sauf le dernier
        
        if optimized_last_toll:
            print(f"   üîÑ Remplacement du dernier p√©age : {last_toll.effective_name} ‚Üí {optimized_last_toll.effective_name}")
            optimized_tolls.append(optimized_last_toll)
        else:
            print(f"   ‚û°Ô∏è Dernier p√©age conserv√© : {last_toll.effective_name}")
            optimized_tolls.append(last_toll)
        
        return optimized_tolls
    
    def _get_remaining_tolls(self, current_toll: MatchedToll, all_tolls: List[MatchedToll]) -> List[MatchedToll]:
        """
        R√©cup√®re les p√©ages qui viennent apr√®s le p√©age courant sur la route.
        
        Args:
            current_toll: Le p√©age de r√©f√©rence
            all_tolls: Tous les p√©ages ordonn√©s sur la route
            
        Returns:
            List[MatchedToll]: Les p√©ages restants apr√®s le p√©age courant
        """
        try:
            current_index = all_tolls.index(current_toll)
            return all_tolls[current_index + 1:]
        except ValueError:
            # Si le p√©age n'est pas trouv√©, retourner une liste vide
            return []
    
    def _find_exits_on_route_segment(
        self, 
        prev_coords: List[float], 
        target_coords: List[float], 
        route_coords: List[List[float]]
    ) -> List[MotorwayJunction]:
        """
        Trouve la derni√®re sortie avant le p√©age cible (pas sur tout le segment entre les p√©ages).
        
        Args:
            prev_coords: Coordonn√©es du p√©age pr√©c√©dent (non utilis√© maintenant)
            target_coords: Coordonn√©es du p√©age cible
            route_coords: Coordonn√©es compl√®tes de la route
            
        Returns:
            List[MotorwayJunction]: Sorties trouv√©es avant le p√©age cible, ordonn√©es par position
        """
        print(f"   üîç Recherche de sorties autour du p√©age cible {target_coords}")
        
        # Chercher les sorties autour du p√©age cible uniquement (dans 10km)
        exits_near_target = self.exit_finder.find_exits_near_point(target_coords, search_radius_km=10.0)
        
        if not exits_near_target:
            print(f"   ‚ùå Aucune sortie trouv√©e autour du p√©age cible")
            return []
        
        # Position du p√©age cible sur la route
        target_position = self._calculate_position_on_route(target_coords, route_coords)
        if target_position is None:
            print(f"   ‚ùå Impossible de d√©terminer la position du p√©age cible sur la route")
            return []
        
        # Analyser chaque sortie et garder seulement celles AVANT le p√©age cible
        exits_before_target = []
        for junction in exits_near_target:
            exit_position = self._calculate_position_on_route(junction.coordinates, route_coords)
            if exit_position is None:
                continue
            
            # Garder seulement les sorties AVANT le p√©age cible sur la route
            if exit_position < target_position:
                exits_before_target.append(junction)
                junction_name = junction.properties.get('name', 'sans nom')
                print(f"   ‚úÖ Sortie avant p√©age : {junction_name} (pos: {exit_position:.1f} < {target_position:.1f})")
            else:
                junction_name = junction.properties.get('name', 'sans nom')
                print(f"   ‚ùå Sortie apr√®s p√©age : {junction_name} (pos: {exit_position:.1f} >= {target_position:.1f})")
        
        if not exits_before_target:
            print(f"   ‚ùå Aucune sortie trouv√©e AVANT le p√©age cible")
            return []
        
        # Trier par position d√©croissante pour avoir la derni√®re sortie avant le p√©age en premier
        exits_before_target.sort(key=lambda x: self._calculate_position_on_route(x.coordinates, route_coords), reverse=True)
        
        print(f"   üìç {len(exits_before_target)} sorties trouv√©es avant le p√©age cible")
        return exits_before_target
    
    def _calculate_position_on_route(self, point: List[float], route_coords: List[List[float]]) -> Optional[float]:
        """
        Calcule la position d'un point sur la route (distance cumul√©e depuis le d√©but).
        
        Args:
            point: Coordonn√©es du point [lon, lat]
            route_coords: Coordonn√©es de la route compl√®te
            
        Returns:
            Optional[float]: Position en km depuis le d√©but de la route, ou None si √©chec
        """
        if not route_coords or len(route_coords) < 2:
            return None
            
        min_distance = float('inf')
        best_position = None
        
        cumulative_distance = 0.0
        
        for i in range(len(route_coords) - 1):
            # Distance du point √† ce segment de route
            segment_start = route_coords[i]
            segment_end = route_coords[i + 1]
            
            # Distance du point au segment
            dist_to_segment = self._distance_point_to_segment(point, segment_start, segment_end)
            
            if dist_to_segment < min_distance:
                min_distance = dist_to_segment
                # Position approximative sur ce segment
                segment_length = self._calculate_distance(segment_start, segment_end)
                best_position = cumulative_distance + segment_length * 0.5  # Milieu du segment
            
            # Ajouter la distance de ce segment
            cumulative_distance += self._calculate_distance(segment_start, segment_end)
        
        return best_position if min_distance < 1.0 else None  # Seulement si √† moins de 1km
    
    def _distance_point_to_segment(self, point: List[float], seg_start: List[float], seg_end: List[float]) -> float:
        """
        Calcule la distance d'un point √† un segment de ligne.
        
        Args:
            point: Point [lon, lat]
            seg_start: D√©but du segment [lon, lat]
            seg_end: Fin du segment [lon, lat]
            
        Returns:
            float: Distance en km
        """
        # Simplification : distance au point le plus proche du segment
        dist_to_start = self._calculate_distance(point, seg_start)
        dist_to_end = self._calculate_distance(point, seg_end)
        return min(dist_to_start, dist_to_end)

    def _calculate_distance(self, point1: List[float], point2: List[float]) -> float:
        """Calcule la distance entre deux points en km."""
        from src.cache.utils.geographic_utils import calculate_distance
        return calculate_distance(point1, point2)
