"""
exit_optimization_manager.py
----------------------------

Module orchestrateur pour l'optimisation des sorties d'autoroute.

Responsabilit√© unique :
- Coordonner la recherche de sorties d'autoroute optimales
- G√©rer le processus de remplacement p√©age ‚Üí sortie ‚Üí nouveau p√©age
- Orchestrer les diff√©rents composants (finder, detector, etc.)
- Fournir une interface simple pour l'int√©gration

Architecture :
1. D√©tecter le besoin d'optimisation (syst√®me ferm√© + p√©ages restants)
2. Trouver les sorties d'autoroute proches
3. Calculer une route test via la sortie
4. D√©tecter les nouveaux p√©ages sur cette route
5. Valider et retourner le p√©age optimis√©
"""

from typing import List, Optional
from .motorway_exit_finder import MotorwayExitFinder
from .exit_toll_detector import ExitTollDetector
from ..toll_matcher import MatchedToll
from ..osm_data_parser import OSMDataParser, MotorwayJunction
from ..toll_matcher import TollMatcher


class ExitOptimizationManager:
    """
    Gestionnaire principal pour l'optimisation des sorties d'autoroute.
    """
    
    def __init__(self, osm_data_parser: OSMDataParser, toll_matcher: TollMatcher, ors_service):
        """
        Initialise le gestionnaire avec les services n√©cessaires.
        
        Args:
            osm_data_parser: Parser pour acc√©der aux donn√©es OSM
            toll_matcher: Matcher pour identifier les p√©ages
            ors_service: Service ORS pour calculer les routes
        """
        self.exit_finder = MotorwayExitFinder(osm_data_parser)
        self.toll_detector = ExitTollDetector(osm_data_parser, toll_matcher)
        self.ors = ors_service
    
    def optimize_toll_exit(
        self, 
        target_toll: MatchedToll, 
        remaining_tolls: List[MatchedToll],
        route_destination: List[float]
    ) -> Optional[MatchedToll]:
        """
        Optimise un p√©age en trouvant une sortie d'autoroute alternative.
        
        Args:
            target_toll: Le p√©age qu'on voudrait optimiser
            remaining_tolls: Les p√©ages restants sur la route
            route_destination: Destination finale de la route
            
        Returns:
            Optional[MatchedToll]: Le p√©age optimis√©, ou None si pas d'optimisation possible
        """
        print(f"   üéØ Optimisation de sortie pour : {target_toll.effective_name}")
        
        # 1. V√©rifier si l'optimisation est n√©cessaire
        if not self._should_optimize(target_toll, remaining_tolls):
            return None
        
        # 2. Trouver les sorties d'autoroute proches
        target_coords = self._get_toll_coordinates(target_toll)
        if not target_coords:
            print(f"   ‚ùå Impossible de r√©cup√©rer les coordonn√©es de {target_toll.effective_name}")
            return None
        
        exits = self.exit_finder.find_exits_near_point(target_coords, search_radius_km=1.0)
        if not exits:
            print(f"   ‚ö†Ô∏è Aucune sortie d'autoroute trouv√©e pr√®s de {target_toll.effective_name}")
            return None
        
        # 3. Tester la sortie la plus proche
        closest_exit = self.exit_finder.get_closest_exit(exits)
        if not closest_exit:
            return None
        
        # 4. Calculer une route via cette sortie
        exit_toll = self._test_exit_route(closest_exit, route_destination)
        if not exit_toll:
            print(f"   ‚ùå Aucun p√©age d√©tect√© sur la route via {closest_exit.properties.get('name', 'sortie inconnue')}")
            return None
        
        print(f"   üîç P√©age candidat trouv√© : {exit_toll.effective_name}")
        # 5. Valider le remplacement
        if exit_toll and self.toll_detector.validate_exit_toll_replacement(target_toll, exit_toll):
            print(f"   ‚úÖ Optimisation r√©ussie : {target_toll.effective_name} ‚Üí {exit_toll.effective_name}")
            # Marquer ce p√©age comme √©tant une sortie d'autoroute
            exit_toll.is_exit = True
            return exit_toll
        else:
            print(f"   ‚ùå Validation du remplacement √©chou√©e")
        
        return None
    
    def _should_optimize(self, target_toll: MatchedToll, remaining_tolls: List[MatchedToll]) -> bool:
        """
        D√©termine si une optimisation est n√©cessaire.
        
        Args:
            target_toll: Le p√©age cible
            remaining_tolls: Les p√©ages restants
            
        Returns:
            bool: True si l'optimisation est recommand√©e
        """
        # V√©rifier que le p√©age cible est un syst√®me ferm√©
        if target_toll.is_open_system:
            return False
        
        # V√©rifier qu'il y a des p√©ages restants
        if not remaining_tolls:
            return False
        
        # V√©rifier qu'il y a au moins un p√©age ferm√© dans les restants
        has_closed_remaining = any(not toll.is_open_system for toll in remaining_tolls)
        
        return has_closed_remaining
    
    def _get_toll_coordinates(self, toll: MatchedToll) -> Optional[List[float]]:
        """
        R√©cup√®re les coordonn√©es d'un p√©age (priorit√© OSM puis CSV).
        
        Args:
            toll: Le p√©age dont r√©cup√©rer les coordonn√©es
            
        Returns:
            Optional[List[float]]: [longitude, latitude] ou None
        """
        if toll.osm_coordinates and len(toll.osm_coordinates) == 2:
            return toll.osm_coordinates
        elif toll.csv_coordinates and len(toll.csv_coordinates) == 2:
            return toll.csv_coordinates
        else:            return None

    def _test_exit_route(
        self, 
        exit_data: MotorwayJunction, 
        destination: List[float]
    ) -> Optional[MatchedToll]:
        """
        Teste une route via une sortie et d√©tecte les p√©ages.
        
        Args:
            exit_data: Donn√©es de la sortie d'autoroute
            destination: Destination finale
            
        Returns:
            Optional[MatchedToll]: P√©age d√©tect√© sur la route de sortie
        """
        exit_coords = exit_data.coordinates
        if not exit_coords:
            return None
        
        try:
            # Calculer une route courte depuis la sortie vers la destination
            junction_name = exit_data.properties.get('name', 'inconnue')
            print(f"   üß™ Test route via sortie {junction_name}")
            print(f"       üìç Coordonn√©es sortie : {exit_coords}")
            print(f"       üìç Destination : {destination}")
              # Route de test courte (premier segment seulement)
            test_route = self.ors.get_base_route([exit_coords, destination], include_tollways=True)
            
            if not test_route:
                print(f"       ‚ùå Impossible de calculer la route via {junction_name}")
                return None
            
            # Extraire les coordonn√©es de la r√©ponse GeoJSON
            route_coords = None
            if 'features' in test_route and len(test_route['features']) > 0:
                geometry = test_route['features'][0].get('geometry', {})
                route_coords = geometry.get('coordinates', [])
            elif 'coordinates' in test_route:
                # Fallback pour format simple
                route_coords = test_route['coordinates']
            
            if not route_coords:
                print(f"       ‚ùå Impossible d'extraire les coordonn√©es de la route via {junction_name}")
                return None
                
            print(f"       ‚úÖ Route calcul√©e : {len(route_coords)} points")
            print(f"       üîç Recherche de p√©ages sur cette route...")
            
            exit_toll = self.toll_detector.detect_tolls_on_exit_route(route_coords, exit_coords)
            
            if exit_toll:
                print(f"       ‚úÖ P√©age trouv√© : {exit_toll.effective_name}")
            else:
                print(f"       ‚ùå Aucun p√©age d√©tect√© sur cette route")
            
            return exit_toll
            
        except Exception as e:
            print(f"   ‚ö†Ô∏è Erreur lors du test de route via sortie : {e}")
            return None
    
    def optimize_multiple_tolls(
        self, 
        selected_tolls: List[MatchedToll], 
        all_tolls: List[MatchedToll],
        route_destination: List[float]
    ) -> List[MatchedToll]:        
        """
        Optimise plusieurs p√©ages en une seule op√©ration.
        
        Args:
            selected_tolls: Les p√©ages s√©lectionn√©s initialement
            all_tolls: Tous les p√©ages disponibles sur la route
            route_destination: Destination finale
            
        Returns:
            List[MatchedToll]: Les p√©ages optimis√©s
        """
        if len(selected_tolls) <= 1:
            return selected_tolls
        
        print(f"üîç Optimisation des sorties pour {len(selected_tolls)} p√©ages...")
        optimized_tolls = []
        
        for i, toll in enumerate(selected_tolls):
            print(f"   üìç Optimisation du p√©age {i+1}/{len(selected_tolls)} : {toll.effective_name}")
            
            # Calculer les p√©ages restants apr√®s ce p√©age
            remaining_tolls = self._get_remaining_tolls(toll, all_tolls)
            print(f"      ‚Üí {len(remaining_tolls)} p√©ages restants apr√®s celui-ci")
            
            # Tenter l'optimisation
            optimized_toll = self.optimize_toll_exit(toll, remaining_tolls, route_destination)
            
            if optimized_toll:
                print(f"   üîÑ Remplacement : {toll.effective_name} ‚Üí {optimized_toll.effective_name}")
                optimized_tolls.append(optimized_toll)
            else:
                print(f"   ‚û°Ô∏è P√©age conserv√© : {toll.effective_name}")
                optimized_tolls.append(toll)
        
        return optimized_tolls
    
    def _get_remaining_tolls(self, current_toll: MatchedToll, all_tolls: List[MatchedToll]) -> List[MatchedToll]:
        """
        R√©cup√®re les p√©ages qui viennent apr√®s le p√©age courant sur la route.
        
        Args:
            current_toll: Le p√©age de r√©f√©rence
            all_tolls: Tous les p√©ages ordonn√©s sur la route
            
        Returns:
            List[MatchedToll]: Les p√©ages restants apr√®s le p√©age courant
        """
        try:
            current_index = all_tolls.index(current_toll)
            return all_tolls[current_index + 1:]
        except ValueError:
            # Si le p√©age n'est pas trouv√©, retourner une liste vide
            return []
