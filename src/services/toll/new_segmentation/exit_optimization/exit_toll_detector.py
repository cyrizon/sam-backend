"""
exit_toll_detector.py
--------------------

Module sp√©cialis√© pour d√©tecter les nouveaux p√©ages sur les routes calcul√©es par ORS.

Responsabilit√© unique :
- Analyser une route ORS pour identifier les p√©ages
- D√©tecter les nouveaux p√©ages cr√©√©s par l'utilisation d'une sortie
- Associer les p√©ages d√©tect√©s aux coordonn√©es de sortie
- Fournir les informations n√©cessaires pour la comptabilisation

Cas d'usage :
Quand on utilise une sortie d'autoroute au lieu d'un p√©age d'entr√©e,
ORS calcule une nouvelle route qui peut passer par des p√©ages de sortie.
Ce module d√©tecte ces nouveaux p√©ages pour les comptabiliser correctement.
"""

from typing import List, Optional, Dict, Any, Tuple
from src.cache.models.matched_toll import MatchedToll
from src.cache.parsers.toll_matcher import TollMatcher
from src.cache.parsers.osm_parser import OSMParser


class ExitTollDetector:
    """
    D√©tecte les p√©ages sur les nouvelles routes calcul√©es apr√®s utilisation d'une sortie.
    """
    
    def __init__(self, osm_data_parser: OSMParser, toll_matcher: TollMatcher):
        """
        Initialise le d√©tecteur.
        
        Args:
            osm_data_parser: Parser pour acc√©der aux donn√©es OSM
            toll_matcher: Matcher pour identifier les p√©ages
        """
        self.osm_parser = osm_data_parser
        self.toll_matcher = toll_matcher
    
    def detect_tolls_on_exit_route(
        self, 
        route_coordinates: List[List[float]], 
        exit_coordinates: List[float]
    ) -> Optional[MatchedToll]:
        """
        D√©tecte les p√©ages sur une route qui utilise une sortie d'autoroute.
        
        Args:
            route_coordinates: Coordonn√©es de la route calcul√©e par ORS
            exit_coordinates: Coordonn√©es de la sortie utilis√©e
            
        Returns:
            Optional[MatchedToll]: Le p√©age de sortie d√©tect√©, ou None
        """
        print(f"   üîç D√©tection de p√©ages sur route de sortie...")
        
        # 1. Chercher les p√©ages proches de la route
        nearby_tolls = self._find_tolls_near_route(route_coordinates)
        
        if not nearby_tolls:
            print(f"   ‚ö†Ô∏è Aucun p√©age d√©tect√© sur la route de sortie")
            return None
        
        # 2. Identifier le p√©age le plus proche de la sortie
        exit_toll = self._find_toll_closest_to_exit(nearby_tolls, exit_coordinates)
        
        if exit_toll:
            print(f"   ‚úÖ P√©age de sortie d√©tect√© : {exit_toll.effective_name}")
        
        return exit_toll
    
    def _find_tolls_near_route(self, route_coordinates: List[List[float]]) -> List[MatchedToll]:
        """
        Trouve les p√©ages proches de la route.
        
        Args:
            route_coordinates: Coordonn√©es de la route
            
        Returns:
            List[MatchedToll]: P√©ages trouv√©s pr√®s de la route
        """
        # Utiliser la m√™me logique que dans l'identification de p√©ages principale
        osm_tolls = self.osm_parser.find_tolls_near_route(route_coordinates, max_distance_km=0.5)
        
        # Convertir et matcher avec les donn√©es CSV
        osm_tolls_formatted = self._convert_osm_tolls_to_matched_format(osm_tolls)
        matched_tolls = self.toll_matcher.match_osm_tolls_with_csv(
            osm_tolls_formatted, 
            max_distance_km=2.0
        )
        
        return matched_tolls
    
    def _find_toll_closest_to_exit(
        self, 
        tolls: List[MatchedToll], 
        exit_coordinates: List[float]
    ) -> Optional[MatchedToll]:
        """
        Trouve le p√©age le plus proche des coordonn√©es de sortie.
        
        Args:
            tolls: Liste des p√©ages candidats
            exit_coordinates: Coordonn√©es de la sortie [lon, lat]
            
        Returns:
            Optional[MatchedToll]: Le p√©age le plus proche
        """
        if not tolls:
            return None
        
        closest_toll = None
        min_distance = float('inf')
        
        for toll in tolls:
            toll_coords = self._get_toll_coordinates(toll)
            if toll_coords:
                distance = self._calculate_distance(exit_coordinates, toll_coords)
                if distance < min_distance:
                    min_distance = distance
                    closest_toll = toll
        
        return closest_toll
    
    def _get_toll_coordinates(self, toll: MatchedToll) -> Optional[List[float]]:
        """
        R√©cup√®re les coordonn√©es d'un p√©age (priorit√© OSM puis CSV).
        
        Args:
            toll: Le p√©age dont r√©cup√©rer les coordonn√©es
            
        Returns:
            Optional[List[float]]: [longitude, latitude] ou None
        """
        if toll.osm_coordinates and len(toll.osm_coordinates) == 2:
            return toll.osm_coordinates
        elif toll.csv_coordinates and len(toll.csv_coordinates) == 2:
            return toll.csv_coordinates
        else:
            return None
    
    def _calculate_distance(self, point1: List[float], point2: List[float]) -> float:
        """
        Calcule la distance entre deux points en km.
        
        Args:
            point1: [longitude, latitude]
            point2: [longitude, latitude]
            
        Returns:
            float: Distance en kilom√®tres
        """
        import math
        
        lon1, lat1 = math.radians(point1[0]), math.radians(point1[1])
        lon2, lat2 = math.radians(point2[0]), math.radians(point2[1])
        
        dlat = lat2 - lat1
        dlon = lon2 - lon1
        
        a = math.sin(dlat/2)**2 + math.cos(lat1) * math.cos(lat2) * math.sin(dlon/2)**2
        c = 2 * math.asin(math.sqrt(a))
        
        return c * 6371  # Rayon de la Terre en km
    
    def _convert_osm_tolls_to_matched_format(self, osm_tolls: List) -> List:
        """
        Convertit les p√©ages OSM au format attendu par le matcher.
        
        Args:
            osm_tolls: P√©ages OSM bruts
            
        Returns:
            List: P√©ages au format MatchedToll
        """
        # Utiliser la fonction existante du module toll_matcher
        from src.cache.parsers.toll_matcher import convert_osm_tolls_to_matched_format
        return convert_osm_tolls_to_matched_format(osm_tolls)
    
    def validate_exit_toll_replacement(
        self, 
        original_toll: MatchedToll, 
        exit_toll: MatchedToll
    ) -> bool:
        """
        Valide qu'un remplacement de p√©age par un p√©age de sortie est pertinent.
        
        Args:
            original_toll: Le p√©age original qu'on voulait remplacer
            exit_toll: Le p√©age de sortie propos√©
            
        Returns:
            bool: True si le remplacement est valide
        """
        # V√©rifications de base
        if not original_toll or not exit_toll:
            return False
        
        # V√©rifier que les p√©ages sont diff√©rents
        if original_toll.effective_name == exit_toll.effective_name:
            return False
        
        # V√©rifier que le p√©age de sortie est dans une zone proche
        original_coords = self._get_toll_coordinates(original_toll)
        exit_coords = self._get_toll_coordinates(exit_toll)
        
        if not original_coords or not exit_coords:
            return False
        
        distance_km = self._calculate_distance(original_coords, exit_coords)
        
        # Accepter seulement si les p√©ages sont dans un rayon raisonnable (5km max)
        if distance_km > 5.0:
            print(f"   ‚ö†Ô∏è P√©ages trop √©loign√©s : {distance_km:.1f}km > 5km")
            return False
        
        print(f"   ‚úÖ Remplacement valid√© : {original_toll.effective_name} ‚Üí {exit_toll.effective_name} ({distance_km:.1f}km)")
        return True
