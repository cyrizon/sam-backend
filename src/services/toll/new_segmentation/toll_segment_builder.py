"""
toll_segment_builder.py
-----------------------

Module pour construire les segments de route intelligents.
Responsabilit√© : orchestrer la construction des segments en √©vitant les p√©ages non-d√©sir√©s.
"""

from typing import List, Dict, Optional
from src.cache.parsers.toll_matcher import MatchedToll
from .toll_entrance_exit_finder import TollEntranceExitFinder
from .motorway_junction_analyzer import MotorwayJunctionAnalyzer
from .segment_building import SegmentStrategy, SegmentBuilders


class TollSegmentBuilder:
    """
    Construit les segments de route pour √©viter les p√©ages non-d√©sir√©s.
    Orchestre les diff√©rents modules sp√©cialis√©s pour la construction des segments.
    """
    
    def __init__(self, ors_service):
        """
        Initialise avec le service ORS.
        
        Args:
            ors_service: Service ORS pour les calculs de routes
        """        
        self.ors = ors_service
        self.entrance_exit_finder = TollEntranceExitFinder(ors_service)
        self.junction_analyzer = None  # Sera initialis√© avec le parser OSM
        
        # Modules sp√©cialis√©s
        self.segment_strategy = None
        self.segment_builders = None
    
    def build_intelligent_segments(
        self, 
        start_coords: List[float], 
        end_coords: List[float],
        all_tolls_on_route: List[MatchedToll], 
        selected_tolls: List[MatchedToll],
        osm_parser = None,
        route_coords: List[List[float]] = None
    ) -> List[Dict]:
        """
        Construit les segments intelligents avec la nouvelle logique granulaire.
        
        R√®gles :
        - Segment vers p√©age seulement si n√©cessaire
        - Segment p√©age ‚Üí sortie SEULEMENT si p√©ages √† √©viter apr√®s
        - Segment sortie ‚Üí entr√©e pour √©viter des p√©ages
        - Segment entr√©e ‚Üí p√©age si n√©cessaire
        
        Args:
            start_coords: Coordonn√©es de d√©part
            end_coords: Coordonn√©es d'arriv√©e
            all_tolls_on_route: Tous les p√©ages sur la route directe
            selected_tolls: P√©ages que l'on veut utiliser
            osm_parser: Parser OSM pour les junctions
            route_coords: Coordonn√©es de la route de base
            
        Returns:
            List[Dict]: Segments de route √† calculer
        """
        print(f"üß© Construction granulaire pour {len(selected_tolls)} p√©ages s√©lectionn√©s...")
        
        # Initialiser l'analyzer de junctions avec les donn√©es OSM
        if osm_parser and route_coords:
            self.junction_analyzer = MotorwayJunctionAnalyzer(osm_parser)
            print("üîç Analyse des motorway_junctions sur la route...")
        
        # Initialiser les modules sp√©cialis√©s
        self.segment_strategy = SegmentStrategy(self.entrance_exit_finder, self.junction_analyzer)
        self.segment_builders = SegmentBuilders(self.entrance_exit_finder, self.junction_analyzer)
        
        # Cas sp√©cial : aucun p√©age s√©lectionn√©
        if not selected_tolls:
            return []
            
        # Construire les segments selon la nouvelle logique
        segments = self.segment_strategy.build_granular_segments(
            start_coords, end_coords, all_tolls_on_route, selected_tolls, route_coords
        )
        
        return segments
