"""
segment_strategy.py
------------------

Module pour la logique de strat√©gie de construction des segments.
Responsabilit√© : d√©terminer comment construire les segments selon les r√®gles m√©tier.
"""

from typing import List, Dict
from ..toll_matcher import MatchedToll


class SegmentStrategy:
    """
    G√®re la logique de strat√©gie pour la construction des segments intelligents.
    
    R√®gles m√©tier :
    - Segment vers p√©age seulement si n√©cessaire
    - Segment p√©age ‚Üí sortie SEULEMENT si p√©ages √† √©viter apr√®s
    - Segment sortie ‚Üí entr√©e pour √©viter des p√©ages
    - Segment entr√©e ‚Üí p√©age si n√©cessaire
    """
    
    def __init__(self, entrance_exit_finder, junction_analyzer=None):
        """
        Initialise la strat√©gie avec les outils n√©cessaires.
        
        Args:
            entrance_exit_finder: Finder pour les entr√©es/sorties
            junction_analyzer: Analyzer pour les junctions (optionnel)
        """
        self.entrance_exit_finder = entrance_exit_finder
        self.junction_analyzer = junction_analyzer
    
    def build_granular_segments(
        self,
        start_coords: List[float],
        end_coords: List[float], 
        all_tolls: List[MatchedToll],
        selected_tolls: List[MatchedToll],
        route_coords: List[List[float]]
    ) -> List[Dict]:
        """
        Construit les segments avec la logique granulaire.
        
        Logique :
        - D√©part ‚Üí Premier p√©age (√©vite p√©ages avant si n√©cessaire)
        - Pour chaque p√©age s√©lectionn√© :
          * Si p√©ages √† √©viter apr√®s : P√©age ‚Üí Sortie, puis Sortie ‚Üí Prochain point
          * Sinon : P√©age ‚Üí Prochain p√©age directement
        - Dernier p√©age ‚Üí Arriv√©e
        """
        segments = []
        current_point = start_coords
        
        for i, current_toll in enumerate(selected_tolls):
            is_first = (i == 0)
            is_last = (i == len(selected_tolls) - 1)
            
            # 1. Segment vers le p√©age actuel (si n√©cessaire)
            if is_first:
                # Premier p√©age : g√©rer l'√©vitement des p√©ages avant
                from .toll_positioning import TollPositioning
                toll_positioning = TollPositioning()
                
                tolls_before = toll_positioning.get_tolls_before(current_toll, all_tolls)
                if tolls_before:
                    # √âviter les p√©ages avant : D√©part ‚Üí Entr√©e avant p√©age
                    entrance_coords = self.entrance_exit_finder.find_entrance_coordinates(current_toll)
                    segment = {
                        'type': 'avoid_tolls',
                        'start': current_point,
                        'end': entrance_coords,
                        'description': f"D√©part vers entr√©e {current_toll.effective_name} (√©vite {len(tolls_before)} p√©ages)"
                    }
                    segments.append(segment)
                    current_point = entrance_coords
                    print(f"   üìç Segment {len(segments)} : D√©part ‚Üí Entr√©e {current_toll.effective_name} (√©vite {len(tolls_before)} p√©ages)")
                    
                    # Entr√©e ‚Üí P√©age
                    segment = {
                        'type': 'normal',
                        'start': current_point,
                        'end': current_toll.osm_coordinates,
                        'description': f"Entr√©e vers {current_toll.effective_name}"
                    }
                    segments.append(segment)
                    current_point = current_toll.osm_coordinates
                    print(f"   üìç Segment {len(segments)} : Entr√©e ‚Üí {current_toll.effective_name}")
                else:
                    # Pas de p√©ages avant : D√©part ‚Üí P√©age directement
                    segment = {
                        'type': 'normal',
                        'start': current_point,
                        'end': current_toll.osm_coordinates,
                        'description': f"D√©part vers {current_toll.effective_name}"
                    }
                    segments.append(segment)
                    current_point = current_toll.osm_coordinates
                    print(f"   üìç Segment {len(segments)} : D√©part ‚Üí {current_toll.effective_name}")
            else:
                # P√©age interm√©diaire : on y arrive depuis le point pr√©c√©dent
                segment = {
                    'type': 'normal',
                    'start': current_point,
                    'end': current_toll.osm_coordinates,
                    'description': f"Vers {current_toll.effective_name}"
                }
                segments.append(segment)
                current_point = current_toll.osm_coordinates
                print(f"   üìç Segment {len(segments)} : ‚Üí {current_toll.effective_name}")
            
            # 2. Segment apr√®s le p√©age (sortie si n√©cessaire)
            if is_last:
                # Dernier p√©age : g√©rer l'√©vitement des p√©ages apr√®s
                from .toll_positioning import TollPositioning
                toll_positioning = TollPositioning()
                
                tolls_after = toll_positioning.get_tolls_after(current_toll, all_tolls)
                if tolls_after:
                    # √âviter les p√©ages apr√®s : P√©age ‚Üí Sortie, puis Sortie ‚Üí Arriv√©e
                    from .exit_finder import ExitFinder
                    exit_finder = ExitFinder(self.entrance_exit_finder, self.junction_analyzer)
                    
                    exit_coords = exit_finder.find_optimal_exit_after_toll(current_toll, tolls_after, route_coords)
                    
                    # P√©age ‚Üí Sortie
                    segment = {
                        'type': 'normal',
                        'start': current_point,
                        'end': exit_coords,
                        'description': f"{current_toll.effective_name} vers sortie"
                    }
                    segments.append(segment)
                    current_point = exit_coords
                    print(f"   üìç Segment {len(segments)} : {current_toll.effective_name} ‚Üí Sortie")
                    
                    # Sortie ‚Üí Arriv√©e
                    segment = {
                        'type': 'avoid_tolls',
                        'start': current_point,
                        'end': end_coords,
                        'description': f"Sortie vers arriv√©e (√©vite {len(tolls_after)} p√©ages)"
                    }
                    segments.append(segment)
                    print(f"   üìç Segment {len(segments)} : Sortie ‚Üí Arriv√©e (√©vite {len(tolls_after)} p√©ages)")
                else:
                    # Pas de p√©ages apr√®s : P√©age ‚Üí Arriv√©e directement
                    segment = {
                        'type': 'normal',
                        'start': current_point,
                        'end': end_coords,
                        'description': f"{current_toll.effective_name} vers arriv√©e"
                    }
                    segments.append(segment)
                    print(f"   üìç Segment {len(segments)} : {current_toll.effective_name} ‚Üí Arriv√©e")
            else:
                # P√©age interm√©diaire : v√©rifier s'il faut sortir
                next_toll = selected_tolls[i + 1]
                from .toll_positioning import TollPositioning
                toll_positioning = TollPositioning()
                
                tolls_between = toll_positioning.get_tolls_between(current_toll, next_toll, all_tolls)
                
                if tolls_between:
                    # Il y a des p√©ages √† √©viter : P√©age ‚Üí Sortie, puis Sortie ‚Üí Entr√©e suivant
                    from .exit_finder import ExitFinder
                    exit_finder = ExitFinder(self.entrance_exit_finder, self.junction_analyzer)
                    
                    exit_coords = exit_finder.find_optimal_exit_after_toll(current_toll, tolls_between, route_coords)
                    entrance_coords = self.entrance_exit_finder.find_entrance_coordinates(next_toll)
                    
                    # P√©age ‚Üí Sortie
                    segment = {
                        'type': 'normal',
                        'start': current_point,
                        'end': exit_coords,
                        'description': f"{current_toll.effective_name} vers sortie"
                    }
                    segments.append(segment)
                    current_point = exit_coords
                    print(f"   üìç Segment {len(segments)} : {current_toll.effective_name} ‚Üí Sortie")
                    
                    # Sortie ‚Üí Entr√©e suivant
                    segment = {
                        'type': 'avoid_tolls',
                        'start': current_point,
                        'end': entrance_coords,
                        'description': f"Sortie vers entr√©e {next_toll.effective_name} (√©vite {len(tolls_between)} p√©ages)"
                    }
                    segments.append(segment)
                    current_point = entrance_coords
                    print(f"   üìç Segment {len(segments)} : Sortie ‚Üí Entr√©e {next_toll.effective_name} (√©vite {len(tolls_between)} p√©ages)")
                else:
                    # Pas de p√©ages entre : continuer directement vers le suivant
                    current_point = current_toll.osm_coordinates
                    print(f"   üìç Continue directement vers {next_toll.effective_name}")
        
        return segments
