"""
strategic_entrance_finder.py
----------------------------

Module pour trouver des entr√©es d'autoroute strat√©giques.
Responsabilit√© : identifier les bonnes entr√©es d'autoroute pour √©viter certains p√©ages
tout en atteignant d'autres p√©ages de mani√®re logique.
"""

from typing import List, Optional
from src.cache.models.matched_toll import MatchedToll
from .highway_entrance_analyzer import HighwayEntranceAnalyzer


class StrategicEntranceFinder:
    """
    Trouve des entr√©es d'autoroute strat√©giques pour une navigation intelligente.
    """
    def __init__(self, entrance_exit_finder, junction_analyzer=None):
        """
        Initialise le finder avec les outils n√©cessaires.
        
        Args:
            entrance_exit_finder: Finder pour les entr√©es/sorties classiques
            junction_analyzer: Analyzer pour les junctions (optionnel)
        """
        self.entrance_exit_finder = entrance_exit_finder
        self.junction_analyzer = junction_analyzer
        self.highway_analyzer = HighwayEntranceAnalyzer(entrance_exit_finder)
    
    def find_strategic_entrance_before_toll(
        self,
        target_toll: MatchedToll,
        tolls_to_avoid: List[MatchedToll],
        route_coords: List[List[float]] = None
    ) -> Optional[List[float]]:
        """
        Trouve une entr√©e d'autoroute strat√©gique situ√©e APR√àS les p√©ages √† √©viter
        et AVANT le p√©age cible.
        
        Cette m√©thode √©vite le probl√®me actuel o√π on essaie d'aller directement
        au p√©age cible sans p√©age (impossible).
        
        Args:
            target_toll: P√©age qu'on veut atteindre
            tolls_to_avoid: P√©ages qu'on veut √©viter (situ√©s avant target_toll)            route_coords: Coordonn√©es de la route de base
            
        Returns:
            Optional[List[float]]: Coordonn√©es de l'entr√©e strat√©gique ou None
        """        
        if self.junction_analyzer and route_coords:
            print(f"       üîç Tentative d'utilisation du junction_analyzer...")
            # Utiliser l'analyzer pour trouver une entr√©e intelligente
            if hasattr(self.junction_analyzer, 'find_entrance_between_tolls'):
                print(f"       ‚úÖ M√©thode find_entrance_between_tolls disponible")
                strategic_entrance = self.junction_analyzer.find_entrance_between_tolls(
                    route_coords, tolls_to_avoid, target_toll
                )
                
                if strategic_entrance:
                    entrance_coords = strategic_entrance.get('link_coordinates')
                    entrance_name = strategic_entrance.get('name', 'Entr√©e')
                    
                    if entrance_coords:
                        print(f"       üí° Entr√©e strat√©gique trouv√©e : {entrance_name} √† {entrance_coords}")
                        return entrance_coords
                    else:
                        print(f"       ‚ö†Ô∏è Entr√©e trouv√©e mais coordonn√©es manquantes : {strategic_entrance}")
                else:
                    print(f"       ‚ùå Aucune entr√©e trouv√©e par junction_analyzer")
            else:
                print(f"       ‚ùå M√©thode find_entrance_between_tolls non disponible")
        else:
            if not self.junction_analyzer:
                print(f"       ‚ö†Ô∏è junction_analyzer non initialis√©")
            if not route_coords:
                print(f"       ‚ö†Ô∏è route_coords non fournie")
                    
        # Fallback : utiliser notre analyzer g√©ographique intelligent
        strategic_entrance = self.highway_analyzer.find_entrance_between_tolls(
            tolls_to_avoid, target_toll
        )
        
        if strategic_entrance:
            return strategic_entrance
            
        # Dernier fallback : m√©thode classique
        return self._find_fallback_entrance(target_toll, tolls_to_avoid)
    
    def _find_fallback_entrance(
        self,
        target_toll: MatchedToll,
        tolls_to_avoid: List[MatchedToll]
    ) -> List[float]:
        """
        M√©thode de fallback pour trouver une entr√©e quand l'analyzer n'est pas disponible.
        
        Pour l'instant, utilise la m√©thode classique mais on pourrait am√©liorer
        avec une logique g√©ographique plus sophistiqu√©e.
        
        Args:
            target_toll: P√©age cible
            tolls_to_avoid: P√©ages √† √©viter
            
        Returns:
            List[float]: Coordonn√©es d'entr√©e (fallback)
        """
        # Pour l'instant, fallback vers la m√©thode existante
        # TODO: Impl√©menter une logique plus intelligente
        print(f"       ‚ö†Ô∏è Utilisation du fallback pour trouver l'entr√©e vers {target_toll.effective_name}")
        return self.entrance_exit_finder.find_entrance_coordinates(target_toll)
