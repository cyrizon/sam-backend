"""
polyline_intersection.py
-----------------------

Module pour d√©tecter l'intersection stricte entre des p√©ages et une polyline de route.
Calcule si un p√©age est vraiment "SUR" la route (intersection g√©om√©trique stricte).

Responsabilit√© : 
- Calculer l'intersection g√©om√©trique stricte entre points de p√©age et segments de polyline
- Distinguer les p√©ages "sur la route" (intersection stricte) des p√©ages "pr√®s de la route"
- Fournir des m√©thodes de d√©tection fine pour am√©liorer la pr√©cision
"""

import math
from typing import List, Tuple, Optional
from dataclasses import dataclass


@dataclass
class PolylineSegment:
    """Segment de polyline entre deux points cons√©cutifs."""
    start: List[float]  # [lon, lat]
    end: List[float]    # [lon, lat]
    
    def length_km(self) -> float:
        """Calcule la longueur du segment en km."""
        return calculate_distance(self.start, self.end)


def calculate_distance(point1: List[float], point2: List[float]) -> float:
    """
    Calcule la distance entre deux points g√©ographiques en km.
    
    Args:
        point1: [longitude, latitude]
        point2: [longitude, latitude]
        
    Returns:
        float: Distance en kilom√®tres
    """
    lon1, lat1 = math.radians(point1[0]), math.radians(point1[1])
    lon2, lat2 = math.radians(point2[0]), math.radians(point2[1])
    
    dlat = lat2 - lat1
    dlon = lon2 - lon1
    
    a = math.sin(dlat/2)**2 + math.cos(lat1) * math.cos(lat2) * math.sin(dlon/2)**2
    c = 2 * math.asin(math.sqrt(a))
    
    # Rayon de la Terre en km
    return 6371 * c


def point_to_segment_distance(point: List[float], segment: PolylineSegment) -> Tuple[float, List[float]]:
    """
    Calcule la distance minimale d'un point √† un segment de ligne.
    
    Args:
        point: Point [lon, lat]
        segment: Segment de polyline
        
    Returns:
        Tuple[float, List[float]]: (distance_km, point_projection_sur_segment)
    """
    # Convertir en coordonn√©es planes locales pour le calcul
    x1, y1 = segment.start[0], segment.start[1]
    x2, y2 = segment.end[0], segment.end[1]
    px, py = point[0], point[1]
    
    # Vecteur du segment
    dx = x2 - x1
    dy = y2 - y1
    
    # Si le segment est un point (longueur nulle)
    if dx == 0 and dy == 0:
        return calculate_distance(point, segment.start), segment.start
    
    # Param√®tre t pour la projection
    t = max(0, min(1, ((px - x1) * dx + (py - y1) * dy) / (dx * dx + dy * dy)))
    
    # Point de projection sur le segment
    proj_x = x1 + t * dx
    proj_y = y1 + t * dy
    projection = [proj_x, proj_y]
    
    # Distance du point √† la projection
    distance = calculate_distance(point, projection)
    
    return distance, projection


def point_to_polyline_distance(point: List[float], polyline: List[List[float]]) -> Tuple[float, int, List[float]]:
    """
    Calcule la distance minimale d'un point √† une polyline compl√®te.
    
    Args:
        point: Point [lon, lat]
        polyline: Liste de points constituant la polyline [[lon, lat], ...]
        
    Returns:
        Tuple[float, int, List[float]]: (distance_minimale_km, index_segment_le_plus_proche, point_projection)
    """
    if len(polyline) < 2:
        return float('inf'), -1, [0, 0]
    
    min_distance = float('inf')
    closest_segment_index = -1
    closest_projection = [0, 0]
    
    # Tester chaque segment de la polyline
    for i in range(len(polyline) - 1):
        segment = PolylineSegment(polyline[i], polyline[i + 1])
        distance, projection = point_to_segment_distance(point, segment)
        
        if distance < min_distance:
            min_distance = distance
            closest_segment_index = i
            closest_projection = projection
    
    return min_distance, closest_segment_index, closest_projection


def is_toll_on_route_strict(
    toll_coordinates: List[float], 
    route_polyline: List[List[float]], 
    max_distance_m: float = 200
) -> Tuple[bool, float, Optional[List[float]]]:
    """
    D√©termine si un p√©age est strictement SUR la route.
    
    Cette fonction calcule l'intersection g√©om√©trique stricte entre le point de p√©age
    et la polyline de la route. Un p√©age est consid√©r√© "sur la route" si sa distance
    perpendiculaire √† la polyline est inf√©rieure au seuil donn√©.
    
    Args:
        toll_coordinates: Coordonn√©es du p√©age [lon, lat]
        route_polyline: Points de la route [[lon, lat], ...]
        max_distance_m: Distance maximale en m√®tres pour consid√©rer le p√©age "sur la route"
        
    Returns:
        Tuple[bool, float, Optional[List[float]]]: 
            (est_sur_route, distance_minimale_m, point_projection_sur_route)
    """
    if not route_polyline or len(route_polyline) < 2:
        return False, float('inf'), None
    
    # Calculer la distance minimale √† la polyline
    distance_km, segment_index, projection = point_to_polyline_distance(toll_coordinates, route_polyline)
    distance_m = distance_km * 1000  # Convertir en m√®tres
    
    # V√©rifier si c'est dans le seuil
    is_on_route = distance_m <= max_distance_m
    
    return is_on_route, distance_m, projection if is_on_route else None


def filter_tolls_on_route_strict(
    tolls: List, 
    route_polyline: List[List[float]], 
    max_distance_m: float = 200,
    coordinate_attr: str = 'coordinates'
) -> List[Tuple[object, float, List[float]]]:
    """
    Filtre les p√©ages qui sont strictement SUR la route avec intersection g√©om√©trique.
    
    Args:
        tolls: Liste des p√©ages (objets avec attribut coordinates ou dictionnaires)
        route_polyline: Points de la route [[lon, lat], ...]
        max_distance_m: Distance maximale en m√®tres pour consid√©rer un p√©age "sur la route"
        coordinate_attr: Nom de l'attribut contenant les coordonn√©es
        
    Returns:
        List[Tuple[object, float, List[float]]]: 
            Liste de (p√©age, distance_m, point_projection) pour les p√©ages sur la route
    """
    if not route_polyline or len(route_polyline) < 2:
        return []
    
    tolls_on_route = []
    
    print(f"üéØ D√©tection stricte : p√©ages √† moins de {max_distance_m}m de la polyline")
    
    for toll in tolls:
        # Extraire les coordonn√©es selon le type d'objet
        if hasattr(toll, coordinate_attr):
            coords = getattr(toll, coordinate_attr)
        elif isinstance(toll, dict):
            coords = toll.get(coordinate_attr, [])
        else:
            continue
        
        if not coords or len(coords) != 2:
            continue
        
        # Tester l'intersection stricte
        is_on_route, distance_m, projection = is_toll_on_route_strict(
            coords, route_polyline, max_distance_m
        )
        
        if is_on_route:
            tolls_on_route.append((toll, distance_m, projection))
            
            # Log pour debug
            toll_name = getattr(toll, 'name', None) or getattr(toll, 'effective_name', 'P√©age inconnu')
            if callable(toll_name):
                toll_name = toll_name()
            elif hasattr(toll, 'osm_name'):
                toll_name = toll.osm_name or 'P√©age sans nom'
            
            print(f"   ‚úÖ {toll_name} : {distance_m:.1f}m de la route")
        else:
            # Log pour debug (p√©ages proches mais pas assez)
            toll_name = getattr(toll, 'name', None) or getattr(toll, 'effective_name', 'P√©age inconnu')
            if callable(toll_name):
                toll_name = toll_name()
            elif hasattr(toll, 'osm_name'):
                toll_name = toll.osm_name or 'P√©age sans nom'
            
            print(f"   ‚ùå {toll_name} : {distance_m:.1f}m de la route (trop loin)")
    
    print(f"üìç D√©tection stricte termin√©e : {len(tolls_on_route)} p√©ages vraiment sur la route")
    return tolls_on_route


def get_toll_position_on_route(
    toll_coordinates: List[float], 
    route_polyline: List[List[float]]
) -> Optional[float]:
    """
    Calcule la position relative d'un p√©age sur la route (0.0 = d√©but, 1.0 = fin).
    
    Args:
        toll_coordinates: Coordonn√©es du p√©age [lon, lat]
        route_polyline: Points de la route [[lon, lat], ...]
        
    Returns:
        Optional[float]: Position relative sur la route (0.0 √† 1.0) ou None si erreur
    """
    if not route_polyline or len(route_polyline) < 2:
        return None
    
    # Trouver le segment le plus proche
    distance_km, segment_index, projection = point_to_polyline_distance(toll_coordinates, route_polyline)
    
    if segment_index < 0:
        return None
    
    # Calculer la distance cumul√©e jusqu'au d√©but du segment
    cumulative_distance = 0.0
    for i in range(segment_index):
        cumulative_distance += calculate_distance(route_polyline[i], route_polyline[i + 1])
    
    # Ajouter la distance dans le segment jusqu'√† la projection
    segment_start = route_polyline[segment_index]
    distance_in_segment = calculate_distance(segment_start, projection)
    cumulative_distance += distance_in_segment
    
    # Calculer la distance totale de la route
    total_distance = 0.0
    for i in range(len(route_polyline) - 1):
        total_distance += calculate_distance(route_polyline[i], route_polyline[i + 1])
    
    # Position relative
    if total_distance > 0:
        return cumulative_distance / total_distance
    else:
        return 0.0
