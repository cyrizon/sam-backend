"""
intelligent_segmentation_v2_optimized.py
---------------------------------------

Version optimis√©e de la strat√©gie de segmentation intelligente V2.
S'inspire des performances de la V3/V4 en travaillant sur les segments tollways d'ORS.

OPTIMISATIONS CL√âS :
1. Travail sur les segments tollways (comme V3/V4) plut√¥t que route compl√®te
2. Matching p√©ages OSM/CSV au chargement pour √©viter le re-matching √† chaque requ√™te
3. Utilisation des motorway_junctions + motorway_links li√©s (pas de recherche g√©ographique)
4. Attribut csv_role disponible d√®s le chargement pour chaque p√©age
5. Logique segments gratuits : pas d'usage entre deux p√©ages ferm√©s
6. Pr√©-calcul des associations p√©ages-segments pour performance

Algorithme optimis√© :
1. Route de base + extraction segments tollways
2. Identification p√©ages SUR segments (pr√©-match√©s)
3. S√©lection p√©ages cibles (prioriser syst√®me ouvert)
4. Segmentation intelligente bas√©e sur tollways
5. Calcul des routes pour chaque segment
6. Assemblage final optimis√©
"""

from typing import List, Dict, Optional, Tuple
from .toll_segment_builder import TollSegmentBuilder
from .segment_route_calculator import SegmentRouteCalculator
from .toll_matcher import TollMatcher, MatchedToll, convert_osm_tolls_to_matched_format
from .toll_deduplicator import TollDeduplicator
from .intelligent_segmentation_helpers import SegmentationSpecialCases, RouteUtils
from .route_assembler import RouteAssembler
from .polyline_intersection import filter_tolls_on_route_strict
from .hybrid_strategy.tollways_analyzer import TollwaysAnalyzer
from .hybrid_strategy.segment_avoidance_manager import SegmentAvoidanceManager
from benchmark.performance_tracker import performance_tracker
from src.services.osm_data_cache import osm_data_cache


class IntelligentSegmentationStrategyV2Optimized:
    """
    Version optimis√©e de la strat√©gie de segmentation intelligente V2.
    Travaille sur les segments tollways avec p√©ages pr√©-match√©s.
    """
    
    def __init__(self, ors_service, osm_data_file: str = None):
        """
        Initialise la strat√©gie optimis√©e.
        
        Args:
            ors_service: Service ORS pour les calculs de routes
            osm_data_file: (ignor√©, conserv√© pour compatibilit√©)
        """
        self.ors = ors_service
        self.osm_parser = osm_data_cache._osm_parser
        
        # Modules core
        self.toll_matcher = TollMatcher()
        # Note: TollDeduplicator utilis√© comme m√©thode statique
        self.special_cases = SegmentationSpecialCases(ors_service)
        self.route_calculator = SegmentRouteCalculator(ors_service)
        self.route_assembler = RouteAssembler()
        
        # Modules optimis√©s pour tollways
        self.tollways_analyzer = TollwaysAnalyzer()
        self.avoidance_manager = SegmentAvoidanceManager(ors_service, self.osm_parser)
        
        # Cache pour les p√©ages pr√©-match√©s par segment
        self._segment_tolls_cache = {}
        
        print("üöÄ Strat√©gie V2 Optimis√©e initialis√©e (segments tollways + p√©ages pr√©-match√©s)")
    
    def find_route_with_exact_tolls(
        self, 
        coordinates: List[List[float]], 
        target_tolls: int
    ) -> Optional[Dict]:
        """
        Trouve une route avec exactement le nombre de p√©ages demand√©.
        Utilise la strat√©gie optimis√©e avec segments tollways.
        """
        with performance_tracker.measure_operation("intelligent_segmentation_v2_optimized"):
            print(f"üß† Segmentation V2 Optimis√©e : {target_tolls} p√©age(s) exact(s)")
            
            # CAS SP√âCIAL : 0 p√©age demand√©
            if target_tolls == 0:
                print("üö´ Cas sp√©cial : 0 p√©age demand√©")
                return self.special_cases.get_toll_free_route(coordinates)
            
            # √âtape 1 : Route de base + segments tollways
            base_route_response, tollways_data = self._get_base_route_with_tollways(coordinates)
            if not base_route_response:
                return None
            
            # √âtape 2 : Identifier p√©ages pr√©-match√©s SUR les segments
            route_coords = RouteUtils.extract_route_coordinates(base_route_response)
            tolls_on_segments = self._identify_prematched_tolls_on_segments(
                tollways_data['segments'], route_coords
            )
            
            # CAS SP√âCIAUX : optimisations directes
            if len(tolls_on_segments) < target_tolls:
                print(f"‚ö†Ô∏è Pas assez de p√©ages ({len(tolls_on_segments)} < {target_tolls})")
                return self.special_cases.format_base_route_as_result(base_route_response)
            
            if len(tolls_on_segments) == target_tolls:
                print(f"‚úÖ Nombre exact de p√©ages trouv√©")
                return self.special_cases.format_base_route_as_result(base_route_response)
            
            # √âtape 3 : S√©lectionner p√©ages cibles (prioriser syst√®me ouvert)
            selected_tolls = self._select_target_tolls_optimized(tolls_on_segments, target_tolls)
            if not selected_tolls:
                return None
            
            # √âtape 4 : Segmentation intelligente bas√©e sur tollways
            print("üèóÔ∏è √âtape 4 : Segmentation intelligente optimis√©e...")
            segments = self._create_optimized_segments(
                coordinates, tollways_data, tolls_on_segments, selected_tolls, route_coords
            )
            
            if not segments:
                print("‚ùå √âchec segmentation optimis√©e, fallback route de base")
                return self.special_cases.format_base_route_as_result(base_route_response)
            
            # √âtape 5 : Calcul des routes pour chaque segment
            print("üõ£Ô∏è √âtape 5 : Calcul des routes par segment...")
            calculated_segments = self._calculate_segments_routes(segments, base_route_response, tollways_data)
            
            if not calculated_segments:
                print("‚ùå √âchec calcul des segments")
                return self.special_cases.format_base_route_as_result(base_route_response)
            
            # √âtape 6 : Assemblage final optimis√©
            print("üîß √âtape 6 : Assemblage final optimis√©...")
            final_route = self.route_assembler.assemble_final_route_multi(
                calculated_segments, target_tolls, selected_tolls
            )
            
            if not final_route:
                print("‚ùå √âchec assemblage final")
                return self.special_cases.format_base_route_as_result(base_route_response)
            
            print("‚úÖ Segmentation V2 Optimis√©e r√©ussie")
            return final_route
    
    def _get_base_route_with_tollways(self, coordinates: List[List[float]]) -> Tuple[Optional[Dict], Optional[Dict]]:
        """
        Obtient la route de base avec les segments tollways.
        
        Returns:
            Tuple[route_response, tollways_data]: R√©ponse ORS compl√®te et donn√©es tollways
        """
        print("üõ£Ô∏è √âtape 1 : Route de base + segments tollways...")

        response = self.ors.get_base_route(coordinates, include_tollways=True)
        if not response or "features" not in response or not response["features"]:
            print("‚ùå √âchec obtention route de base")
            return None, None

        base_feature = response["features"][0]
        properties = base_feature.get("properties", {})

        # Extraire segments tollways √† partir des propri√©t√©s
        tollways_data = self._extract_tollways_segments(properties)
        if not tollways_data:
            print("‚ö†Ô∏è Aucun segment tollway trouv√©")
            return response, {'segments': []}

        print(f"‚úÖ Route de base obtenue avec {len(tollways_data['segments'])} segments tollways")
        return response, tollways_data

    def _extract_tollways_segments(self, properties: Dict) -> Optional[Dict]:
        """
        Extrait les segments tollways √† partir des propri√©t√©s d'une feature ORS.
        """
        extras = properties.get('extras', {})
        tollways_info = extras.get('tollways', {})
        if not tollways_info:
            return None
        segments = []
        values = tollways_info.get('values', [])
        for segment_info in values:
            if len(segment_info) >= 3:
                start_idx, end_idx, is_toll = segment_info
                segment = {
                    'start_waypoint': start_idx,
                    'end_waypoint': end_idx,
                    'is_toll': bool(is_toll),
                    'segment_type': 'toll' if is_toll else 'free'
                }
                segments.append(segment)
        return {
            'segments': segments,
            'total_segments': len(segments),
            'toll_segments': sum(1 for s in segments if s['is_toll']),
            'free_segments': sum(1 for s in segments if not s['is_toll'])
        }
    
    def _identify_prematched_tolls_on_segments(
        self, 
        segments: List[Dict], 
        route_coords: List[List[float]]
    ) -> List[MatchedToll]:
        """
        Identifie les p√©ages pr√©-match√©s sur les segments tollways.
        
        OPTIMISATION CL√â : Utilise les p√©ages d√©j√† match√©s OSM/CSV au chargement,
        √©vite le re-matching √† chaque requ√™te.
        
        Args:
            segments: Segments tollways extraits
            route_coords: Coordonn√©es de la route
            
        Returns:
            List[MatchedToll]: P√©ages pr√©-match√©s trouv√©s sur les segments
        """
        print("üîç √âtape 2 : Identification p√©ages pr√©-match√©s sur segments...")
        
        # R√©cup√©rer les p√©ages pr√©-match√©s du cache OSM
        prematched_tolls = self._get_prematched_tolls_from_cache()
        
        if not prematched_tolls:
            print("‚ö†Ô∏è Aucun p√©age pr√©-match√© disponible, fallback sur matching traditionnel")
            return self._fallback_traditional_matching(route_coords)
        
        # Filtrer les p√©ages qui sont VRAIMENT sur la route (tous segments)
        # Utiliser une d√©tection stricte comme dans la V2 originale
        tolls_on_segments = []

        for segment in segments:
            print(f"   Segment {segment['start_waypoint']} √† {segment['end_waypoint']} (toll: {segment['is_toll']})")
            
            # Extraire les coordonn√©es du segment
            start_idx = segment['start_waypoint']
            end_idx = segment['end_waypoint']
            
            if end_idx >= len(route_coords):
                continue
            
            segment_coords = route_coords[start_idx:end_idx + 1]
            
            # Trouver les p√©ages pr√©-match√©s sur ce segment (tous segments, pas seulement payants)
            segment_tolls = self._find_prematched_tolls_on_segment(
                prematched_tolls, segment_coords
            )
            
            tolls_on_segments.extend(segment_tolls)
        
        # Filtrage strict : garder seulement les p√©ages √† moins de 1m de la route
        print("üéØ Filtrage strict des p√©ages (distance < 1m)...")
        strict_tolls = []
        for toll in tolls_on_segments:
            min_distance_m = float('inf')
            for coord in route_coords:
                dist_m = self._calculate_distance_meters(
                    [toll.osm_coordinates[1], toll.osm_coordinates[0]], 
                    [coord[1], coord[0]]
                )
                min_distance_m = min(min_distance_m, dist_m)
            
            if min_distance_m <= 1.0:  # 1m max
                strict_tolls.append(toll)
                print(f"   ‚úÖ {toll.effective_name} : {min_distance_m:.1f}m")
            else:
                print(f"   ‚ùå {toll.effective_name} : {min_distance_m:.1f}m (trop loin)")
        
        tolls_on_segments = strict_tolls
        
        # D√©duplication par proximit√© (m√©thode statique)
        tolls_on_segments = TollDeduplicator.deduplicate_tolls_by_proximity(tolls_on_segments, route_coords)
        
        print(f"‚úÖ {len(tolls_on_segments)} p√©ages pr√©-match√©s trouv√©s sur segments")
        
        # Debug : afficher les p√©ages avec leur csv_role
        for toll in tolls_on_segments:
            role_str = f"({toll.csv_role})" if toll.csv_role else "(non-match√©)"
            print(f"   üè∑Ô∏è {toll.effective_name} {role_str}")
        
        return tolls_on_segments
    
    def _get_prematched_tolls_from_cache(self) -> List[MatchedToll]:
        """
        R√©cup√®re les p√©ages pr√©-match√©s du cache OSM.
        
        OPTIMISATION : Les p√©ages sont match√©s OSM/CSV au chargement des donn√©es,
        pas √† chaque requ√™te.
        
        Returns:
            List[MatchedToll]: P√©ages pr√©-match√©s avec csv_role disponible
        """
        if not self.osm_parser or not hasattr(self.osm_parser, 'toll_stations'):
            return []
        
        prematched_tolls = []
        
        for toll_station in self.osm_parser.toll_stations:
            # V√©rifier si le p√©age a √©t√© pr√©-match√© avec les donn√©es CSV
            if hasattr(toll_station, 'csv_match') and toll_station.csv_match:
                # P√©age pr√©-match√©
                matched_toll = MatchedToll(
                    osm_id=toll_station.feature_id,
                    osm_name=toll_station.name,
                    osm_coordinates=toll_station.coordinates,
                    csv_id=toll_station.csv_match.get('id'),
                    csv_name=toll_station.csv_match.get('name'),
                    csv_role=toll_station.csv_match.get('role'),  # 'O' ou 'F'
                    csv_coordinates=toll_station.csv_match.get('coordinates'),
                    distance_m=toll_station.csv_match.get('distance_m', 0),
                    confidence=toll_station.csv_match.get('confidence', 1.0)
                )
                prematched_tolls.append(matched_toll)
            else:
                # P√©age OSM non match√© -> consid√©r√© comme ferm√© (csv_role='F')
                matched_toll = MatchedToll(
                    osm_id=toll_station.feature_id,
                    osm_name=toll_station.name,
                    osm_coordinates=toll_station.coordinates,
                    csv_id=None,
                    csv_name=None,
                    csv_role='F',  # Ferm√© par d√©faut si non match√©
                    csv_coordinates=None,
                    distance_m=0,
                    confidence=0.0
                )
                prematched_tolls.append(matched_toll)
        
        return prematched_tolls
    
    def _find_prematched_tolls_on_segment(
        self, 
        prematched_tolls: List[MatchedToll], 
        segment_coords: List[List[float]]
    ) -> List[MatchedToll]:
        """
        Trouve les p√©ages pr√©-match√©s sur un segment donn√©.
        
        Args:
            prematched_tolls: Tous les p√©ages pr√©-match√©s
            segment_coords: Coordonn√©es du segment
            
        Returns:
            List[MatchedToll]: P√©ages trouv√©s sur ce segment
        """
        if not segment_coords:
            return []
        
        segment_tolls = []
        max_distance_km = 2.0  # Distance max pour consid√©rer un p√©age sur le segment
        
        for toll in prematched_tolls:
            toll_coords = toll.osm_coordinates or toll.csv_coordinates
            if not toll_coords:
                continue
            
            # Calculer la distance minimale au segment
            min_distance = min(
                self._calculate_distance(toll_coords, point)
                for point in segment_coords
            )
            
            if min_distance <= max_distance_km:
                segment_tolls.append(toll)
        
        return segment_tolls
    
    def _fallback_traditional_matching(self, route_coords: List[List[float]]) -> List[MatchedToll]:
        """
        Fallback sur le matching traditionnel si les p√©ages pr√©-match√©s ne sont pas disponibles.
        
        Args:
            route_coords: Coordonn√©es de la route
            
        Returns:
            List[MatchedToll]: P√©ages match√©s traditionnellement
        """
        print("üîÑ Fallback matching traditionnel...")
        
        # Utiliser le syst√®me traditionnel de matching
        osm_tolls = filter_tolls_on_route_strict(
            self.osm_parser.toll_stations, route_coords, max_distance_km=5.0
        )
        
        if not osm_tolls:
            return []
        
        # Convertir au format MatchedToll
        osm_tolls_dict = convert_osm_tolls_to_matched_format(osm_tolls)
        
        # Matcher avec CSV
        matched_tolls = self.toll_matcher.match_osm_tolls_with_csv(osm_tolls_dict)
        
        return matched_tolls
    
    def _select_target_tolls_optimized(
        self, 
        tolls_on_segments: List[MatchedToll], 
        target_count: int
    ) -> List[MatchedToll]:
        """
        S√©lectionne les p√©ages cibles en priorisant le syst√®me ferm√© (comme l'ancienne V2).
        
        R√àGLES (identiques √† l'ancienne V2) :
        - 1 p√©age : Seulement syst√®me ouvert (ferm√© seul = impossible)
        - 2+ p√©ages : Priorit√© aux ferm√©s (plus logique entrance‚Üíexit), puis ouverts
        - Contrainte : Jamais de p√©age ferm√© seul (toujours par paires minimum)
        
        Args:
            tolls_on_segments: P√©ages disponibles sur les segments
            target_count: Nombre de p√©ages souhait√©s
            
        Returns:
            List[MatchedToll]: P√©ages s√©lectionn√©s
        """
        print(f"üéØ √âtape 3 : S√©lection {target_count} p√©ages cibles (prioriser syst√®me ferm√©)...")
        
        if target_count > len(tolls_on_segments):
            print(f"‚ùå Pas assez de p√©ages disponibles ({len(tolls_on_segments)} < {target_count})")
            return []
        
        if len(tolls_on_segments) <= target_count:
            return tolls_on_segments
        
        # S√©parer par type de syst√®me (ouvert/ferm√©)
        open_system_tolls = [t for t in tolls_on_segments if t.csv_role == 'O']
        closed_system_tolls = [t for t in tolls_on_segments if t.csv_role != 'O']
        
        print(f"   ÔøΩ Disponibles : {len(open_system_tolls)} ouverts, {len(closed_system_tolls)} ferm√©s")
        
        # Utiliser la logique unifi√©e de l'ancienne V2
        return self._select_tolls_unified_optimized(open_system_tolls, closed_system_tolls, target_count)
    
    def _select_tolls_unified_optimized(
        self, 
        open_tolls: List[MatchedToll], 
        closed_tolls: List[MatchedToll], 
        target_count: int
    ) -> List[MatchedToll]:
        """
        Logique unifi√©e de s√©lection de p√©ages (identique √† l'ancienne V2).
        
        R√®gles :
        1. Toujours prioriser les p√©ages ferm√©s (par paires)
        2. Si contrainte viol√©e (1 seul ferm√©), passer aux ouverts
        3. Compl√©ter avec les ouverts si n√©cessaire
        """
        selected_tolls = []
        
        # √âtape 1 : Prendre d'abord les ferm√©s (par paires si possible)
        if len(closed_tolls) >= 2:
            # Calculer combien de paires on peut prendre
            pairs_available = len(closed_tolls) // 2
            pairs_needed = min(pairs_available, target_count // 2)
            
            # Si target_count est impair et qu'on a assez de ferm√©s, prendre une paire de plus
            if target_count % 2 == 1 and pairs_available > pairs_needed:
                pairs_needed += 1
            
            selected_tolls.extend(closed_tolls[:pairs_needed * 2])
        
        # √âtape 2 : Compl√©ter avec des ouverts si n√©cessaire
        remaining = target_count - len(selected_tolls)
        if remaining > 0:
            selected_tolls.extend(open_tolls[:remaining])
        
        # √âtape 3 : Ajuster √† la taille exacte
        final_selected = selected_tolls[:target_count]
        
        # √âtape 4 : V√©rifier la contrainte (pas de ferm√© seul, sauf si pas d'alternative)
        closed_count = sum(1 for t in final_selected if t.csv_role != 'O')
        if closed_count == 1 and len(open_tolls) > 0:
            print(f"   ‚ö†Ô∏è Contrainte viol√©e : 1 seul ferm√© d√©tect√©, passage aux ouverts...")
            # Si on ne peut pas respecter la contrainte ET qu'on a des ouverts, prendre que des ouverts
            final_selected = open_tolls[:target_count]
        elif closed_count == 1 and len(open_tolls) == 0:
            print(f"   ‚úÖ 1 seul ferm√© accept√© (pas d'alternative ouverte)")
        
        print(f"   ‚úÖ {len(final_selected)} p√©ages s√©lectionn√©s : {[t.effective_name for t in final_selected]}")
        print(f"      - Ferm√©s : {sum(1 for t in final_selected if t.csv_role != 'O')}")
        print(f"      - Ouverts : {sum(1 for t in final_selected if t.csv_role == 'O')}")
        
        return final_selected
    
    def _create_optimized_segments(
        self,
        coordinates: List[List[float]],
        tollways_data: Dict,
        tolls_on_segments: List[MatchedToll],
        selected_tolls: List[MatchedToll],
        route_coords: List[List[float]]
    ) -> List[Dict]:
        """
        Cr√©e les segments optimis√©s bas√©s sur l'analyse des tollways.
        
        LOGIQUE OPTIMIS√âE :
        - Utilise les motorway_junctions + motorway_links li√©s
        - Pas de recherche g√©ographique inutile
        - Segments gratuits : pas d'usage entre deux p√©ages ferm√©s
        
        Args:
            coordinates: [d√©part, arriv√©e]
            tollways_data: Donn√©es des segments tollways
            tolls_on_segments: Tous les p√©ages sur segments
            selected_tolls: P√©ages s√©lectionn√©s
            route_coords: Coordonn√©es de la route
            
        Returns:
            List[Dict]: Segments optimis√©s
        """
        print("üèóÔ∏è Cr√©ation segments optimis√©s...")
        
        print("\nüü¶ DEBUG: P√©ages transmis √† l'analyseur de segments (tous sur la route, <1m, apr√®s d√©duplication):")
        for t in tolls_on_segments:
            print(f"   - {t.effective_name} | {t.csv_role} | {t.osm_coordinates}")
        print(f"üü¶ DEBUG: P√©ages s√©lectionn√©s (√† utiliser): {[t.effective_name for t in selected_tolls]}")

        # Analyser les segments tollways vs TOUS les p√©ages d√©tect√©s sur la route
        analysis = self.tollways_analyzer.analyze_segments_for_tolls(
            tollways_data['segments'],
            tolls_on_segments,  # TOUS les p√©ages d√©tect√©s sur la route
            route_coords
        )
        
        # Identifier les segments √† √©viter
        segments_indices_to_avoid = self._identify_segments_to_avoid(analysis, selected_tolls)
        
        # Debug : afficher les indices √† √©viter
        for index in segments_indices_to_avoid:
            print(f"   üìù Segment {index} ajout√© √† la liste d'√©vitement")
        
        print(f"üéØ {len(segments_indices_to_avoid)} segments seront √©vit√©s sur {len(segments_indices_to_avoid)} identifi√©s")
        
        # Cr√©er les segments d'√©vitement avec logique optimis√©e
        avoidance_segments = self.avoidance_manager.create_avoidance_segments(
            tollways_data['segments'],
            segments_indices_to_avoid,  # Passer les indices directement
            route_coords,
            coordinates[0],
            coordinates[1]
        )
        
        # Optimiser l'assemblage final pour √©viter les redondances
        optimized_segments = self._optimize_final_assembly(avoidance_segments)

        # Marquage des segments r√©utilisables (m√™mes coordonn√©es que segment de base)
        base_segments = tollways_data.get('segments', [])
        for seg in optimized_segments:
            for idx, base_seg in enumerate(base_segments):
                # On suppose que les segments ont 'start' et 'end' (coordonn√©es [lon, lat] ou [lat, lon])
                seg_start = seg.get('start') or seg.get('start_coord')
                seg_end = seg.get('end') or seg.get('end_coord')
                base_start = base_seg.get('start_coord') if 'start_coord' in base_seg else None
                base_end = base_seg.get('end_coord') if 'end_coord' in base_seg else None
                # Si les coordonn√©es sont identiques (tol√©rance stricte)
                if seg_start == base_start and seg_end == base_end:
                    seg['reuse_base_segment'] = True
                    seg['base_segment_index'] = idx
                    break
                else:
                    seg['reuse_base_segment'] = False

        # Appliquer la logique des segments gratuits optimis√©e
        final_segments = self._apply_free_segments_logic(optimized_segments, selected_tolls)

        print(f"‚úÖ {len(final_segments)} segments optimis√©s cr√©√©s")
        return final_segments
    
    def _identify_segments_to_avoid(self, analysis: Dict, selected_tolls: List[MatchedToll]) -> List[int]:
        """
        Identifie les segments tollways √† √©viter selon la logique optimis√©e.
        
        LOGIQUE : 
        1. √âviter les segments qui contiennent des p√©ages non-s√©lectionn√©s
        2. √âviter les "faux segments gratuits" dans les syst√®mes ferm√©s
        
        Args:
            analysis: Analyse des segments vs p√©ages
            selected_tolls: P√©ages s√©lectionn√©s √† garder
            
        Returns:
            List[int]: Indices des segments √† √©viter
        """
        selected_toll_ids = {toll.osm_id for toll in selected_tolls}
        segments_to_avoid = []
        
        # √âtape 1 : Segments avec p√©ages non-s√©lectionn√©s
        for segment_info in analysis['segments_with_tolls']:
            segment_toll_ids = {toll.osm_id for toll in segment_info['tolls']}
            
            # Si le segment contient des p√©ages non-s√©lectionn√©s, l'√©viter
            if not segment_toll_ids.issubset(selected_toll_ids):
                segments_to_avoid.append(segment_info['segment_index'])
                toll_names = [toll.effective_name for toll in segment_info['tolls']]
                print(f"   üö´ Segment {segment_info['segment_index']} √† √©viter (p√©ages non-s√©lectionn√©s: {toll_names})")
        
        # √âtape 2 : Identifier les "faux segments gratuits" dans les syst√®mes ferm√©s
        false_free_segments = self._identify_false_free_segments(analysis, selected_tolls)
        segments_to_avoid.extend(false_free_segments)
        
        return segments_to_avoid
    
    def _identify_false_free_segments(self, analysis: Dict, selected_tolls: List[MatchedToll]) -> List[int]:
        """
        Identifie les "faux segments gratuits" qui sont en r√©alit√© dans un syst√®me ferm√©.
        
        Un segment gratuit est "faux" s'il est entre deux p√©ages ferm√©s du m√™me syst√®me,
        car on ne peut pas sortir de l'autoroute sans payer.
        
        Args:
            analysis: Analyse des segments vs p√©ages
            selected_tolls: P√©ages s√©lectionn√©s
            
        Returns:
            List[int]: Indices des faux segments gratuits √† √©viter
        """
        false_free_segments = []
        
        # Obtenir les p√©ages ferm√©s non-s√©lectionn√©s
        all_tolls_on_route = []
        for segment_info in analysis['segments_with_tolls']:
            all_tolls_on_route.extend(segment_info['tolls'])
        
        unselected_closed_tolls = [
            toll for toll in all_tolls_on_route 
            if toll.csv_role == 'F' and toll not in selected_tolls
        ]
        
        if len(unselected_closed_tolls) < 2:
            return false_free_segments
        
        print(f"   üîç Analyse des faux segments gratuits entre {len(unselected_closed_tolls)} p√©ages ferm√©s non-s√©lectionn√©s...")
        
        # Pour chaque segment gratuit, v√©rifier s'il est entre deux p√©ages ferm√©s
        for free_segment_info in analysis['free_segments']:
            segment_index = free_segment_info['segment_index']
            
            # Trouver les p√©ages ferm√©s avant et apr√®s ce segment
            toll_before = self._find_nearest_closed_toll_before(segment_index, unselected_closed_tolls, analysis)
            toll_after = self._find_nearest_closed_toll_after(segment_index, unselected_closed_tolls, analysis)
            
            if toll_before and toll_after:
                # V√©rifier s'ils sont du m√™me syst√®me autoroutier (m√™me pr√©fixe)
                if self._are_tolls_same_system(toll_before, toll_after):
                    false_free_segments.append(segment_index)
                    print(f"   üö´ Segment gratuit {segment_index} identifi√© comme faux (entre {toll_before.effective_name} et {toll_after.effective_name})")
        
        return false_free_segments
    
    def _find_nearest_closed_toll_before(self, segment_index: int, closed_tolls: List[MatchedToll], analysis: Dict) -> Optional[MatchedToll]:
        """Trouve le p√©age ferm√© le plus proche avant un segment donn√©."""
        for i in range(segment_index - 1, -1, -1):
            for segment_info in analysis['segments_with_tolls']:
                if segment_info['segment_index'] == i:
                    for toll in segment_info['tolls']:
                        if toll in closed_tolls:
                            return toll
        return None
    
    def _find_nearest_closed_toll_after(self, segment_index: int, closed_tolls: List[MatchedToll], analysis: Dict) -> Optional[MatchedToll]:
        """Trouve le p√©age ferm√© le plus proche apr√®s un segment donn√©."""
        max_segments = max(info['segment_index'] for info in analysis['segments_with_tolls'] + analysis['free_segments'])
        
        for i in range(segment_index + 1, max_segments + 1):
            for segment_info in analysis['segments_with_tolls']:
                if segment_info['segment_index'] == i:
                    for toll in segment_info['tolls']:
                        if toll in closed_tolls:
                            return toll
        return None
    
    def _are_tolls_same_system(self, toll1: MatchedToll, toll2: MatchedToll) -> bool:
        """
        V√©rifie si deux p√©ages appartiennent au m√™me syst√®me autoroutier.
        
        Utilise le pr√©fixe des identifiants CSV (ex: APRR_F123 et APRR_F456 = m√™me syst√®me APRR).
        """
        if not toll1.csv_id or not toll2.csv_id:
            return False
        
        # Extraire le pr√©fixe (ex: "APRR" de "APRR_F123")
        prefix1 = toll1.csv_id.split('_')[0] if '_' in toll1.csv_id else toll1.csv_id
        prefix2 = toll2.csv_id.split('_')[0] if '_' in toll2.csv_id else toll2.csv_id
        
        return prefix1 == prefix2
    
    def _apply_free_segments_logic(
        self, 
        segments: List[Dict], 
        selected_tolls: List[MatchedToll]
    ) -> List[Dict]:
        """
        Applique la logique optimis√©e des segments gratuits.
        
        R√àGLE OPTIMIS√âE : Ne pas utiliser les segments gratuits entre deux p√©ages ferm√©s.
        
        Args:
            segments: Segments calcul√©s
            selected_tolls: P√©ages s√©lectionn√©s
            
        Returns:
            List[Dict]: Segments avec logique gratuits appliqu√©e
        """
        print("üÜì Application logique segments gratuits optimis√©e...")
        
        # Identifier les p√©ages ferm√©s s√©lectionn√©s
        closed_tolls = [t for t in selected_tolls if t.csv_role == 'F']
        
        if len(closed_tolls) < 2:
            print("   ‚úÖ Moins de 2 p√©ages ferm√©s, segments gratuits autoris√©s")
            return segments
        
        # Analyser les segments entre p√©ages ferm√©s
        optimized_segments = []
        
        for segment in segments:
            # V√©rifier si c'est un segment gratuit entre deux p√©ages ferm√©s
            if self._is_free_segment_between_closed_tolls(segment, closed_tolls):
                print(f"   üö´ Segment gratuit supprim√© (entre p√©ages ferm√©s)")
                continue
            
            optimized_segments.append(segment)
        
        print(f"‚úÖ {len(optimized_segments)} segments apr√®s logique gratuits")
        return optimized_segments
    
    def _is_free_segment_between_closed_tolls(self, segment: Dict, closed_tolls: List[MatchedToll]) -> bool:
        """
        V√©rifie si un segment gratuit est entre deux p√©ages ferm√©s.
        
        Args:
            segment: Segment √† v√©rifier
            closed_tolls: Liste des p√©ages ferm√©s
            
        Returns:
            bool: True si le segment est entre deux p√©ages ferm√©s
        """
        # Logique simplifi√©e : v√©rifier si le segment est marqu√© comme gratuit
        # et s'il y a des p√©ages ferm√©s avant et apr√®s
        
        if segment.get('segment_type') != 'free':
            return False
        
        # Cette logique pourrait √™tre affin√©e selon la structure exacte des segments
        # Pour l'instant, on consid√®re que s'il y a plus de 2 p√©ages ferm√©s,
        # les segments gratuits interm√©diaires doivent √™tre √©vit√©s
        
        return len(closed_tolls) >= 2
    
    def _calculate_segments_routes(self, segments: List[Dict], base_route_response: Dict = None, tollways_data: Dict = None) -> List[Dict]:
        """
        Calcule les routes pour chaque segment optimis√©.
        Si un segment est marqu√© 'reuse_base_segment', on r√©utilise la portion de la route de base.
        
        Args:
            segments: Segments √† calculer
            base_route_response: R√©ponse ORS de la route de base (pour r√©utilisation)
            tollways_data: Donn√©es des segments tollways (pour indexation)
        
        Returns:
            List[Dict]: Segments avec routes calcul√©es
        """
        print("üõ£Ô∏è Calcul des routes par segment...")
        calculated_segments = []
        base_coords = None
        if base_route_response:
            base_coords = RouteUtils.extract_route_coordinates(base_route_response)
        base_segments = tollways_data.get('segments', []) if tollways_data else []

        for i, segment in enumerate(segments):
            print(f"   Segment {i+1}/{len(segments)}...")
            if segment.get('reuse_base_segment') and base_coords and base_segments:
                idx = segment.get('base_segment_index')
                if idx is not None and idx < len(base_segments):
                    base_seg = base_segments[idx]
                    start_idx = base_seg.get('start_waypoint')
                    end_idx = base_seg.get('end_waypoint')
                    # Extraire portion de la route de base
                    segment_coords = base_coords[start_idx:end_idx+1]
                    route_result = {
                        'geometry': segment_coords,
                        'start': segment.get('start'),
                        'end': segment.get('end'),
                        'segment_type': segment.get('segment_type'),
                        'description': segment.get('description', 'Segment r√©utilis√©'),
                        'reused': True
                    }
                    calculated_segments.append(route_result)
                    print(f"   ‚ôªÔ∏è Segment {i+1} r√©utilis√© depuis la route de base")
                    continue
            # Sinon, calcul classique
            adapted_segment = self._adapt_segment_format(segment)
            route_result = self.route_calculator.calculate_segment_route(adapted_segment)
            if route_result:
                calculated_segments.append(route_result)
                print(f"   ‚úÖ Segment {i+1} calcul√©")
            else:
                print(f"   ‚ùå √âchec segment {i+1}")
                return None  # √âchec global si un segment √©choue
        print(f"‚úÖ {len(calculated_segments)} segments calcul√©s")
        return calculated_segments
    
    def _optimize_final_assembly(self, segments: List[Dict]) -> List[Dict]:
        """
        Optimise l'assemblage final des segments pour √©viter les redondances.
        
        Args:
            segments: Segments bruts cr√©√©s
            
        Returns:
            List[Dict]: Segments optimis√©s et assembl√©s
        """
        if not segments:
            return []
        
        print(f"üîß Optimisation assemblage final ({len(segments)} segments bruts)...")
        
        # Regrouper les segments cons√©cutifs d'√©vitement
        optimized = []
        i = 0
        last_end = None
        while i < len(segments):
            current_segment = segments[i]
            # V√©rification de la continuit√© des coordonn√©es
            current_start = current_segment.get('start') or current_segment.get('start_coord')
            if last_end is not None and current_start != last_end:
                print(f"   ‚ö†Ô∏è Segment {i} ignor√© : d√©but {current_start} ne correspond pas √† la fin pr√©c√©dente {last_end}")
                i += 1
                continue
            if current_segment.get('segment_type') == 'avoid_tolls':
                # Regrouper tous les segments d'√©vitement cons√©cutifs
                avoidance_group = [current_segment]
                j = i + 1
                while j < len(segments) and segments[j].get('segment_type') == 'avoid_tolls':
                    avoidance_group.append(segments[j])
                    j += 1
                if len(avoidance_group) > 1:
                    merged_segment = self._merge_avoidance_segments(avoidance_group)
                    optimized.append(merged_segment)
                    print(f"   üîó {len(avoidance_group)} segments d'√©vitement fusionn√©s")
                    last_end = merged_segment.get('end') or merged_segment.get('end_coord')
                else:
                    optimized.append(current_segment)
                    last_end = current_segment.get('end') or current_segment.get('end_coord')
                i = j
            else:
                optimized.append(current_segment)
                last_end = current_segment.get('end') or current_segment.get('end_coord')
                i += 1
        print(f"   ‚úÖ {len(optimized)} segments apr√®s optimisation")
        return optimized
    
    def _merge_avoidance_segments(self, avoidance_segments: List[Dict]) -> Dict:
        """
        Fusionne plusieurs segments d'√©vitement cons√©cutifs en un seul.
        
        Args:
            avoidance_segments: Segments d'√©vitement √† fusionner
            
        Returns:
            Dict: Segment d'√©vitement fusionn√©
        """
        if len(avoidance_segments) == 1:
            return avoidance_segments[0]
        
        first = avoidance_segments[0]
        last = avoidance_segments[-1]
        
        # Calculer une nouvelle route d'√©vitement globale
        try:
            global_route = self.ors.get_route_avoid_tollways(
                [first['start_coord'], last['end_coord']]
            )
            
            if global_route:
                return {
                    'segment_type': 'avoid_tolls',
                    'strategy': 'merged_avoidance',
                    'start': first['start_coord'],
                    'end': last['end_coord'],
                    'start_coord': first['start_coord'],
                    'end_coord': last['end_coord'],
                    'route': global_route,
                    'merged_count': len(avoidance_segments),
                    'description': f"√âvitement fusionn√© de {len(avoidance_segments)} segments"
                }
        except Exception as e:
            print(f"   ‚ö†Ô∏è Erreur fusion segments : {e}")
        
        # Fallback : retourner le premier segment
        return first
    
    def _calculate_distance(self, point1: List[float], point2: List[float]) -> float:
        """
        Calcule la distance entre deux points en km.
        
        Args:
            point1: [lon, lat]
            point2: [lon, lat]
            
        Returns:
            float: Distance en kilom√®tres
        """
        import math
        
        lon1, lat1 = math.radians(point1[0]), math.radians(point1[1])
        lon2, lat2 = math.radians(point2[0]), math.radians(point2[1])
        
        dlat = lat2 - lat1
        dlon = lon2 - lon1
        
        a = math.sin(dlat/2)**2 + math.cos(lat1) * math.cos(lat2) * math.sin(dlon/2)**2
        c = 2 * math.asin(math.sqrt(a))
        
        return 6371 * c  # Rayon de la Terre en km
    
    def _calculate_distance_meters(self, coord1: List[float], coord2: List[float]) -> float:
        """
        Calcule la distance entre deux points en m√®tres.
        
        Args:
            coord1: Premier point [lat, lon]
            coord2: Deuxi√®me point [lat, lon]
            
        Returns:
            float: Distance en m√®tres
        """
        import math
        
        lat1, lon1 = math.radians(coord1[0]), math.radians(coord1[1])
        lat2, lon2 = math.radians(coord2[0]), math.radians(coord2[1])
        
        dlat = lat2 - lat1
        dlon = lon2 - lon1
        
        a = math.sin(dlat/2)**2 + math.cos(lat1) * math.cos(lat2) * math.sin(dlon/2)**2
        c = 2 * math.asin(math.sqrt(a))
        
        return 6371000.0 * c  # Rayon de la Terre en m√®tres
    
    def _adapt_segment_format(self, segment: Dict) -> Dict:
        """
        Adapte le format d'un segment pour le SegmentRouteCalculator.
        
        Args:
            segment: Segment original
            
        Returns:
            Dict: Segment adapt√© avec les cl√©s attendues
        """
        # Si le segment a d√©j√† le bon format, le retourner tel quel
        if all(key in segment for key in ['start', 'end', 'segment_type', 'description']):
            return segment
        
        # Sinon, essayer d'adapter le format
        adapted = {
            'start': segment.get('start_coord', segment.get('start', [0, 0])),
            'end': segment.get('end_coord', segment.get('end', [0, 0])),
            'segment_type': segment.get('segment_type', segment.get('type', 'normal')),
            'description': segment.get('description', f"Segment {segment.get('segment_type', 'normal')} {segment.get('id', 'inconnu')}")
        }
        
        print(f"   üîß Segment adapt√© : {adapted['description']}")
        return adapted
