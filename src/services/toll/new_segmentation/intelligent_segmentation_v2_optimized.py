"""
intelligent_segmentation_v2_optimized.py
---------------------------------------

Version optimis√©e de la strat√©gie de segmentation intelligente V2.
S'inspire des performances de la V3/V4 en travaillant sur les segments tollways d'ORS.

OPTIMISATIONS CL√âS :
1. Travail sur les segments tollways (comme V3/V4) plut√¥t que route compl√®te
2. Matching p√©ages OSM/CSV au chargement pour √©viter le re-matching √† chaque requ√™te
3. Utilisation des motorway_junctions + motorway_links li√©s (pas de recherche g√©ographique)
4. Attribut csv_role disponible d√®s le chargement pour chaque p√©age
5. Logique segments gratuits : pas d'usage entre deux p√©ages ferm√©s
6. Pr√©-calcul des associations p√©ages-segments pour performance

Algorithme optimis√© :
1. Route de base + extraction segments tollways
2. Identification p√©ages SUR segments (pr√©-match√©s)
3. S√©lection p√©ages cibles (prioriser syst√®me ouvert)
4. Segmentation intelligente bas√©e sur tollways
5. Calcul des routes pour chaque segment
6. Assemblage final optimis√©
"""

from typing import List, Dict, Optional, Tuple
from .toll_segment_builder import TollSegmentBuilder
from .segment_route_calculator import SegmentRouteCalculator
from .toll_matcher import TollMatcher, MatchedToll, convert_osm_tolls_to_matched_format
from .toll_deduplicator import TollDeduplicator
from .intelligent_segmentation_helpers import SegmentationSpecialCases, RouteUtils
from .route_assembler import RouteAssembler
from .polyline_intersection import filter_tolls_on_route_strict
from .hybrid_strategy.tollways_analyzer import TollwaysAnalyzer
from .hybrid_strategy.segment_avoidance_manager import SegmentAvoidanceManager
from benchmark.performance_tracker import performance_tracker
from src.services.osm_data_cache import osm_data_cache


class IntelligentSegmentationStrategyV2Optimized:
    """
    Version optimis√©e de la strat√©gie de segmentation intelligente V2.
    Travaille sur les segments tollways avec p√©ages pr√©-match√©s.
    """
    
    def __init__(self, ors_service, osm_data_file: str = None):
        """
        Initialise la strat√©gie optimis√©e.
        
        Args:
            ors_service: Service ORS pour les calculs de routes
            osm_data_file: (ignor√©, conserv√© pour compatibilit√©)
        """
        self.ors = ors_service
        self.osm_parser = osm_data_cache._osm_parser
        
        # Modules core
        self.toll_matcher = TollMatcher()
        self.toll_deduplicator = TollDeduplicator()
        self.special_cases = SegmentationSpecialCases(ors_service)
        self.route_calculator = SegmentRouteCalculator(ors_service)
        self.route_assembler = RouteAssembler()
        
        # Modules optimis√©s pour tollways
        self.tollways_analyzer = TollwaysAnalyzer()
        self.avoidance_manager = SegmentAvoidanceManager(ors_service, self.osm_parser)
        
        # Cache pour les p√©ages pr√©-match√©s par segment
        self._segment_tolls_cache = {}
        
        print("üöÄ Strat√©gie V2 Optimis√©e initialis√©e (segments tollways + p√©ages pr√©-match√©s)")
    
    def find_route_with_exact_tolls(
        self, 
        coordinates: List[List[float]], 
        target_tolls: int
    ) -> Optional[Dict]:
        """
        Trouve une route avec exactement le nombre de p√©ages demand√©.
        Utilise la strat√©gie optimis√©e avec segments tollways.
        """
        with performance_tracker.measure_operation("intelligent_segmentation_v2_optimized"):
            print(f"üß† Segmentation V2 Optimis√©e : {target_tolls} p√©age(s) exact(s)")
            
            # CAS SP√âCIAL : 0 p√©age demand√©
            if target_tolls == 0:
                print("üö´ Cas sp√©cial : 0 p√©age demand√©")
                return self.special_cases.get_toll_free_route(coordinates)
            
            # √âtape 1 : Route de base + segments tollways
            base_route, tollways_data = self._get_base_route_with_tollways(coordinates)
            if not base_route:
                return None
            
            # √âtape 2 : Identifier p√©ages pr√©-match√©s SUR les segments
            route_coords = RouteUtils.extract_route_coordinates(base_route)
            tolls_on_segments = self._identify_prematched_tolls_on_segments(
                tollways_data['segments'], route_coords
            )
            
            # CAS SP√âCIAUX : optimisations directes
            if len(tolls_on_segments) < target_tolls:
                print(f"‚ö†Ô∏è Pas assez de p√©ages ({len(tolls_on_segments)} < {target_tolls})")
                return self.special_cases.format_base_route_as_result(base_route)
            
            if len(tolls_on_segments) == target_tolls:
                print(f"‚úÖ Nombre exact de p√©ages trouv√©")
                return self.special_cases.format_base_route_as_result(base_route)
            
            # √âtape 3 : S√©lectionner p√©ages cibles (prioriser syst√®me ouvert)
            selected_tolls = self._select_target_tolls_optimized(tolls_on_segments, target_tolls)
            if not selected_tolls:
                return None
            
            # √âtape 4 : Segmentation intelligente bas√©e sur tollways
            print("üèóÔ∏è √âtape 4 : Segmentation intelligente optimis√©e...")
            segments = self._create_optimized_segments(
                coordinates, tollways_data, tolls_on_segments, selected_tolls, route_coords
            )
            
            if not segments:
                print("‚ùå √âchec segmentation optimis√©e, fallback route de base")
                return self.special_cases.format_base_route_as_result(base_route)
            
            # √âtape 5 : Calcul des routes pour chaque segment
            print("üõ£Ô∏è √âtape 5 : Calcul des routes par segment...")
            calculated_segments = self._calculate_segments_routes(segments)
            
            if not calculated_segments:
                print("‚ùå √âchec calcul des segments")
                return self.special_cases.format_base_route_as_result(base_route)
            
            # √âtape 6 : Assemblage final optimis√©
            print("üîß √âtape 6 : Assemblage final optimis√©...")
            final_route = self._assemble_optimized_route(calculated_segments)
            
            if not final_route:
                print("‚ùå √âchec assemblage final")
                return self.special_cases.format_base_route_as_result(base_route)
            
            print("‚úÖ Segmentation V2 Optimis√©e r√©ussie")
            return final_route
    
    def _get_base_route_with_tollways(self, coordinates: List[List[float]]) -> Tuple[Optional[Dict], Optional[Dict]]:
        """
        Obtient la route de base avec les segments tollways.
        
        Returns:
            Tuple[route, tollways_data]: Route de base et donn√©es tollways
        """
        print("üõ£Ô∏è √âtape 1 : Route de base + segments tollways...")
        
        # Route de base sans √©vitement
        response = self.ors.get_base_route(coordinates)
        if not response or response.get('status') != 'success':
            print("‚ùå √âchec obtention route de base")
            return None, None
        
        base_route = response.get('data', {}).get('routes', [{}])[0]
        if not base_route:
            print("‚ùå Route de base vide")
            return None, None
        
        # Extraire segments tollways
        tollways_data = self._extract_tollways_segments(base_route)
        if not tollways_data:
            print("‚ö†Ô∏è Aucun segment tollway trouv√©")
            return base_route, {'segments': []}
        
        print(f"‚úÖ Route de base obtenue avec {len(tollways_data['segments'])} segments tollways")
        return base_route, tollways_data
    
    def _extract_tollways_segments(self, route: Dict) -> Optional[Dict]:
        """
        Extrait les segments tollways de la route ORS.
        
        Args:
            route: Route ORS compl√®te
            
        Returns:
            Dict contenant les segments tollways analys√©s
        """
        geometry = route.get('geometry')
        if not geometry:
            return None
        
        # Chercher les segments dans les extras
        extras = route.get('extras', {})
        tollways_info = extras.get('tollways', {})
        
        if not tollways_info:
            return None
        
        segments = []
        values = tollways_info.get('values', [])
        
        for segment_info in values:
            # Format ORS : [start_index, end_index, is_toll_flag]
            if len(segment_info) >= 3:
                start_idx, end_idx, is_toll = segment_info
                
                segment = {
                    'start_waypoint': start_idx,
                    'end_waypoint': end_idx,
                    'is_toll': bool(is_toll),
                    'segment_type': 'toll' if is_toll else 'free'
                }
                segments.append(segment)
        
        return {
            'segments': segments,
            'total_segments': len(segments),
            'toll_segments': sum(1 for s in segments if s['is_toll']),
            'free_segments': sum(1 for s in segments if not s['is_toll'])
        }
    
    def _identify_prematched_tolls_on_segments(
        self, 
        segments: List[Dict], 
        route_coords: List[List[float]]
    ) -> List[MatchedToll]:
        """
        Identifie les p√©ages pr√©-match√©s sur les segments tollways.
        
        OPTIMISATION CL√â : Utilise les p√©ages d√©j√† match√©s OSM/CSV au chargement,
        √©vite le re-matching √† chaque requ√™te.
        
        Args:
            segments: Segments tollways extraits
            route_coords: Coordonn√©es de la route
            
        Returns:
            List[MatchedToll]: P√©ages pr√©-match√©s trouv√©s sur les segments
        """
        print("üîç √âtape 2 : Identification p√©ages pr√©-match√©s sur segments...")
        
        # R√©cup√©rer les p√©ages pr√©-match√©s du cache OSM
        prematched_tolls = self._get_prematched_tolls_from_cache()
        
        if not prematched_tolls:
            print("‚ö†Ô∏è Aucun p√©age pr√©-match√© disponible, fallback sur matching traditionnel")
            return self._fallback_traditional_matching(route_coords)
        
        # Filtrer les p√©ages qui sont sur les segments tollways
        tolls_on_segments = []
        
        for segment in segments:
            if not segment['is_toll']:
                continue  # Ignorer les segments gratuits
            
            # Extraire les coordonn√©es du segment
            start_idx = segment['start_waypoint']
            end_idx = segment['end_waypoint']
            
            if end_idx >= len(route_coords):
                continue
            
            segment_coords = route_coords[start_idx:end_idx + 1]
            
            # Trouver les p√©ages pr√©-match√©s sur ce segment
            segment_tolls = self._find_prematched_tolls_on_segment(
                prematched_tolls, segment_coords
            )
            
            tolls_on_segments.extend(segment_tolls)
        
        # D√©duplication
        tolls_on_segments = self.toll_deduplicator.deduplicate_tolls(tolls_on_segments)
        
        print(f"‚úÖ {len(tolls_on_segments)} p√©ages pr√©-match√©s trouv√©s sur segments")
        
        # Debug : afficher les p√©ages avec leur csv_role
        for toll in tolls_on_segments:
            role_str = f"({toll.csv_role})" if toll.csv_role else "(non-match√©)"
            print(f"   üè∑Ô∏è {toll.effective_name} {role_str}")
        
        return tolls_on_segments
    
    def _get_prematched_tolls_from_cache(self) -> List[MatchedToll]:
        """
        R√©cup√®re les p√©ages pr√©-match√©s du cache OSM.
        
        OPTIMISATION : Les p√©ages sont match√©s OSM/CSV au chargement des donn√©es,
        pas √† chaque requ√™te.
        
        Returns:
            List[MatchedToll]: P√©ages pr√©-match√©s avec csv_role disponible
        """
        if not self.osm_parser or not hasattr(self.osm_parser, 'toll_stations'):
            return []
        
        prematched_tolls = []
        
        for toll_station in self.osm_parser.toll_stations:
            # V√©rifier si le p√©age a √©t√© pr√©-match√© avec les donn√©es CSV
            if hasattr(toll_station, 'csv_match') and toll_station.csv_match:
                # P√©age pr√©-match√©
                matched_toll = MatchedToll(
                    osm_id=toll_station.feature_id,
                    osm_name=toll_station.name,
                    osm_coordinates=toll_station.coordinates,
                    csv_id=toll_station.csv_match.get('id'),
                    csv_name=toll_station.csv_match.get('name'),
                    csv_role=toll_station.csv_match.get('role'),  # 'O' ou 'F'
                    csv_coordinates=toll_station.csv_match.get('coordinates'),
                    distance_m=toll_station.csv_match.get('distance_m', 0),
                    confidence=toll_station.csv_match.get('confidence', 1.0)
                )
                prematched_tolls.append(matched_toll)
            else:
                # P√©age OSM non match√© -> consid√©r√© comme ferm√© (csv_role='F')
                matched_toll = MatchedToll(
                    osm_id=toll_station.feature_id,
                    osm_name=toll_station.name,
                    osm_coordinates=toll_station.coordinates,
                    csv_id=None,
                    csv_name=None,
                    csv_role='F',  # Ferm√© par d√©faut si non match√©
                    csv_coordinates=None,
                    distance_m=0,
                    confidence=0.0
                )
                prematched_tolls.append(matched_toll)
        
        return prematched_tolls
    
    def _find_prematched_tolls_on_segment(
        self, 
        prematched_tolls: List[MatchedToll], 
        segment_coords: List[List[float]]
    ) -> List[MatchedToll]:
        """
        Trouve les p√©ages pr√©-match√©s sur un segment donn√©.
        
        Args:
            prematched_tolls: Tous les p√©ages pr√©-match√©s
            segment_coords: Coordonn√©es du segment
            
        Returns:
            List[MatchedToll]: P√©ages trouv√©s sur ce segment
        """
        if not segment_coords:
            return []
        
        segment_tolls = []
        max_distance_km = 2.0  # Distance max pour consid√©rer un p√©age sur le segment
        
        for toll in prematched_tolls:
            toll_coords = toll.osm_coordinates or toll.csv_coordinates
            if not toll_coords:
                continue
            
            # Calculer la distance minimale au segment
            min_distance = min(
                self._calculate_distance(toll_coords, point)
                for point in segment_coords
            )
            
            if min_distance <= max_distance_km:
                segment_tolls.append(toll)
        
        return segment_tolls
    
    def _fallback_traditional_matching(self, route_coords: List[List[float]]) -> List[MatchedToll]:
        """
        Fallback sur le matching traditionnel si les p√©ages pr√©-match√©s ne sont pas disponibles.
        
        Args:
            route_coords: Coordonn√©es de la route
            
        Returns:
            List[MatchedToll]: P√©ages match√©s traditionnellement
        """
        print("üîÑ Fallback matching traditionnel...")
        
        # Utiliser le syst√®me traditionnel de matching
        osm_tolls = filter_tolls_on_route_strict(
            self.osm_parser.toll_stations, route_coords, max_distance_km=5.0
        )
        
        if not osm_tolls:
            return []
        
        # Convertir au format MatchedToll
        osm_tolls_dict = convert_osm_tolls_to_matched_format(osm_tolls)
        
        # Matcher avec CSV
        matched_tolls = self.toll_matcher.match_osm_tolls_with_csv(osm_tolls_dict)
        
        return matched_tolls
    
    def _select_target_tolls_optimized(
        self, 
        tolls_on_segments: List[MatchedToll], 
        target_count: int
    ) -> List[MatchedToll]:
        """
        S√©lectionne les p√©ages cibles en priorisant le syst√®me ouvert.
        
        OPTIMISATION : Utilise directement le csv_role pr√©-calcul√©.
        
        Args:
            tolls_on_segments: P√©ages disponibles sur les segments
            target_count: Nombre de p√©ages souhait√©s
            
        Returns:
            List[MatchedToll]: P√©ages s√©lectionn√©s
        """
        print(f"üéØ √âtape 3 : S√©lection {target_count} p√©ages cibles (prioriser syst√®me ouvert)...")
        
        if len(tolls_on_segments) <= target_count:
            return tolls_on_segments
        
        # S√©parer par type de syst√®me (ouvert/ferm√©)
        open_system_tolls = [t for t in tolls_on_segments if t.csv_role == 'O']
        closed_system_tolls = [t for t in tolls_on_segments if t.csv_role != 'O']
        
        print(f"   üîì Syst√®me ouvert : {len(open_system_tolls)} p√©ages")
        print(f"   üîí Syst√®me ferm√© : {len(closed_system_tolls)} p√©ages")
        
        selected = []
        
        # Prioriser les p√©ages √† syst√®me ouvert
        selected.extend(open_system_tolls[:target_count])
        
        # Compl√©ter avec les p√©ages ferm√©s si n√©cessaire
        remaining = target_count - len(selected)
        if remaining > 0:
            selected.extend(closed_system_tolls[:remaining])
        
        print(f"‚úÖ {len(selected)} p√©ages s√©lectionn√©s")
        return selected
    
    def _create_optimized_segments(
        self,
        coordinates: List[List[float]],
        tollways_data: Dict,
        tolls_on_segments: List[MatchedToll],
        selected_tolls: List[MatchedToll],
        route_coords: List[List[float]]
    ) -> List[Dict]:
        """
        Cr√©e les segments optimis√©s bas√©s sur l'analyse des tollways.
        
        LOGIQUE OPTIMIS√âE :
        - Utilise les motorway_junctions + motorway_links li√©s
        - Pas de recherche g√©ographique inutile
        - Segments gratuits : pas d'usage entre deux p√©ages ferm√©s
        
        Args:
            coordinates: [d√©part, arriv√©e]
            tollways_data: Donn√©es des segments tollways
            tolls_on_segments: Tous les p√©ages sur segments
            selected_tolls: P√©ages s√©lectionn√©s
            route_coords: Coordonn√©es de la route
            
        Returns:
            List[Dict]: Segments optimis√©s
        """
        print("üèóÔ∏è Cr√©ation segments optimis√©s...")
        
        # Analyser les segments tollways vs p√©ages s√©lectionn√©s
        analysis = self.tollways_analyzer.analyze_segments_for_tolls(
            tollways_data['segments'], selected_tolls, route_coords
        )
        
        # Identifier les segments √† √©viter
        segments_to_avoid = self._identify_segments_to_avoid(analysis, selected_tolls)
        
        # Cr√©er les segments d'√©vitement avec logique optimis√©e
        optimized_segments = self.avoidance_manager.create_avoidance_segments(
            tollways_data['segments'],
            segments_to_avoid,
            route_coords,
            coordinates[0],
            coordinates[1]
        )
        
        # Appliquer la logique des segments gratuits optimis√©e
        final_segments = self._apply_free_segments_logic(optimized_segments, selected_tolls)
        
        print(f"‚úÖ {len(final_segments)} segments optimis√©s cr√©√©s")
        return final_segments
    
    def _identify_segments_to_avoid(self, analysis: Dict, selected_tolls: List[MatchedToll]) -> List[int]:
        """
        Identifie les segments tollways √† √©viter selon la logique optimis√©e.
        
        LOGIQUE : √âviter les segments qui contiennent des p√©ages non-s√©lectionn√©s.
        
        Args:
            analysis: Analyse des segments vs p√©ages
            selected_tolls: P√©ages s√©lectionn√©s √† garder
            
        Returns:
            List[int]: Indices des segments √† √©viter
        """
        selected_toll_ids = {toll.osm_id for toll in selected_tolls}
        segments_to_avoid = []
        
        for segment_info in analysis['segments_with_tolls']:
            segment_toll_ids = {toll.osm_id for toll in segment_info['tolls']}
            
            # Si le segment contient des p√©ages non-s√©lectionn√©s, l'√©viter
            if not segment_toll_ids.issubset(selected_toll_ids):
                segments_to_avoid.append(segment_info['segment_index'])
                print(f"   üö´ Segment {segment_info['segment_index']} √† √©viter (p√©ages non-s√©lectionn√©s)")
        
        return segments_to_avoid
    
    def _apply_free_segments_logic(
        self, 
        segments: List[Dict], 
        selected_tolls: List[MatchedToll]
    ) -> List[Dict]:
        """
        Applique la logique optimis√©e des segments gratuits.
        
        R√àGLE OPTIMIS√âE : Ne pas utiliser les segments gratuits entre deux p√©ages ferm√©s.
        
        Args:
            segments: Segments calcul√©s
            selected_tolls: P√©ages s√©lectionn√©s
            
        Returns:
            List[Dict]: Segments avec logique gratuits appliqu√©e
        """
        print("üÜì Application logique segments gratuits optimis√©e...")
        
        # Identifier les p√©ages ferm√©s s√©lectionn√©s
        closed_tolls = [t for t in selected_tolls if t.csv_role == 'F']
        
        if len(closed_tolls) < 2:
            print("   ‚úÖ Moins de 2 p√©ages ferm√©s, segments gratuits autoris√©s")
            return segments
        
        # Analyser les segments entre p√©ages ferm√©s
        optimized_segments = []
        
        for segment in segments:
            # V√©rifier si c'est un segment gratuit entre deux p√©ages ferm√©s
            if self._is_free_segment_between_closed_tolls(segment, closed_tolls):
                print(f"   üö´ Segment gratuit supprim√© (entre p√©ages ferm√©s)")
                continue
            
            optimized_segments.append(segment)
        
        print(f"‚úÖ {len(optimized_segments)} segments apr√®s logique gratuits")
        return optimized_segments
    
    def _is_free_segment_between_closed_tolls(self, segment: Dict, closed_tolls: List[MatchedToll]) -> bool:
        """
        V√©rifie si un segment gratuit est entre deux p√©ages ferm√©s.
        
        Args:
            segment: Segment √† v√©rifier
            closed_tolls: Liste des p√©ages ferm√©s
            
        Returns:
            bool: True si le segment est entre deux p√©ages ferm√©s
        """
        # Logique simplifi√©e : v√©rifier si le segment est marqu√© comme gratuit
        # et s'il y a des p√©ages ferm√©s avant et apr√®s
        
        if segment.get('segment_type') != 'free':
            return False
        
        # Cette logique pourrait √™tre affin√©e selon la structure exacte des segments
        # Pour l'instant, on consid√®re que s'il y a plus de 2 p√©ages ferm√©s,
        # les segments gratuits interm√©diaires doivent √™tre √©vit√©s
        
        return len(closed_tolls) >= 2
    
    def _calculate_segments_routes(self, segments: List[Dict]) -> List[Dict]:
        """
        Calcule les routes pour chaque segment optimis√©.
        
        Args:
            segments: Segments √† calculer
            
        Returns:
            List[Dict]: Segments avec routes calcul√©es
        """
        print("üõ£Ô∏è Calcul des routes par segment...")
        
        calculated_segments = []
        
        for i, segment in enumerate(segments):
            print(f"   Segment {i+1}/{len(segments)}...")
            
            # Calculer la route pour ce segment
            route_result = self.route_calculator.calculate_segment_route(segment)
            
            if route_result:
                calculated_segments.append(route_result)
                print(f"   ‚úÖ Segment {i+1} calcul√©")
            else:
                print(f"   ‚ùå √âchec segment {i+1}")
                return None  # √âchec global si un segment √©choue
        
        print(f"‚úÖ {len(calculated_segments)} segments calcul√©s")
        return calculated_segments
    
    def _assemble_optimized_route(self, calculated_segments: List[Dict]) -> Optional[Dict]:
        """
        Assemble la route finale √† partir des segments calcul√©s.
        
        Args:
            calculated_segments: Segments avec routes calcul√©es
            
        Returns:
            Dict: Route finale assembl√©e
        """
        print("üîß Assemblage final optimis√©...")
        
        # Utiliser l'assembleur existant
        final_route = self.route_assembler.assemble_segments(calculated_segments)
        
        if final_route:
            print("‚úÖ Assemblage r√©ussi")
            return final_route
        else:
            print("‚ùå √âchec assemblage")
            return None
    
    def _calculate_distance(self, point1: List[float], point2: List[float]) -> float:
        """
        Calcule la distance entre deux points en km.
        
        Args:
            point1: [lon, lat]
            point2: [lon, lat]
            
        Returns:
            float: Distance en kilom√®tres
        """
        import math
        
        lon1, lat1 = math.radians(point1[0]), math.radians(point1[1])
        lon2, lat2 = math.radians(point2[0]), math.radians(point2[1])
        
        dlat = lat2 - lat1
        dlon = lon2 - lon1
        
        a = math.sin(dlat/2)**2 + math.cos(lat1) * math.cos(lat2) * math.sin(dlon/2)**2
        c = 2 * math.asin(math.sqrt(a))
        
        return 6371 * c  # Rayon de la Terre en km
