"""
toll_deduplicator.py
-------------------

Module pour la d√©duplication des p√©ages d√©tect√©s.
Responsable d'√©liminer les doublons et de garder les p√©ages les plus proches de la route.
"""

from typing import List
from .toll_matcher import MatchedToll
from .intelligent_segmentation_helpers import RouteUtils


class TollDeduplicator:
    """
    Classe responsable de la d√©duplication des p√©ages.
    √âlimine les doublons et garde les p√©ages les plus proches de la route.
    """
    
    @staticmethod
    def deduplicate_tolls_by_proximity(
        matched_tolls: List[MatchedToll], 
        route_coords: List[List[float]]
    ) -> List[MatchedToll]:
        """
        D√©duplique les p√©ages en gardant le plus proche de la route pour chaque nom.
        
        Args:
            matched_tolls: Liste des p√©ages match√©s
            route_coords: Coordonn√©es de la route de base
            
        Returns:
            List[MatchedToll]: P√©ages d√©dupliqu√©s
        """
        if not matched_tolls:
            return []
        
        print(f"üîó D√©duplication de {len(matched_tolls)} p√©ages par proximit√© √† la route...")
        
        # Regrouper les p√©ages par nom effectif
        toll_groups = {}
        for toll in matched_tolls:
            name = toll.effective_name.strip().lower()
            if name not in toll_groups:
                toll_groups[name] = []
            toll_groups[name].append(toll)
        
        deduplicated_tolls = []
        
        # Pour chaque groupe, garder le p√©age le plus proche de la route
        for name, group in toll_groups.items():
            if len(group) == 1:
                # Un seul p√©age, le garder
                deduplicated_tolls.append(group[0])
                print(f"   ‚úÖ {name} : 1 p√©age gard√©")
            else:
                # Plusieurs p√©ages, garder le plus proche de la route
                closest_toll = TollDeduplicator._find_closest_toll_to_route(group, route_coords)
                deduplicated_tolls.append(closest_toll)
                print(f"   ‚úÖ {name} : {len(group)} p√©ages ‚Üí 1 gard√© (le plus proche)")
        
        print(f"üéØ P√©ages uniques trouv√©s sur la route : {len(deduplicated_tolls)}")
        return deduplicated_tolls
    
    @staticmethod
    def _find_closest_toll_to_route(
        toll_group: List[MatchedToll], 
        route_coords: List[List[float]]
    ) -> MatchedToll:
        """
        Trouve le p√©age le plus proche de la route parmi un groupe.
        Utilise la distance point-√†-polyline ET v√©rifie la correspondance avec les points de la route.
        
        Args:
            toll_group: Groupe de p√©ages du m√™me nom
            route_coords: Coordonn√©es de la route
            
        Returns:
            MatchedToll: P√©age le plus proche et correspondant au trajet
        """
        from .polyline_intersection import point_to_polyline_distance
        
        print(f"   üîç D√©duplication de {len(toll_group)} p√©ages du m√™me nom:")
        
        # Premi√®re passe : trouver le p√©age qui correspond exactement √† un point de la route
        for toll in toll_group:
            toll_lon, toll_lat = toll.osm_coordinates[0], toll.osm_coordinates[1]
            print(f"      üß™ Test p√©age √† [{toll_lon:.7f}, {toll_lat:.7f}]")
            
            # V√©rifier si ce point correspond exactement (¬±1m) √† un point de la route
            for i, route_point in enumerate(route_coords):
                route_lon, route_lat = route_point[0], route_point[1]
                
                # Calculer la distance en m√®tres
                distance_m = TollDeduplicator._calculate_distance_meters([toll_lat, toll_lon], [route_lat, route_lon])
                
                if distance_m <= 1.0:  # Tol√©rance de 1m pour correspondance exacte
                    print(f"         ‚úÖ Correspondance exacte trouv√©e avec point route {i} (distance: {distance_m:.1f}m)")
                    return toll
        
        print(f"      ‚ö†Ô∏è Aucune correspondance exacte trouv√©e, utilisation de la distance minimale")
        
        # Deuxi√®me passe : utiliser la distance minimale comme avant
        closest_toll = None
        min_distance = float('inf')
        for toll in toll_group:
            # Utiliser la distance point-√†-polyline (plus pr√©cise)
            toll_coords = [toll.osm_coordinates[1], toll.osm_coordinates[0]]  # [lat, lon]
            distance_result = point_to_polyline_distance(toll_coords, route_coords)
            distance_km = distance_result[0]  # Distance en km
            
            print(f"      üìè P√©age √† [{toll.osm_coordinates[0]:.7f}, {toll.osm_coordinates[1]:.7f}] : {distance_km*1000:.1f}m")
            
            if distance_km < min_distance:
                min_distance = distance_km
                closest_toll = toll
        
        print(f"      ‚úÖ P√©age s√©lectionn√© : [{closest_toll.osm_coordinates[0]:.7f}, {closest_toll.osm_coordinates[1]:.7f}] ({min_distance*1000:.1f}m)")
        return closest_toll
    
    @staticmethod
    def _calculate_distance_meters(coord1: List[float], coord2: List[float]) -> float:
        """
        Calcule la distance entre deux points en m√®tres.
        
        Args:
            coord1: Premier point [lat, lon]
            coord2: Deuxi√®me point [lat, lon]
            
        Returns:
            float: Distance en m√®tres
        """
        import math
        
        lat1, lon1 = math.radians(coord1[0]), math.radians(coord1[1])
        lat2, lon2 = math.radians(coord2[0]), math.radians(coord2[1])
        
        dlat = lat2 - lat1
        dlon = lon2 - lon1
        
        a = math.sin(dlat/2)**2 + math.cos(lat1) * math.cos(lat2) * math.sin(dlon/2)**2
        c = 2 * math.asin(math.sqrt(a))
        
        return 6371000.0 * c  # Rayon de la Terre en m√®tres
    
    @staticmethod
    def _calculate_distance(coord1: List[float], coord2: List[float]) -> float:
        """
        Calcule la distance entre deux points (formule haversine simplifi√©e).
        
        Args:
            coord1: Premier point [lat, lon]
            coord2: Deuxi√®me point [lon, lat] (format OSM)
            
        Returns:
            float: Distance en kilom√®tres
        """
        import math
        
        lat1, lon1 = math.radians(coord2[1]), math.radians(coord2[0])  # coord2 car osm_coordinates est [lon, lat]
        lat2, lon2 = math.radians(coord1[1]), math.radians(coord1[0])  # coord1 est [lat, lon]
        
        dlat = lat2 - lat1
        dlon = lon2 - lon1
        
        a = math.sin(dlat/2)**2 + math.cos(lat1) * math.cos(lat2) * math.sin(dlon/2)**2
        c = 2 * math.asin(math.sqrt(a))
        
        return 6371.0 * c  # Rayon de la Terre en km
    
    @staticmethod
    def sort_tolls_by_route_position(
        tolls: List[MatchedToll], 
        route_coords: List[List[float]]
    ) -> List[MatchedToll]:
        """
        Ordonne les p√©ages selon leur position sur la route (du d√©but vers la fin).
        
        Args:
            tolls: Liste des p√©ages √† ordonner
            route_coords: Coordonn√©es de la route de base
            
        Returns:
            List[MatchedToll]: P√©ages ordonn√©s selon leur position sur la route
        """
        if not tolls or not route_coords:
            return tolls
        
        print(f"üìç Ordonnancement de {len(tolls)} p√©ages selon leur position sur la route...")
        
        # Calculer la position de chaque p√©age sur la route
        toll_positions = []
        for toll in tolls:
            position = TollDeduplicator._find_toll_position_on_route(toll, route_coords)
            toll_positions.append((toll, position))
            print(f"   üìç {toll.effective_name} : position {position:.1f} km")
        
        # Trier par position croissante
        toll_positions.sort(key=lambda x: x[1])
        sorted_tolls = [toll for toll, position in toll_positions]
        
        print(f"‚úÖ P√©ages ordonn√©s : {[toll.effective_name for toll in sorted_tolls]}")
        return sorted_tolls
    
    @staticmethod
    def _find_toll_position_on_route(
        toll: MatchedToll, 
        route_coords: List[List[float]]
    ) -> float:
        """
        Trouve la position d'un p√©age sur la route (distance depuis le d√©but).
        Approche simplifi√©e bas√©e sur la latitude pour l'ordonnancement nord-sud.
        
        Args:
            toll: P√©age √† positionner
            route_coords: Coordonn√©es de la route
            
        Returns:
            float: Position approximative bas√©e sur la latitude
        """
        if not route_coords:
            return 0.0
        
        # Pour une route nord-sud, utiliser la latitude comme indicateur de position
        # Plus la latitude est √©lev√©e, plus on est au nord (d√©but de route)
        toll_lat = toll.osm_coordinates[1]  # osm_coordinates = [lon, lat]
        
        # Normaliser par rapport aux latitudes de d√©but et fin de route
        start_lat = route_coords[0][1]   # [lon, lat]
        end_lat = route_coords[-1][1]    # [lon, lat]
        
        if start_lat == end_lat:
            return 0.0
        
        # Calculer la position relative (0 = d√©but, 1 = fin)
        position_ratio = (start_lat - toll_lat) / (start_lat - end_lat)
        
        # Calculer la distance totale de la route
        total_distance = 0
        for i in range(1, len(route_coords)):
            dist = TollDeduplicator._calculate_distance(
                [route_coords[i-1][1], route_coords[i-1][0]],
                [route_coords[i][1], route_coords[i][0]]
            )
            total_distance += dist
        
        # Position estim√©e le long de la route
        return total_distance * max(0, min(1, position_ratio))
