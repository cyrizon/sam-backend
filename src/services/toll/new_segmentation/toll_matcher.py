"""
toll_matcher.py
--------------

Module pour matcher les p√©ages OSM (GeoJSON) avec les p√©ages CSV pour r√©cup√©rer les co√ªts.
Utilise la proximit√© g√©ographique pour associer les p√©ages.

Responsabilit√© : 
- Associer les p√©ages OSM avec les donn√©es de co√ªt des CSV
- Identifier les p√©ages √† syst√®me ouvert (1 p√©age = 1 paiement)
- Fournir les informations de co√ªt pour l'optimisation
"""

from typing import List, Dict, Optional, Tuple
from dataclasses import dataclass
import math
from pathlib import Path

# Importation du toll_locator existant pour utiliser le cache des barri√®res
from src.services.toll_locator import _get_barriers_from_cache
from pyproj import Transformer


@dataclass
class MatchedToll:
    """
    P√©age match√© avec ses donn√©es OSM et CSV.
    """
    # Donn√©es OSM
    osm_id: str
    osm_name: Optional[str]
    osm_coordinates: List[float]  # [lon, lat] WGS84
    
    # Donn√©es CSV match√©es
    csv_id: Optional[str]
    csv_name: Optional[str]
    csv_role: Optional[str]  # 'O' pour ouvert, 'F' pour ferm√©
    csv_coordinates: Optional[List[float]]  # [lon, lat] WGS84
    
    # M√©tadonn√©es du matching
    distance_m: float  # Distance entre OSM et CSV en m√®tres
    confidence: float  # Confiance du matching (0-1)
    
    @property
    def is_open_system(self) -> bool:
        """Retourne True si c'est un p√©age √† syst√®me ouvert."""
        return self.csv_role == 'O'
    
    @property
    def effective_name(self) -> str:
        """Retourne le nom le plus pertinent."""
        return self.csv_name or self.osm_name or f"P√©age {self.osm_id}"


class TollMatcher:
    """
    Classe pour matcher les p√©ages OSM avec les donn√©es CSV.
    """
    
    def __init__(self):
        """Initialise le matcher avec les donn√©es de barri√®res cach√©es."""
        self.barriers_df = None
        self.spatial_index = None
        self._load_barriers_from_cache()
    
    def _load_barriers_from_cache(self):
        """Charge les donn√©es de barri√®res depuis le cache global."""
        try:
            self.barriers_df, self.spatial_index = _get_barriers_from_cache()
            print(f"üìä Barri√®res charg√©es : {len(self.barriers_df)} p√©ages disponibles")
        except Exception as e:
            print(f"‚ùå Erreur chargement barri√®res : {e}")
            self.barriers_df = None
            self.spatial_index = None
    
    def match_osm_tolls_with_csv(
        self, 
        osm_tolls: List[Dict], 
        max_distance_km: float = 5.0
    ) -> List[MatchedToll]:
        """
        Matche les p√©ages OSM avec les donn√©es CSV par proximit√© g√©ographique.
        
        Args:
            osm_tolls: Liste des p√©ages OSM avec format 
                      [{"id": "way/123", "name": "...", "coordinates": [lon, lat]}]
            max_distance_km: Distance maximale pour consid√©rer un match
            
        Returns:
            List[MatchedToll]: P√©ages match√©s avec leurs donn√©es combin√©es
        """
        if self.barriers_df is None:
            print("‚ùå Donn√©es de barri√®res non disponibles")
            return []
        
        matched_tolls = []
        
        # Transformer pour calculs de distance
        wgs_to_3857 = Transformer.from_crs("EPSG:4326", "EPSG:3857", always_xy=True)
        
        print(f"üîó Matching de {len(osm_tolls)} p√©ages OSM avec les donn√©es CSV...")
        
        for osm_toll in osm_tolls:
            osm_coords = osm_toll.get('coordinates', [])
            if not osm_coords or len(osm_coords) != 2:
                continue
            
            # Convertir les coordonn√©es OSM en Web Mercator
            osm_x, osm_y = wgs_to_3857.transform(osm_coords[0], osm_coords[1])
            
            # Chercher le p√©age CSV le plus proche
            best_match = None
            min_distance = float('inf')
            
            for idx, row in self.barriers_df.iterrows():
                # Calculer la distance en m√®tres (d√©j√† en Web Mercator)
                csv_geom = row['_geom3857']
                distance_m = math.sqrt((osm_x - csv_geom.x)**2 + (osm_y - csv_geom.y)**2)
                
                if distance_m < min_distance and distance_m <= (max_distance_km * 1000):
                    min_distance = distance_m
                    best_match = row
            
            # Cr√©er le p√©age match√©
            if best_match is not None:
                # Convertir les coordonn√©es CSV vers WGS84
                to_wgs84 = Transformer.from_crs("EPSG:3857", "EPSG:4326", always_xy=True)
                csv_lon, csv_lat = to_wgs84.transform(best_match['_geom3857'].x, best_match['_geom3857'].y)
                
                # Calculer la confiance (1.0 = distance 0, 0.0 = distance max)
                confidence = max(0.0, 1.0 - (min_distance / (max_distance_km * 1000)))
                
                matched_toll = MatchedToll(
                    osm_id=osm_toll.get('id', ''),
                    osm_name=osm_toll.get('name'),
                    osm_coordinates=osm_coords,
                    csv_id=best_match['id'],
                    csv_name=best_match.get('name', ''),
                    csv_role=best_match.get('role', ''),
                    csv_coordinates=[csv_lon, csv_lat],
                    distance_m=min_distance,
                    confidence=confidence
                )
                
                matched_tolls.append(matched_toll)
                
                print(f"   ‚úÖ {osm_toll.get('name', 'P√©age')} ‚Üí {best_match.get('name', '')} "
                      f"({min_distance:.0f}m, {best_match.get('role', '')}-syst√®me)")
            else:
                # P√©age OSM sans √©quivalent CSV
                unmatched_toll = MatchedToll(
                    osm_id=osm_toll.get('id', ''),
                    osm_name=osm_toll.get('name'),
                    osm_coordinates=osm_coords,
                    csv_id=None,
                    csv_name=None,
                    csv_role=None,
                    csv_coordinates=None,
                    distance_m=float('inf'),
                    confidence=0.0
                )
                
                matched_tolls.append(unmatched_toll)
                print(f"   ‚ö†Ô∏è {osm_toll.get('name', 'P√©age')} ‚Üí Aucun √©quivalent CSV trouv√©")
        
        return matched_tolls
    
    def filter_open_system_tolls(self, matched_tolls: List[MatchedToll]) -> List[MatchedToll]:
        """
        Filtre les p√©ages √† syst√®me ouvert (1 p√©age = 1 paiement).
        
        Args:
            matched_tolls: Liste des p√©ages match√©s
            
        Returns:
            List[MatchedToll]: Seulement les p√©ages √† syst√®me ouvert
        """
        open_tolls = [toll for toll in matched_tolls if toll.is_open_system]
        
        print(f"üéØ P√©ages √† syst√®me ouvert : {len(open_tolls)}/{len(matched_tolls)}")
        for toll in open_tolls:
            print(f"   üü¢ {toll.effective_name} ({toll.csv_id})")
        
        return open_tolls
    
    def get_toll_costs(self, matched_toll: MatchedToll, vehicle_class: str = 'c1') -> Optional[Dict]:
        """
        R√©cup√®re les co√ªts d'un p√©age √† partir des donn√©es CSV.
        
        Args:
            matched_toll: P√©age match√©
            vehicle_class: Classe de v√©hicule (c1, c2, c3, c4, c5)
            
        Returns:
            Dict: Informations de co√ªt ou None si pas disponible
        """
        if not matched_toll.csv_id:
            return None
        
        # TODO: Impl√©menter la r√©cup√©ration des co√ªts depuis virtual_edges.csv
        # Pour l'instant, retourner des donn√©es simul√©es
        return {
            'toll_id': matched_toll.csv_id,
            'vehicle_class': vehicle_class,
            'cost_estimate': 5.50,  # Co√ªt simul√©
            'currency': 'EUR'
        }
    
    def deduplicate_tolls(self, matched_tolls: List[MatchedToll], max_distance_m: float = 100) -> List[MatchedToll]:
        """
        √âlimine les doublons de p√©ages bas√©s sur leur nom CSV et leur proximit√©.
        
        Args:
            matched_tolls: Liste des p√©ages match√©s
            max_distance_m: Distance maximale en m√®tres pour consid√©rer 2 p√©ages comme identiques
            
        Returns:
            List[MatchedToll]: Liste d√©dupliqu√©e
        """
        if not matched_tolls:
            return matched_tolls
        
        print(f"üîÑ D√©duplication de {len(matched_tolls)} p√©ages...")
        
        # Regrouper par nom CSV (p√©ages identiques)
        toll_groups = {}
        unmatched_osm = []  # P√©ages OSM sans match CSV
        
        for toll in matched_tolls:
            if toll.csv_name and toll.csv_id:
                # Cl√© bas√©e sur le nom CSV et l'ID
                key = f"{toll.csv_name}_{toll.csv_id}"
                if key not in toll_groups:
                    toll_groups[key] = []
                toll_groups[key].append(toll)
            else:
                # P√©ages OSM sans √©quivalent CSV
                unmatched_osm.append(toll)
        
        # Pour chaque groupe, garder le meilleur match (distance la plus faible)
        deduplicated = []
        
        for group_name, group_tolls in toll_groups.items():
            if len(group_tolls) == 1:
                # Pas de doublon
                deduplicated.append(group_tolls[0])
                print(f"   ‚úÖ {group_tolls[0].effective_name} (unique)")
            else:
                # Plusieurs p√©ages OSM matchent le m√™me p√©age CSV
                # Garder celui avec la plus petite distance
                best_toll = min(group_tolls, key=lambda t: t.distance_m)
                deduplicated.append(best_toll)
                print(f"   üîÑ {best_toll.effective_name} (s√©lectionn√© parmi {len(group_tolls)} doublons)")
                
                # Afficher les doublons √©limin√©s
                for toll in group_tolls:
                    if toll != best_toll:
                        print(f"      ‚ùå √âlimin√©: {toll.osm_name} (distance: {toll.distance_m:.0f}m)")
        
        # Ajouter les p√©ages OSM non match√©s (si on veut les garder)
        # deduplicated.extend(unmatched_osm)
        
        print(f"‚úÖ D√©duplication termin√©e : {len(matched_tolls)} ‚Üí {len(deduplicated)} p√©ages")
        return deduplicated
    
    def deduplicate_tolls_by_proximity(self, matched_tolls: List[MatchedToll], route_coords: List[List[float]]) -> List[MatchedToll]:
        """
        Regroupe les p√©ages par nom effectif et garde seulement celui le plus proche de la route.
        √âlimine les doublons caus√©s par les deux portes d'un m√™me p√©age.
        
        Args:
            matched_tolls: Liste des p√©ages match√©s
            route_coords: Coordonn√©es de la route de base
            
        Returns:
            List[MatchedToll]: P√©ages d√©dupliqu√©s
        """
        if not matched_tolls or not route_coords:
            return matched_tolls
        
        print(f"üîß D√©duplication de {len(matched_tolls)} p√©ages par proximit√©...")
        
        # Regrouper par nom effectif
        toll_groups = {}
        for toll in matched_tolls:
            name = toll.effective_name
            if name not in toll_groups:
                toll_groups[name] = []
            toll_groups[name].append(toll)
        
        deduplicated = []
        for name, group in toll_groups.items():
            if len(group) == 1:
                # Un seul p√©age avec ce nom, le garder
                deduplicated.append(group[0])
                print(f"   üìç {name} : 1 p√©age conserv√©")
            else:
                # Plusieurs p√©ages avec le m√™me nom, garder le plus proche de la route
                best_toll = None
                best_toll = group[0]  # Par d√©faut, prendre le premier
                
                if best_toll:
                    deduplicated.append(best_toll)
                    print(f"   üìç {name} : {len(group)} p√©ages ‚Üí 1 conserv√©")
        
        print(f"‚úÖ {len(matched_tolls)} ‚Üí {len(deduplicated)} p√©ages apr√®s d√©duplication")
        return deduplicated

def convert_osm_tolls_to_matched_format(osm_toll_stations: List) -> List[Dict]:
    """
    Convertit les TollStation OSM au format attendu par le matcher.
    
    Args:
        osm_toll_stations: Liste de TollStation du parseur OSM
        
    Returns:
        List[Dict]: Format compatible avec le matcher
    """
    converted = []
    
    for toll in osm_toll_stations:
        converted.append({
            'id': toll.feature_id,
            'name': toll.name,
            'coordinates': toll.coordinates  # [lon, lat]
        })
    
    return converted
