"""
intelligent_segmentation_helpers.py
----------------------------------

Classes d'aide pour la segmentation intelligente.
G√®re les cas sp√©ciaux et les utilitaires pour √©viter que le fichier principal d√©passe 350 lignes.
"""

from typing import List, Dict, Optional


class SegmentationSpecialCases:
    """
    G√®re les cas sp√©ciaux de la segmentation intelligente.
    """
    
    def __init__(self, ors_service):
        """
        Initialise avec le service ORS.
        
        Args:
            ors_service: Service ORS pour les calculs de routes
        """
        self.ors = ors_service
    
    def get_toll_free_route(self, coordinates: List[List[float]]) -> Optional[Dict]:
        """
        Cas sp√©cial : Obtient une route sans p√©ages (√©vitement total des p√©ages).
        Reproduit la logique de la strat√©gie simple pour le cas 0 p√©age.
        
        Args:
            coordinates: [d√©part, arriv√©e]
              Returns:
            dict: Route sans p√©ages ou None si √©chec
        """
        try:
            print("üö´ R√©cup√©ration de la route sans p√©ages...")
            
            # Utiliser la m√©thode sp√©cifique ORS pour √©viter les p√©ages
            toll_free_route = self.ors.get_route_avoid_tollways(coordinates)
            
            if toll_free_route:
                print("‚úÖ Route sans p√©ages trouv√©e avec get_route_avoid_tollways")
                return {
                    'route': toll_free_route,
                    'status': 'no_toll_success',
                    'target_tolls': 0,
                    'strategy': 'toll_free_direct',
                    'distance': RouteUtils.extract_distance(toll_free_route),
                    'duration': RouteUtils.extract_duration(toll_free_route)
                }
            else:
                print("‚ùå Impossible de trouver une route sans p√©ages")
                return None
                
        except Exception as e:
            print(f"‚ùå Erreur lors de la r√©cup√©ration de la route sans p√©ages : {e}")
            return None
    
    def format_base_route_as_result(self, base_route: Dict) -> Dict:
        """
        Cas sp√©cial : Formate la route de base comme r√©sultat final.
        Utilis√© quand l'utilisateur demande plus de p√©ages qu'il n'y en a sur la route.
        
        Args:
            base_route: Route de base ORS
            
        Returns:
            dict: Route de base format√©e
        """
        print("üîÑ Formatage de la route de base comme r√©sultat final")
        
        return {
            'route': base_route,
            'status': 'base_route_fallback',
            'target_tolls': None,  # Pas respect√©, on retourne la route principale
            'strategy': 'base_route_return',
            'distance': RouteUtils.extract_distance(base_route),
            'duration': RouteUtils.extract_duration(base_route),
            'note': 'Plus de p√©ages demand√©s que disponibles, route principale retourn√©e'
        }


class RouteUtils:
    """
    Utilitaires pour l'extraction de donn√©es des routes.
    """
    
    @staticmethod
    def extract_distance(route: Dict) -> float:
        """Extrait la distance d'une route ORS."""
        try:
            return route['features'][0]['properties']['summary']['distance']
        except (KeyError, IndexError):
            return 0.0
    
    @staticmethod
    def extract_duration(route: Dict) -> float:
        """Extrait la dur√©e d'une route ORS."""
        try:
            return route['features'][0]['properties']['summary']['duration']
        except (KeyError, IndexError):
            return 0.0
    
    @staticmethod
    def extract_route_coordinates(route: Dict) -> List[List[float]]:
        """Extrait les coordonn√©es de la route."""
        try:
            return route['features'][0]['geometry']['coordinates']
        except (KeyError, IndexError):
            return []


class RouteAssembler:
    """
    G√®re l'assemblage des routes segment√©es.
    """
    
    @staticmethod
    def assemble_final_route(segment1: Dict, segment2: Dict, target_tolls: int) -> Dict:
        """
        √âtape 8-9 : Assemble la route finale √† partir des deux segments.
        
        Args:
            segment1: Premier segment (avec p√©ages)
            segment2: Deuxi√®me segment (sans p√©ages)  
            target_tolls: Nombre de p√©ages cibl√©
            
        Returns:
            dict: Route finale assembl√©e
        """
        print("üîß √âtapes 8-9 : Assemblage de la route finale...")
        
        # Extraire les coordonn√©es des deux segments
        coords1 = RouteUtils.extract_route_coordinates(segment1)
        coords2 = RouteUtils.extract_route_coordinates(segment2)
        
        if not coords1 or not coords2:
            print("‚ùå Impossible d'extraire les coordonn√©es des segments")
            return None
        
        # Fusionner en √©vitant la duplication du point de jonction
        final_coords = coords1 + coords2[1:]  # Enlever le premier point du segment 2
        
        # Calculer les m√©triques totales
        distance1 = RouteUtils.extract_distance(segment1)
        distance2 = RouteUtils.extract_distance(segment2)
        duration1 = RouteUtils.extract_duration(segment1)
        duration2 = RouteUtils.extract_duration(segment2)
        
        # Cr√©er la route finale au format GeoJSON
        final_route = {
            "type": "FeatureCollection",
            "features": [{
                "type": "Feature",
                "geometry": {
                    "type": "LineString",
                    "coordinates": final_coords
                },
                "properties": {
                    "summary": {
                        "distance": distance1 + distance2,
                        "duration": duration1 + duration2
                    },
                    "segments": [
                        segment1['features'][0]['properties'],
                        segment2['features'][0]['properties']
                    ]
                }
            }]
        }
        
        print(f"‚úÖ Route assembl√©e : {(distance1 + distance2)/1000:.1f} km, {(duration1 + duration2)/60:.0f} min")
        
        return {
            'route': final_route,
            'status': 'intelligent_segmentation_success',
            'target_tolls': target_tolls,
            'strategy': 'intelligent_segmentation',
            'segments': {
                'segment1': segment1,
                'segment2': segment2
            },
            'distance': distance1 + distance2,
            'duration': duration1 + duration2
        }
