"""
junction_filter.py
------------------

Module pour filtrer les junctions selon leur position par rapport aux p√©ages.
"""

from typing import List, Dict
from ..toll_matcher import MatchedToll
from .geographic_utils import find_route_position


class JunctionFilter:
    """
    Classe pour filtrer les junctions selon diff√©rents crit√®res de position.
    """
    
    def filter_junctions_before_toll(
        self, 
        junctions: List[Dict], 
        toll_position_km: float,
        route_coords: List[List[float]]
    ) -> List[Dict]:
        """
        Filtre les junctions qui sont AVANT le p√©age cible.
        
        Args:
            junctions: Junctions ordonn√©es
            toll_position_km: Position du p√©age en km
            route_coords: Coordonn√©es de la route
            
        Returns:
            List[Dict]: Junctions avant le p√©age (ordonn√©es de la plus proche √† la plus lointaine du p√©age)
        """
        junctions_before = []
        
        for junction in junctions:
            if junction['position_on_route_km'] < toll_position_km:
                junctions_before.append(junction)
        
        # Trier par position d√©croissante (plus proche du p√©age en premier)
        junctions_before.sort(key=lambda j: j['position_on_route_km'], reverse=True)
        
        print(f"üìç {len(junctions_before)} junctions trouv√©es avant le p√©age cible")
        return junctions_before
    
    def filter_junctions_between_tolls(
        self, 
        junctions: List[Dict], 
        start_toll_position_km: float,
        end_toll_position_km: float,
        route_coords: List[List[float]]
    ) -> List[Dict]:
        """
        Filtre les junctions qui sont ENTRE deux p√©ages.
        
        Args:
            junctions: Junctions ordonn√©es
            start_toll_position_km: Position du p√©age de d√©but (utilis√©)
            end_toll_position_km: Position du p√©age de fin (√† √©viter)
            route_coords: Coordonn√©es de la route
            
        Returns:
            List[Dict]: Junctions entre les deux p√©ages (ordonn√©es de la plus proche du d√©but)
        """
        junctions_between = []
        
        for junction in junctions:
            position = junction['position_on_route_km']
            if start_toll_position_km < position < end_toll_position_km:
                junctions_between.append(junction)
        
        # Trier par position d√©croissante (plus proche du p√©age de destination en premier)
        junctions_between.sort(key=lambda j: j['position_on_route_km'], reverse=True)
        
        print(f"üìç {len(junctions_between)} junctions trouv√©es entre les p√©ages ({start_toll_position_km:.1f} km - {end_toll_position_km:.1f} km)")
        return junctions_between
    
    def filter_junctions_after_toll(
        self, 
        junctions: List[Dict], 
        toll_position_km: float,
        route_coords: List[List[float]]
    ) -> List[Dict]:
        """
        Filtre les junctions qui sont APR√àS le p√©age.
        
        Args:
            junctions: Junctions ordonn√©es
            toll_position_km: Position du p√©age en km
            route_coords: Coordonn√©es de la route
            
        Returns:
            List[Dict]: Junctions apr√®s le p√©age (ordonn√©es par position croissante)
        """
        junctions_after = []
        
        for junction in junctions:
            if junction['position_on_route_km'] > toll_position_km:
                junctions_after.append(junction)
        
        # Trier par position croissante (plus proche du p√©age en premier)
        junctions_after.sort(key=lambda j: j['position_on_route_km'])
        
        print(f"üìç {len(junctions_after)} junctions trouv√©es apr√®s le p√©age ({toll_position_km:.1f} km)")
        return junctions_after

    def find_toll_position_on_route(self, toll: MatchedToll, route_coords: List[List[float]]) -> float:
        """
        Trouve la position d'un p√©age sur la route.
        
        Args:
            toll: P√©age √† localiser
            route_coords: Coordonn√©es de la route
            
        Returns:
            float: Position en kilom√®tres depuis le d√©but de la route
        """
        toll_coords = toll.osm_coordinates
        return find_route_position(toll_coords, route_coords)
