"""
Toll Selector
=============

S√©lection des p√©ages selon diff√©rents crit√®res (budget, nombre max).
√âTAPE 5 de l'algorithme d'optimisation.
"""

from typing import List, Dict, Optional


class TollSelector:
    """
    S√©lecteur de p√©ages optimis√©.
    Responsabilit√© : √âTAPE 5 de l'algorithme d'optimisation.
    """
    
    def __init__(self):
        """Initialise le s√©lecteur de p√©ages."""
        pass
    
    def select_tolls_by_count(
        self, 
        tolls_on_route: List, 
        target_count: int,
        identification_result: Dict
    ) -> Dict:
        """
        √âTAPE 5a: S√©lection par nombre maximum de p√©ages.
        
        Args:
            tolls_on_route: P√©ages disponibles sur la route
            target_count: Nombre de p√©ages souhait√©
            identification_result: R√©sultat complet de l'identification
            
        Returns:
            P√©ages s√©lectionn√©s avec m√©tadonn√©es
        """
        print(f"üéØ √âtape 5a: S√©lection par nombre ({target_count} p√©ages)...")
        
        # TODO: Impl√©menter la logique de s√©lection par nombre
        # - Prioriser selon les r√®gles m√©tier
        # - Respecter les contraintes syst√®me ouvert/ferm√©
        # - Optimiser la r√©partition g√©ographique
        
        print("‚ö†Ô∏è S√©lection par nombre: √Ä IMPL√âMENTER")
        
        return {
            'selected_tolls': tolls_on_route[:target_count] if tolls_on_route else [],
            'selection_method': 'count_based',
            'target_count': target_count,
            'achieved_count': min(len(tolls_on_route), target_count),
            'selection_valid': True
        }
    
    def select_tolls_by_budget(
        self, 
        tolls_on_route: List, 
        target_budget: float,
        identification_result: Dict
    ) -> Dict:
        """
        √âTAPE 5b: S√©lection par budget maximum.
        
        Args:
            tolls_on_route: P√©ages disponibles sur la route
            target_budget: Budget maximum en euros
            identification_result: R√©sultat complet de l'identification
            
        Returns:
            P√©ages s√©lectionn√©s avec m√©tadonn√©es
        """
        print(f"üí∞ √âtape 5b: S√©lection par budget ({target_budget}‚Ç¨)...")
        
        # TODO: Impl√©menter la logique de s√©lection par budget
        # - Calculer les co√ªts de chaque p√©age
        # - Optimiser le rapport qualit√©/prix
        # - Respecter le budget maximum
        
        print("‚ö†Ô∏è S√©lection par budget: √Ä IMPL√âMENTER")
        
        return {
            'selected_tolls': [],
            'selection_method': 'budget_based',
            'target_budget': target_budget,
            'achieved_budget': 0.0,
            'selection_valid': False
        }
