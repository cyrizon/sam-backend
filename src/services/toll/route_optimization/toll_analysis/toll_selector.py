"""
Toll Selector
=============

Orchestrateur principal pour la s√©lection des p√©ages selon diff√©rents crit√®res.
√âTAPE 5 de l'algorithme d'optimisation.
"""

from typing import List, Dict
from .removal import TollRemovalManager
from .optimization import TollOptimizer
from .utils import SingleTollSelector, SelectionResultBuilder


class TollSelector:
    """
    S√©lecteur de p√©ages optimis√© et modulaire.
    Responsabilit√© : √âTAPE 5 de l'algorithme d'optimisation.
    """
    
    def __init__(self):
        """Initialise le s√©lecteur de p√©ages."""
        pass
    
    def select_tolls_by_count(
        self, 
        tolls_on_route: List, 
        target_count: int,
        identification_result: Dict
    ) -> Dict:
        """
        √âTAPE 5a: S√©lection par nombre maximum de p√©ages.
        
        Nouvelle logique correcte :
        1. Phase suppression : supprimer tous les p√©ages n√©cessaires
        2. Phase analyse : v√©rifier si des p√©ages ferm√©s ont √©t√© supprim√©s 
        3. Phase optimisation : si oui, optimiser le prochain p√©age ferm√© restant
        
        Args:
            tolls_on_route: P√©ages disponibles sur la route
            target_count: Nombre de p√©ages souhait√©
            identification_result: R√©sultat complet de l'identification
            
        Returns:
            P√©ages s√©lectionn√©s avec m√©tadonn√©es
        """
        print(f"üéØ √âtape 5a: S√©lection par nombre ({target_count} p√©ages)...")
        
        # Cas sp√©cial : 1 p√©age uniquement
        if target_count == 1:
            return SingleTollSelector.select_single_open_toll(tolls_on_route)
        
        # Cas sp√©cial : garder tous les p√©ages
        if target_count >= len(tolls_on_route):
            return SelectionResultBuilder.create_selection_result(
                tolls_on_route, target_count, 'keep_all'
            )
        
        # Phase 1 : Suppression des p√©ages depuis la fin
        remaining_tolls, removed_open, removed_closed = TollRemovalManager.remove_tolls_from_end(
            tolls_on_route, target_count
        )
        
        # Phase 2 : Analyse des suppressions
        if not removed_closed:
            # Aucun p√©age ferm√© supprim√© ‚Üí Pas d'optimisation n√©cessaire
            print("   ‚ÑπÔ∏è Aucun p√©age ferm√© supprim√©, pas d'optimisation n√©cessaire")
            final_tolls = remaining_tolls
        else:
            # Phase 3 : Optimisation des p√©ages ferm√©s supprim√©s
            print(f"   üîß {len(removed_closed)} p√©age(s) ferm√©(s) supprim√©(s) ‚Üí Optimisation n√©cessaire")
            final_tolls = TollOptimizer.optimize_after_removal(
                remaining_tolls, removed_closed, identification_result
            )
        
        # R√©sultat final
        if final_tolls:
            print(f"‚úÖ S√©lection finale : {len(final_tolls)} p√©ages")
            return SelectionResultBuilder.create_selection_result(
                final_tolls, target_count, 'removal_with_optimization'
            )
        else:
            print("‚ö†Ô∏è Aucun p√©age restant apr√®s suppression")
            return SelectionResultBuilder.create_empty_selection(target_count)
    
    def select_tolls_by_budget(
        self, 
        tolls_on_route: List, 
        target_budget: float,
        identification_result: Dict
    ) -> Dict:
        """
        √âTAPE 5b: S√©lection par budget maximum.
        
        Args:
            tolls_on_route: P√©ages disponibles sur la route
            target_budget: Budget maximum en euros
            identification_result: R√©sultat complet de l'identification
            
        Returns:
            P√©ages s√©lectionn√©s avec m√©tadonn√©es
        """
        print(f"üí∞ √âtape 5b: S√©lection par budget ({target_budget}‚Ç¨)...")
        
        # TODO: Impl√©menter la logique de s√©lection par budget
        print("‚ö†Ô∏è S√©lection par budget: √Ä IMPL√âMENTER")
        
        return {
            'selected_tolls': [],
            'selection_method': 'budget_based',
            'selection_strategy': 'not_implemented',
            'target_budget': target_budget,
            'achieved_budget': 0.0,
            'selection_valid': False,
            'failure_reason': 'budget_selection_not_implemented',
            'updated_segments_mapping': {}
        }