"""
Shapely Verifier
================

V√©rification pr√©cise des p√©ages avec Shapely (m√©thode de l'ancienne version).
Responsabilit√© unique : v√©rification Shapely pour rattraper les p√©ages manqu√©s.
"""

from typing import List, Dict, Tuple
from shapely.geometry import Point, LineString


class ShapelyVerifier:
    """V√©rificateur de p√©ages avec Shapely ultra-pr√©cis."""
    
    # Seuil strict pour p√©ages SUR la route avec Shapely
    SHAPELY_ON_ROUTE_THRESHOLD = 5.0  # 5 m√®tres
    
    @staticmethod
    def verify_tolls_with_shapely(
        tolls_on_route: List[Dict], 
        tolls_around: List[Dict], 
        route_coordinates: List[List[float]]
    ) -> Dict:
        """
        Phase 4: V√©rification Shapely pr√©cise de tous les p√©ages.
        
        Args:
            tolls_on_route: P√©ages d√©tect√©s "sur route" par l'algorithme optimis√©
            tolls_around: P√©ages d√©tect√©s "autour" par l'algorithme optimis√©  
            route_coordinates: Coordonn√©es de la route
            
        Returns:
            R√©sultats de la v√©rification Shapely
        """
        print("üîç Phase 4: V√©rification Shapely pr√©cise...")
        
        if not route_coordinates or len(route_coordinates) < 2:
            print("‚ùå Coordonn√©es invalides pour Shapely")
            return ShapelyVerifier._create_empty_verification()
        
        # Cr√©er la LineString Shapely
        try:
            route_line = LineString(route_coordinates)
        except Exception as e:
            print(f"‚ùå Erreur cr√©ation LineString : {e}")
            return ShapelyVerifier._create_empty_verification()
        
        # V√©rifier tous les p√©ages (on_route + around)
        all_tolls_to_verify = []
        
        # Ajouter p√©ages "sur route" avec leur source
        for toll_data in tolls_on_route:
            toll = toll_data.get('toll') if isinstance(toll_data, dict) else toll_data
            all_tolls_to_verify.append({
                'toll': toll,
                'source': 'optimized_on_route'
            })
        
        # Ajouter p√©ages "autour" avec leur source  
        for toll_data in tolls_around:
            toll = toll_data.get('toll') if isinstance(toll_data, dict) else toll_data
            all_tolls_to_verify.append({
                'toll': toll,
                'source': 'optimized_around'
            })
        
        print(f"   üéØ V√©rification Shapely de {len(all_tolls_to_verify)} p√©ages...")
        
        # V√©rification Shapely pour tous
        verified_results = ShapelyVerifier._verify_tolls_batch(
            all_tolls_to_verify, route_line
        )
        
        return verified_results
    
    @staticmethod
    def _verify_tolls_batch(
        tolls_to_verify: List[Dict], 
        route_line: LineString
    ) -> Dict:
        """
        V√©rification par lot avec Shapely.
        
        Args:
            tolls_to_verify: Liste des p√©ages √† v√©rifier
            route_line: LineString Shapely de la route
            
        Returns:
            R√©sultats de v√©rification
        """
        results = {
            'shapely_on_route': [],      # < 5m avec Shapely
            'shapely_around': [],        # >= 5m avec Shapely
            'verification_stats': {
                'total_verified': 0,
                'confirmed_on_route': 0,
                'moved_to_around': 0,
                'promoted_to_route': 0,
                'shapely_errors': 0
            }
        }
        
        for toll_item in tolls_to_verify:
            toll = toll_item['toll']
            source = toll_item['source']
            
            try:
                # V√©rification Shapely pr√©cise
                shapely_distance = ShapelyVerifier._calculate_shapely_distance(
                    toll, route_line
                )
                
                if shapely_distance is None:
                    results['verification_stats']['shapely_errors'] += 1
                    continue
                
                # Classification selon seuil Shapely (5m)
                if shapely_distance <= ShapelyVerifier.SHAPELY_ON_ROUTE_THRESHOLD:
                    results['shapely_on_route'].append({
                        'toll': toll,
                        'shapely_distance': shapely_distance,
                        'source': source,
                        'verification_method': 'shapely'
                    })
                    results['verification_stats']['confirmed_on_route'] += 1
                    
                    # Statistique : promu depuis "around" ?
                    if source == 'optimized_around':
                        results['verification_stats']['promoted_to_route'] += 1
                    
                else:
                    results['shapely_around'].append({
                        'toll': toll,
                        'shapely_distance': shapely_distance,
                        'source': source,
                        'verification_method': 'shapely'
                    })
                    
                    # Statistique : r√©trograd√© depuis "on_route" ?
                    if source == 'optimized_on_route':
                        results['verification_stats']['moved_to_around'] += 1
                
                results['verification_stats']['total_verified'] += 1
                
            except Exception as e:
                print(f"   ‚ö†Ô∏è Erreur v√©rification p√©age {toll.osm_name}: {e}")
                results['verification_stats']['shapely_errors'] += 1
        
        ShapelyVerifier._print_verification_summary(results)
        return results
    
    @staticmethod
    def _calculate_shapely_distance(toll, route_line: LineString) -> float:
        """
        Calcule la distance Shapely pr√©cise toll ‚Üí route.
        
        Args:
            toll: Objet p√©age avec coordonn√©es
            route_line: LineString Shapely
            
        Returns:
            Distance en m√®tres, None si erreur
        """
        try:
            # Extraire coordonn√©es du p√©age
            if hasattr(toll, 'osm_coordinates'):
                coords = toll.osm_coordinates
            elif hasattr(toll, 'coordinates'):
                coords = toll.coordinates
            else:
                return None
            
            if not coords or len(coords) < 2:
                return None
            
            # Cr√©er Point Shapely
            toll_point = Point(coords[0], coords[1])
            
            # Distance Shapely en degr√©s
            distance_degrees = route_line.distance(toll_point)
            
            # Conversion degr√©s ‚Üí m√®tres (approximation)
            distance_meters = distance_degrees * 111139  # 1 degr√© ‚âà 111139m
            
            return distance_meters
            
        except Exception as e:
            print(f"   ‚ùå Erreur calcul Shapely : {e}")
            return None
    
    @staticmethod
    def _create_empty_verification() -> Dict:
        """Cr√©e un r√©sultat de v√©rification vide."""
        return {
            'shapely_on_route': [],
            'shapely_around': [],
            'verification_stats': {
                'total_verified': 0,
                'confirmed_on_route': 0,
                'moved_to_around': 0,
                'promoted_to_route': 0,
                'shapely_errors': 0
            }
        }
    
    @staticmethod
    def _print_verification_summary(results: Dict) -> None:
        """Affiche le r√©sum√© de la v√©rification Shapely."""
        stats = results['verification_stats']
        
        print(f"   ‚úÖ V√©rification Shapely termin√©e:")
        print(f"      üìä {stats['total_verified']} p√©ages v√©rifi√©s")
        print(f"      üéØ {stats['confirmed_on_route']} confirm√©s SUR route (<5m)")
        print(f"      üìç {stats['promoted_to_route']} promus vers route")
        print(f"      üìâ {stats['moved_to_around']} r√©trograd√©s vers autour")
        if stats['shapely_errors'] > 0:
            print(f"      ‚ö†Ô∏è {stats['shapely_errors']} erreurs de v√©rification")