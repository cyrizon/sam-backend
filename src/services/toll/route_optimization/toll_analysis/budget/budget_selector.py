"""
Budget Toll Selector
===================

S√©lecteur de p√©ages optimis√© par budget.
Orchestrateur principal utilisant les modules sp√©cialis√©s.
"""

from typing import List, Dict, Optional
from .budget_optimizer import BudgetOptimizer
from ...utils.cache_accessor import CacheAccessor
from .budget_optimizer import BudgetOptimizer


class BudgetTollSelector:
    """
    S√©lecteur de p√©ages par budget.
    Responsabilit√© : Orchestration de la s√©lection par budget.
    """
    
    def __init__(self):
        """Initialise le s√©lecteur par budget."""
        self.optimizer = BudgetOptimizer()
        print("üí∞ Budget Toll Selector initialis√©")
    
    def select_tolls_by_budget(
        self, 
        tolls_on_route: List[Dict], 
        budget_limit: float,
        route_coordinates: List[List[float]]
    ) -> Optional[Dict]:
        """
        S√©lectionne les p√©ages pour respecter un budget donn√©.
        
        Args:
            tolls_on_route: Liste des p√©ages sur la route
            budget_limit: Budget maximum en euros
            route_coordinates: Coordonn√©es de la route de base
            
        Returns:
            R√©sultat de s√©lection ou None si impossible
        """
        print(f"üí∞ S√©lection par budget : {budget_limit}‚Ç¨")
        
        # V√©rifications de s√©curit√©
        if budget_limit is None or budget_limit < 0:
            print(f"   ‚ö†Ô∏è Budget limite invalide: {budget_limit}")
            return self._create_no_toll_result("Budget limite invalide")
        
        # Cas sp√©cial : budget = 0 ‚Üí route sans p√©age
        if budget_limit == 0.0:
            print(f"   üö´ Budget = 0 ‚Üí route sans p√©age")
            return self._create_no_toll_result("Budget 0 ‚Üí aucun p√©age autoris√©")
        
        if not tolls_on_route:
            return self._create_result([], 0.0, "Aucun p√©age sur route")
        
        # Calculer le co√ªt initial avec le cache
        initial_cost = self._calculate_total_cost(tolls_on_route)
        
        # V√©rification de s√©curit√© pour le co√ªt
        if initial_cost is None:
            print(f"   ‚ö†Ô∏è Impossible de calculer le co√ªt initial")
            return self._create_no_toll_result("Calcul de co√ªt impossible")
        
        print(f"   Co√ªt initial : {initial_cost:.2f}‚Ç¨")
        
        if initial_cost <= budget_limit:
            # Convertir en objets avant de retourner
            converted_tolls = self._convert_tolls_to_objects(tolls_on_route)
            return self._create_result(
                converted_tolls, initial_cost, 
                f"Budget respect√© ({initial_cost:.2f}‚Ç¨ <= {budget_limit}‚Ç¨)"
            )
        
        # Optimisation n√©cessaire
        return self._optimize_for_budget(
            tolls_on_route, budget_limit, route_coordinates
        )
    
    def _optimize_for_budget(
        self, 
        tolls_on_route: List[Dict], 
        budget_limit: float,
        route_coordinates: List[List[float]]
    ) -> Optional[Dict]:
        """
        Optimise la liste de p√©ages pour respecter le budget.
        
        Args:
            tolls_on_route: P√©ages de base
            budget_limit: Budget limite
            route_coordinates: Coordonn√©es de route
            
        Returns:
            R√©sultat optimis√©
        """
        print("   üîÑ Optimisation par budget...")
        
        # S√©parer ouverts et ferm√©s
        open_tolls = [t for t in tolls_on_route if t.get('toll_type') == 'ouvert']
        closed_tolls = [t for t in tolls_on_route if t.get('toll_type') == 'ferm√©']
        
        if not closed_tolls:
            # Que des ouverts, teste le co√ªt
            cost = self._calculate_total_cost(open_tolls)
            if cost is not None and cost <= budget_limit:
                # Convertir en objets avant de retourner
                converted_tolls = self._convert_tolls_to_objects(open_tolls)
                return self._create_result(converted_tolls, cost, "Ouverts seulement")
            else:
                return self._create_no_toll_result("Budget d√©pass√© m√™me avec ouverts")
        
        # Cas sp√©cial : 1 seul ferm√© ‚Üí route sans p√©age
        if len(closed_tolls) == 1:
            return self._handle_single_closed_toll(open_tolls, budget_limit)
        
        # Optimisation des ferm√©s avec l'optimiseur
        return self.optimizer.optimize_for_budget(
            open_tolls, closed_tolls, budget_limit, 
            route_coordinates
        )
    
    def _handle_single_closed_toll(
        self, 
        open_tolls: List[Dict], 
        budget_limit: float
    ) -> Dict:
        """
        G√®re le cas d'un seul p√©age ferm√© (r√®gle des syst√®mes ferm√©s).
        
        Args:
            open_tolls: P√©ages ouverts
            budget_limit: Budget limite
            
        Returns:
            R√©sultat appropri√©
        """
        if open_tolls:
            # Tester si les ouverts respectent le budget
            cost = self._calculate_total_cost(open_tolls)
            if cost is not None and cost <= budget_limit:
                # Convertir en objets avant de retourner
                converted_tolls = self._convert_tolls_to_objects(open_tolls)
                return self._create_result(
                    converted_tolls, cost, 
                    "Ouverts seulement (ferm√© isol√© √©vit√©)"
                )
        
        # Sinon route sans p√©age
        return self._create_no_toll_result("Ferm√© isol√© ‚Üí route sans p√©age")
    
    def _create_result(
        self, 
        selected_tolls: List[Dict], 
        total_cost: float, 
        reason: str
    ) -> Dict:
        """
        Cr√©e un r√©sultat de s√©lection.
        
        Args:
            selected_tolls: P√©ages s√©lectionn√©s
            total_cost: Co√ªt total
            reason: Raison de la s√©lection
            
        Returns:
            Dictionnaire de r√©sultat
        """
        return {
            'selection_valid': True,
            'selected_tolls': selected_tolls,
            'total_cost': total_cost,
            'selection_reason': reason,
            'optimization_applied': len(selected_tolls) > 0
        }
    
    def _create_no_toll_result(self, reason: str) -> Dict:
        """
        Cr√©e un r√©sultat "route sans p√©age".
        
        Args:
            reason: Raison du choix
            
        Returns:
            R√©sultat sans p√©age
        """
        return {
            'selection_valid': True,
            'selected_tolls': [],
            'total_cost': 0.0,
            'selection_reason': f"Route sans p√©age : {reason}",
            'optimization_applied': True
        }

    def _calculate_total_cost(self, tolls: List[Dict]) -> float:
        """
        Calcule le co√ªt total d'une liste de p√©ages.
        
        Args:
            tolls: Liste des p√©ages
            
        Returns:
            Co√ªt total en euros
        """
        if not tolls:
            return 0.0
        
        if len(tolls) == 1:
            # Un seul p√©age, co√ªt par d√©faut
            return 3.0
        
        try:
            # Convertir en objets pour utiliser CacheAccessor.calculate_total_cost
            converted_tolls = self._convert_tolls_to_objects(tolls)
            
            if len(converted_tolls) >= 2:
                # Utiliser le calcul par bin√¥mes cons√©cutifs
                cost = CacheAccessor.calculate_total_cost(converted_tolls)
                return cost if cost is not None else 3.0 * len(tolls)
            else:
                # Fallback si conversion √©choue
                return 3.0 * len(tolls)
                
        except Exception as e:
            print(f"   ‚ö†Ô∏è Erreur calcul co√ªt total: {e}")
            # Co√ªt par d√©faut en cas d'erreur
            return 3.0 * len(tolls)

    def _convert_tolls_to_objects(self, tolls_list: List[Dict]) -> List:
        """
        Convertit une liste de dictionnaires en objets TollBoothStation ou CompleteMotorwayLink.
        Garantit que seuls des objets (jamais des dicts) sont retourn√©s.
        
        Args:
            tolls_list: Liste de dictionnaires de p√©ages
            
        Returns:
            Liste d'objets TollBoothStation ou CompleteMotorwayLink uniquement
        """
        converted_tolls = []
        
        for toll in tolls_list:
            if isinstance(toll, dict) and 'toll' in toll:
                # C'est un r√©sultat d'identification Shapely, extraire l'objet TollBoothStation
                converted_tolls.append(toll['toll'])
            elif isinstance(toll, dict):
                # Essayer de trouver l'objet TollBoothStation correspondant dans le cache
                toll_station = self._find_toll_station_in_cache(toll)
                if toll_station:
                    converted_tolls.append(toll_station)
                else:
                    print(f"     ‚ö†Ô∏è Impossible de convertir le p√©age {toll.get('name', 'Inconnu')} - IGNOR√â")
                    # Ne pas ajouter le dict - garantir que seuls les objets sont retourn√©s
                    continue
            else:
                # C'est d√©j√† un objet TollBoothStation ou CompleteMotorwayLink
                converted_tolls.append(toll)
        
        return converted_tolls

    def _find_toll_station_in_cache(self, toll_dict: Dict):
        """
        Trouve l'objet TollBoothStation correspondant dans le cache.
        
        Args:
            toll_dict: Dictionnaire repr√©sentant un p√©age
            
        Returns:
            TollBoothStation ou None
        """
        try:
            osm_id = toll_dict.get('osm_id')
            if not osm_id:
                return None
            
            # Chercher dans le cache V2
            toll_stations = CacheAccessor.get_toll_stations()
            for toll_booth in toll_stations:
                if toll_booth.osm_id == osm_id:
                    return toll_booth
            
            print(f"     ‚ö†Ô∏è P√©age {osm_id} non trouv√© dans le cache")
            return None
            
        except Exception as e:
            print(f"     ‚ùå Erreur recherche cache: {e}")
            return None
