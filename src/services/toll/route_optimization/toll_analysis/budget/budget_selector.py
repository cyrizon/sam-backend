"""
Budget Toll Selector
===================

S√©lecteur de p√©ages optimis√© par budget.
Orchestrateur principal utilisant les modules sp√©cialis√©s.
"""

from typing import List, Dict, Optional
from .budget_optimizer import BudgetOptimizer
from ...utils.cache_accessor import CacheAccessor
from .budget_optimizer import BudgetOptimizer


class BudgetTollSelector:
    """
    S√©lecteur de p√©ages par budget.
    Responsabilit√© : Orchestration de la s√©lection par budget.
    """
    
    def __init__(self):
        """Initialise le s√©lecteur par budget."""
        self.optimizer = BudgetOptimizer()
        print("üí∞ Budget Toll Selector initialis√©")
    
    def select_tolls_by_budget(
        self, 
        tolls_on_route: List[Dict], 
        budget_limit: float,
        route_coordinates: List[List[float]]
    ) -> Optional[Dict]:
        """
        S√©lectionne les p√©ages pour respecter un budget donn√©.
        
        Args:
            tolls_on_route: Liste des p√©ages sur la route
            budget_limit: Budget maximum en euros
            route_coordinates: Coordonn√©es de la route de base
            
        Returns:
            R√©sultat de s√©lection ou None si impossible
        """
        print(f"üí∞ S√©lection par budget : {budget_limit}‚Ç¨")
        
        if not tolls_on_route:
            return self._create_result([], 0.0, "Aucun p√©age sur route")
        
        # Calculer le co√ªt initial avec le cache
        initial_cost = self._calculate_total_cost(tolls_on_route)
        print(f"   Co√ªt initial : {initial_cost:.2f}‚Ç¨")
        
        if initial_cost <= budget_limit:
            return self._create_result(
                tolls_on_route, initial_cost, 
                f"Budget respect√© ({initial_cost:.2f}‚Ç¨ <= {budget_limit}‚Ç¨)"
            )
        
        # Optimisation n√©cessaire
        return self._optimize_for_budget(
            tolls_on_route, budget_limit, route_coordinates
        )
    
    def _optimize_for_budget(
        self, 
        tolls_on_route: List[Dict], 
        budget_limit: float,
        route_coordinates: List[List[float]]
    ) -> Optional[Dict]:
        """
        Optimise la liste de p√©ages pour respecter le budget.
        
        Args:
            tolls_on_route: P√©ages de base
            budget_limit: Budget limite
            route_coordinates: Coordonn√©es de route
            
        Returns:
            R√©sultat optimis√©
        """
        print("   üîÑ Optimisation par budget...")
        
        # S√©parer ouverts et ferm√©s
        open_tolls = [t for t in tolls_on_route if t.get('toll_type') == 'ouvert']
        closed_tolls = [t for t in tolls_on_route if t.get('toll_type') == 'ferm√©']
        
        if not closed_tolls:
            # Que des ouverts, teste le co√ªt
            cost = self._calculate_total_cost(open_tolls)
            if cost <= budget_limit:
                return self._create_result(open_tolls, cost, "Ouverts seulement")
            else:
                return self._create_no_toll_result("Budget d√©pass√© m√™me avec ouverts")
        
        # Cas sp√©cial : 1 seul ferm√© ‚Üí route sans p√©age
        if len(closed_tolls) == 1:
            return self._handle_single_closed_toll(open_tolls, budget_limit)
        
        # Optimisation des ferm√©s avec l'optimiseur
        return self.optimizer.optimize_for_budget(
            open_tolls, closed_tolls, budget_limit, 
            route_coordinates
        )
    
    def _handle_single_closed_toll(
        self, 
        open_tolls: List[Dict], 
        budget_limit: float
    ) -> Dict:
        """
        G√®re le cas d'un seul p√©age ferm√© (r√®gle des syst√®mes ferm√©s).
        
        Args:
            open_tolls: P√©ages ouverts
            budget_limit: Budget limite
            
        Returns:
            R√©sultat appropri√©
        """
        if open_tolls:
            # Tester si les ouverts respectent le budget
            cost = self._calculate_total_cost(open_tolls)
            if cost <= budget_limit:
                return self._create_result(
                    open_tolls, cost, 
                    "Ouverts seulement (ferm√© isol√© √©vit√©)"
                )
        
        # Sinon route sans p√©age
        return self._create_no_toll_result("Ferm√© isol√© ‚Üí route sans p√©age")
    
    def _create_result(
        self, 
        selected_tolls: List[Dict], 
        total_cost: float, 
        reason: str
    ) -> Dict:
        """
        Cr√©e un r√©sultat de s√©lection.
        
        Args:
            selected_tolls: P√©ages s√©lectionn√©s
            total_cost: Co√ªt total
            reason: Raison de la s√©lection
            
        Returns:
            Dictionnaire de r√©sultat
        """
        return {
            'selection_valid': True,
            'selected_tolls': selected_tolls,
            'total_cost': total_cost,
            'selection_reason': reason,
            'optimization_applied': len(selected_tolls) > 0
        }
    
    def _create_no_toll_result(self, reason: str) -> Dict:
        """
        Cr√©e un r√©sultat "route sans p√©age".
        
        Args:
            reason: Raison du choix
            
        Returns:
            R√©sultat sans p√©age
        """
        return {
            'selection_valid': True,
            'selected_tolls': [],
            'total_cost': 0.0,
            'selection_reason': f"Route sans p√©age : {reason}",
            'optimization_applied': True
        }

    def _calculate_total_cost(self, tolls: List[Dict]) -> float:
        """
        Calcule le co√ªt total d'une liste de p√©ages.
        
        Args:
            tolls: Liste des p√©ages
            
        Returns:
            Co√ªt total en euros
        """
        total_cost = 0.0
        
        for toll in tolls:
            try:
                # Utiliser le co√ªt estim√© s'il existe
                if 'estimated_cost' in toll:
                    total_cost += toll['estimated_cost']
                else:
                    # Utiliser le CacheAccessor pour calculer le co√ªt
                    toll_cost = CacheAccessor.calculate_toll_cost(
                        toll, vehicle_category="1"
                    )
                    total_cost += toll_cost
                    
            except Exception as e:
                print(f"   ‚ö†Ô∏è Erreur calcul co√ªt p√©age {toll.get('name', 'Inconnu')}: {e}")
                # Co√ªt par d√©faut si erreur
                total_cost += 3.0
        
        return total_cost
