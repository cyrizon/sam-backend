"""
Budget Optimizer
===============

Optimiseur de p√©ages pour respecter un budget donn√©.
Responsabilit√© : logique d'optimisation et de remplacement.
"""

from typing import List, Dict, Optional, Any
from ..spatial.unified_spatial_manager import UnifiedSpatialIndexManager
from ...utils.cache_accessor import CacheAccessor


class BudgetOptimizer:
    """
    Optimiseur de p√©ages par budget.
    Logique simple : remplace s√©quentiellement les p√©ages ferm√©s
    par les prochaines entr√©es disponibles sur la route.
    """
    
    def __init__(self):
        """Initialise l'optimiseur."""
        self.spatial_manager = UnifiedSpatialIndexManager()
    
    def optimize_for_budget(
        self, 
        open_tolls: List[Dict], 
        closed_tolls: List[Dict],
        budget_limit: float,
        route_coordinates: List[List[float]]
    ) -> Optional[Dict]:
        """
        Optimise les p√©ages ferm√©s pour respecter le budget.
        Strat√©gie simple : remplace s√©quentiellement les p√©ages ferm√©s
        par les prochaines entr√©es disponibles.
        
        Args:
            open_tolls: P√©ages ouverts
            closed_tolls: P√©ages ferm√©s
            budget_limit: Budget limite
            route_coordinates: Coordonn√©es route
            
        Returns:
            R√©sultat optimis√©
        """
        if not closed_tolls:
            # Pas de p√©ages ferm√©s √† optimiser
            total_cost = CacheAccessor.calculate_total_cost(open_tolls)
            if total_cost <= budget_limit:
                return self._create_result(
                    open_tolls, total_cost, "Ouverts seulement"
                )
            else:
                return self._create_no_toll_result("Budget d√©pass√©")
        
        print(f"   üéØ Optimisation budget : {len(closed_tolls)} p√©ages ferm√©s")
        
        # R√©cup√©rer les entr√©es de remplacement
        replacement_entries = self._get_replacement_entries(route_coordinates)
        
        if not replacement_entries:
            print("   ‚ö†Ô∏è Aucune entr√©e de remplacement trouv√©e")
            return self._test_open_only_fallback(
                open_tolls, budget_limit
            )
        
        # Strat√©gie progressive simple : essayer chaque entr√©e s√©quentiellement
        current_tolls = open_tolls + closed_tolls
        
        for i, replacement_entry in enumerate(replacement_entries):
            print(f"   üîÑ Test entr√©e {i + 1}/{len(replacement_entries)}")
            
            # Remplacer le premier p√©age ferm√© par cette entr√©e
            new_tolls = self._replace_first_closed_toll(
                current_tolls, closed_tolls[0], replacement_entry
            )
            
            # Tester le co√ªt
            new_cost = CacheAccessor.calculate_total_cost(new_tolls)
            print(f"     Co√ªt avec entr√©e {i + 1} : {new_cost:.2f}‚Ç¨")
            
            if new_cost <= budget_limit:
                return self._create_result(
                    new_tolls, new_cost, 
                    f"Optimis√© avec entr√©e s√©quentielle {i + 1}"
                )
            
            # Continuer avec cette liste pour la prochaine tentative
            current_tolls = new_tolls
        
        # Si toutes les optimisations √©chouent
        print("   ‚ùå Toutes les optimisations ont √©chou√©")
        return self._test_open_only_fallback(open_tolls, budget_limit)
    
    def _get_replacement_entries(
        self, 
        route_coordinates: List[List[float]]
    ) -> List:
        """
        R√©cup√®re les entr√©es candidates pour remplacement.
        
        Args:
            route_coordinates: Coordonn√©es de la route
            
        Returns:
            Liste des entr√©es avec p√©ages
        """
        # R√©cup√©rer les entr√©es le long de la route
        entries_along_route = self.spatial_manager.get_entries_along_route(
            route_coordinates, buffer_km=0.2
        )
        
        # Filtrer seulement celles avec p√©ages
        entries_with_tolls = [
            entry for entry in entries_along_route 
            if entry.has_toll()
        ]
        
        print(f"   üìç Entr√©es de remplacement : {len(entries_with_tolls)} trouv√©es")
        return entries_with_tolls
    
    def _replace_first_closed_toll(
        self, 
        current_tolls: List[Dict], 
        closed_toll: Dict, 
        replacement_entry
    ) -> List[Dict]:
        """
        Remplace le premier p√©age ferm√© par une entr√©e de remplacement.
        Logique simple : remplacement direct 1:1.
        
        Args:
            current_tolls: Liste actuelle des p√©ages
            closed_toll: P√©age ferm√© √† remplacer
            replacement_entry: Entr√©e de remplacement
            
        Returns:
            Nouvelle liste avec remplacement
        """
        new_tolls = []
        
        for toll in current_tolls:
            if toll == closed_toll:
                # Remplacer par l'entr√©e de remplacement
                new_tolls.append({
                    'toll_type': 'ferm√©',
                    'name': f"Entr√©e {replacement_entry.link_id}",
                    'coordinates': replacement_entry.get_start_point(),
                    'associated_toll': replacement_entry.associated_toll
                })
                print(f"     ‚úÖ Remplac√© par entr√©e {replacement_entry.link_id}")
            else:
                new_tolls.append(toll)
        
        return new_tolls
    
    def _test_open_only_fallback(
        self, 
        open_tolls: List[Dict], 
        budget_limit: float
    ) -> Optional[Dict]:
        """
        Test de fallback : garder seulement les ouverts.
        
        Args:
            open_tolls: P√©ages ouverts
            budget_limit: Budget limite
            
        Returns:
            R√©sultat ou route sans p√©age
        """
        if not open_tolls:
            return self._create_no_toll_result("Aucun p√©age ouvert disponible")
        
        cost = CacheAccessor.calculate_total_cost(open_tolls)
        
        if cost <= budget_limit:
            return self._create_result(
                open_tolls, cost, 
                "Fallback : ouverts seulement"
            )
        else:
            return self._create_no_toll_result("Budget d√©pass√© m√™me avec ouverts")
    
    def _create_result(
        self, 
        selected_tolls: List[Dict], 
        total_cost: float, 
        reason: str
    ) -> Dict:
        """
        Cr√©e un r√©sultat de s√©lection.
        
        Args:
            selected_tolls: P√©ages s√©lectionn√©s
            total_cost: Co√ªt total
            reason: Raison de la s√©lection
            
        Returns:
            Dictionnaire de r√©sultat
        """
        return {
            'selection_valid': True,
            'selected_tolls': selected_tolls,
            'total_cost': total_cost,
            'selection_reason': reason,
            'optimization_applied': len(selected_tolls) > 0
        }
    
    def _create_no_toll_result(self, reason: str) -> Dict:
        """
        Cr√©e un r√©sultat "route sans p√©age".
        
        Args:
            reason: Raison du choix
            
        Returns:
            R√©sultat sans p√©age
        """
        return {
            'selection_valid': True,
            'selected_tolls': [],
            'total_cost': 0.0,
            'selection_reason': f"Route sans p√©age : {reason}",
            'optimization_applied': True
        }
