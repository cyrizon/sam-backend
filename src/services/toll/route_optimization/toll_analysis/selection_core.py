"""
Toll Selection Core Logic
========================

Logique principale de s√©lection des p√©ages avec r√®gles des syst√®mes ferm√©s.
Module d√©di√© aux algorithmes de s√©lection.
"""

from typing import List, Dict, Optional


class TollSelectionCore:
    """Logique centrale de s√©lection des p√©ages."""
    
    def __init__(self):
        """Initialise le module de s√©lection."""
        pass
    
    def select_by_count_with_rules(
        self, 
        tolls_on_route: List[Dict], 
        target_count: int
    ) -> Dict:
        """
        S√©lectionne les p√©ages par nombre en respectant les r√®gles.
        
        Args:
            tolls_on_route: Liste des p√©ages sur la route
            target_count: Nombre de p√©ages souhait√©
            
        Returns:
            R√©sultat de s√©lection avec m√©tadonn√©es
        """
        if not self._validate_selection_input(tolls_on_route, target_count):
            return self._create_failed_result("Donn√©es d'entr√©e invalides")
        
        # Cas sp√©ciaux
        if target_count == 0:
            return self._create_success_result([], "Aucun p√©age s√©lectionn√©")
        
        if target_count >= len(tolls_on_route):
            return self._create_success_result(tolls_on_route, "Tous les p√©ages s√©lectionn√©s")
        
        # S√©lection avec r√®gles des syst√®mes ferm√©s
        return self._select_with_closed_system_rules(tolls_on_route, target_count)
    
    def _validate_selection_input(self, tolls_on_route: List[Dict], target_count: int) -> bool:
        """Valide les donn√©es d'entr√©e pour la s√©lection."""
        if not tolls_on_route:
            return target_count == 0
        
        if target_count < 0:
            return False
        
        return True
    
    def _select_with_closed_system_rules(self, tolls_on_route: List[Dict], target_count: int) -> Dict:
        """S√©lectionne en respectant les r√®gles des syst√®mes ferm√©s."""
        
        # Analyser les types de p√©ages
        open_tolls = [t for t in tolls_on_route if t.get('toll_type') == 'ouvert']
        closed_tolls = [t for t in tolls_on_route if t.get('toll_type') == 'ferm√©']
        
        print(f"   üìä Analyse : {len(open_tolls)} ouverts, {len(closed_tolls)} ferm√©s")
        
        # Cas sp√©cial : 1 p√©age demand√© avec que des ferm√©s
        if target_count == 1 and len(open_tolls) == 0:
            print("   ‚ö†Ô∏è 1 p√©age demand√© mais que des ferm√©s ‚Üí s√©lection impossible")
            return self._create_failed_result("1 p√©age ferm√© isol√© interdit")
        
        # Strat√©gies de s√©lection
        if len(open_tolls) >= target_count:
            # Cas id√©al : que des ouverts
            selected = open_tolls[:target_count]
            return self._create_success_result(selected, "S√©lection que d'ouverts")
        
        # S√©lection mixte n√©cessaire
        return self._select_mixed_tolls(open_tolls, closed_tolls, target_count)
    
    def _select_mixed_tolls(self, open_tolls: List[Dict], closed_tolls: List[Dict], target_count: int) -> Dict:
        """S√©lectionne un m√©lange d'ouverts et ferm√©s en respectant les r√®gles."""
        
        # Prendre tous les ouverts disponibles
        selected = open_tolls.copy()
        remaining_slots = target_count - len(open_tolls)
        
        # Ajouter des ferm√©s en respectant la r√®gle (minimum 2 ferm√©s)
        if remaining_slots == 1:
            # Ne peut pas ajouter qu'1 ferm√© ‚Üí ajouter 2 ou aucun
            if len(closed_tolls) >= 2 and target_count < len(open_tolls) + len(closed_tolls):
                # Ajouter 2 ferm√©s (d√©passe target mais respecte r√®gle)
                selected.extend(closed_tolls[:2])
                return self._create_success_result(
                    selected, 
                    f"Ajout de 2 ferm√©s pour respecter la r√®gle (target d√©pass√©: {len(selected)})"
                )
            else:
                # Garder que les ouverts
                return self._create_success_result(selected, "Que des ouverts pour √©viter ferm√© isol√©")
        
        else:
            # Ajouter le nombre exact de ferm√©s demand√©s
            available_closed = min(remaining_slots, len(closed_tolls))
            selected.extend(closed_tolls[:available_closed])
            
            return self._create_success_result(
                selected, 
                f"S√©lection mixte : {len(open_tolls)} ouverts + {available_closed} ferm√©s"
            )
    
    def _create_success_result(self, selected_tolls: List[Dict], reason: str) -> Dict:
        """Cr√©e un r√©sultat de s√©lection r√©ussie."""
        
        # Statistiques
        open_count = sum(1 for t in selected_tolls if t.get('toll_type') == 'ouvert')
        closed_count = len(selected_tolls) - open_count
        
        return {
            'selection_valid': True,
            'selected_tolls': selected_tolls,
            'selection_count': len(selected_tolls),
            'selection_reason': reason,
            'statistics': {
                'open_tolls': open_count,
                'closed_tolls': closed_count,
                'total_selected': len(selected_tolls)
            },
            'needs_optimization': False  # Pas d'optimisation par d√©faut
        }
    
    def _create_failed_result(self, reason: str) -> Dict:
        """Cr√©e un r√©sultat de s√©lection √©chou√©e."""
        return {
            'selection_valid': False,
            'selected_tolls': [],
            'selection_count': 0,
            'selection_reason': reason,
            'statistics': {
                'open_tolls': 0,
                'closed_tolls': 0,
                'total_selected': 0
            }
        }
