"""
Toll Removal Manager
===================

Responsabilit√© : Gestion de la suppression des p√©ages depuis la fin de route.
"""

from typing import List, Dict, Tuple


class TollRemovalManager:
    """Gestionnaire de suppression des p√©ages."""
    
    @staticmethod
    def remove_tolls_from_end(tolls_on_route: List, target_count: int) -> Tuple[List, List, List]:
        """
        Supprime les p√©ages depuis la fin de route pour atteindre le nombre cible.
        
        Args:
            tolls_on_route: Liste des p√©ages sur la route
            target_count: Nombre de p√©ages souhait√©
            
        Returns:
            Tuple[remaining_tolls, removed_open, removed_closed]
            - remaining_tolls: P√©ages restants apr√®s suppression
            - removed_open: P√©ages ouverts supprim√©s
            - removed_closed: P√©ages ferm√©s supprim√©s
        """
        if target_count >= len(tolls_on_route):
            return tolls_on_route.copy(), [], []
        
        working_tolls = tolls_on_route.copy()
        removed_open = []
        removed_closed = []
        
        tolls_to_remove = len(working_tolls) - target_count
        print(f"üîÑ Suppression depuis la fin : {len(working_tolls)} ‚Üí {target_count} p√©ages")
        
        for i in range(tolls_to_remove):
            if not working_tolls:
                break
            
            # Supprimer le premier p√©age (fin de route g√©ographiquement)
            removed_toll = working_tolls.pop(0)
            toll_name = getattr(removed_toll, 'osm_name', 'Inconnu')
            print(f"   ‚ùå Supprim√© : {toll_name}")
            
            # Classer par syst√®me
            if TollRemovalManager._is_open_system(removed_toll):
                removed_open.append(removed_toll)
            else:
                removed_closed.append(removed_toll)
        
        return working_tolls, removed_open, removed_closed
    
    @staticmethod
    def _is_open_system(toll) -> bool:
        """V√©rifie si le p√©age est √† syst√®me ouvert."""
        # MatchedToll model
        if hasattr(toll, 'is_open_system'):
            return toll.is_open_system
        elif hasattr(toll, 'csv_role'):
            return getattr(toll, 'csv_role', '') == 'O'
        
        # TollStation model  
        elif hasattr(toll, 'toll_type'):
            return getattr(toll, 'toll_type', '').lower() == 'open'
        
        # Fallback : examiner le nom pour indicateurs
        name = getattr(toll, 'osm_name', None) or getattr(toll, 'name', '') or ''
        name = name.lower()
        return 'open' in name or 'ouvert' in name
