"""
toll_avoidance_analyzer.py
--------------------------

Responsabilit√© : Analyser quels p√©ages peuvent √™tre √©vit√©s et dans quel ordre.
G√®re la logique d'analyse et de priorisation des p√©ages √† √©viter.
"""

from itertools import combinations


class TollAvoidanceAnalyzer:
    """
    Analyseur d'√©vitement de p√©ages.
    Responsabilit√© unique : d√©terminer les strat√©gies d'√©vitement optimales.
    """
    
    def __init__(self):
        pass
    
    def analyze_avoidance_opportunities(self, base_tolls, max_tolls):
        """
        Analyse les opportunit√©s d'√©vitement pour optimiser une route.
        
        Args:
            base_tolls: P√©ages de la route de base
            max_tolls: Nombre maximum de p√©ages autoris√©s
            
        Returns:
            list: Combinaisons d'√©vitement tri√©es par priorit√©
        """
        if len(base_tolls) <= max_tolls:
            print(f"‚úÖ Route de base OK: {len(base_tolls)} ‚â§ {max_tolls} p√©ages")
            return []
        
        print(f"üîç Analyse d'√©vitement: {len(base_tolls)} p√©ages ‚Üí max {max_tolls}")
        
        # G√©n√©rer toutes les combinaisons d'√©vitement possibles
        avoidance_combinations = []
        
        # Pour chaque nombre de p√©ages √† √©viter (de 1 √† n)
        min_to_avoid = len(base_tolls) - max_tolls
        max_to_avoid = len(base_tolls) - 1  # Garder au moins 1 p√©age
        
        for num_to_avoid in range(min_to_avoid, max_to_avoid + 1):
            if num_to_avoid > 0:
                # G√©n√©rer toutes les combinaisons de ce nombre
                for tolls_to_avoid in combinations(base_tolls, num_to_avoid):
                    avoidance_combinations.append({
                        'tolls_to_avoid': list(tolls_to_avoid),
                        'expected_tolls': len(base_tolls) - num_to_avoid,
                        'priority': self._calculate_priority(tolls_to_avoid, base_tolls)
                    })
        
        # Trier par priorit√© (plus prioritaire en premier)
        avoidance_combinations.sort(key=lambda x: x['priority'], reverse=True)
        
        print(f"üìä {len(avoidance_combinations)} combinaisons d'√©vitement g√©n√©r√©es")
        return avoidance_combinations
    
    def _calculate_priority(self, tolls_to_avoid, base_tolls):
        """
        Calcule la priorit√© d'une combinaison d'√©vitement.
        Plus la priorit√© est √©lev√©e, plus la combinaison est int√©ressante √† tester en premier.
        
        Args:
            tolls_to_avoid: P√©ages √† √©viter
            base_tolls: Tous les p√©ages de la route de base
            
        Returns:
            float: Score de priorit√©
        """
        priority = 0.0
        
        # 1. Favoriser l'√©vitement de moins de p√©ages (plus facile √† r√©aliser)
        priority += (len(base_tolls) - len(tolls_to_avoid)) * 10
        
        # 2. Favoriser l'√©vitement des p√©ages les plus co√ªteux
        for toll in tolls_to_avoid:
            toll_cost = toll.get('cost', 0)
            priority += toll_cost * 2
        
        # 3. Favoriser l'√©vitement des p√©ages en d√©but/fin de route (plus faciles √† contourner)
        for i, toll in enumerate(base_tolls):
            if toll in tolls_to_avoid:
                if i == 0 or i == len(base_tolls) - 1:  # Premier ou dernier p√©age
                    priority += 5
                elif i == 1 or i == len(base_tolls) - 2:  # Deuxi√®me ou avant-dernier
                    priority += 3
        
        # 4. Favoriser l'√©vitement des p√©ages "ouverts" (souvent plus faciles √† √©viter)
        for toll in tolls_to_avoid:
            if toll.get('role') == 'O':  # P√©age ouvert
                priority += 2
        
        return priority
    
    def get_single_toll_avoidance_priority(self, base_tolls):
        """
        Retourne l'ordre de priorit√© pour √©viter les p√©ages un par un.
        
        Args:
            base_tolls: P√©ages de la route de base
            
        Returns:
            list: P√©ages tri√©s par priorit√© d'√©vitement (plus prioritaire en premier)
        """
        if not base_tolls:
            return []
        
        # Calculer la priorit√© de chaque p√©age individuel
        toll_priorities = []
        for i, toll in enumerate(base_tolls):
            priority = self._calculate_single_toll_priority(toll, i, len(base_tolls))
            toll_priorities.append({
                'toll': toll,
                'priority': priority,
                'position': i
            })
        
        # Trier par priorit√© d√©croissante
        toll_priorities.sort(key=lambda x: x['priority'], reverse=True)
        
        return [item['toll'] for item in toll_priorities]
    
    def _calculate_single_toll_priority(self, toll, position, total_tolls):
        """
        Calcule la priorit√© d'√©vitement d'un p√©age individuel.
        
        Args:
            toll: P√©age √† analyser
            position: Position du p√©age dans la route (0-index√©)
            total_tolls: Nombre total de p√©ages
            
        Returns:
            float: Score de priorit√©
        """
        priority = 0.0
        
        # 1. Co√ªt du p√©age (plus cher = plus prioritaire √† √©viter)
        priority += toll.get('cost', 0) * 3
        
        # 2. Position dans la route (extr√©mit√©s plus faciles √† √©viter)
        if position == 0 or position == total_tolls - 1:  # Premier ou dernier
            priority += 10
        elif position == 1 or position == total_tolls - 2:  # Proche des extr√©mit√©s
            priority += 5
        else:  # Au milieu
            priority += 1
        
        # 3. Type de p√©age (ouverts plus faciles √† √©viter)
        if toll.get('role') == 'O':  # P√©age ouvert
            priority += 5
        
        # 4. Gestionnaire (certains sont plus faciles √† √©viter que d'autres)
        gestionnaire = toll.get('gestionnaire', '').upper()
        if gestionnaire == 'APRR':
            priority += 2  # Les p√©ages APRR ont souvent des alternatives
        
        return priority
