"""
progressive_avoidance_strategy.py
---------------------------------

Responsabilit√© : Strat√©gie d'√©vitement progressif des p√©ages.
Au lieu de g√©n√©rer des combinaisons artificielles, teste l'√©vitement de chaque p√©age
de la route de base pour trouver des alternatives r√©elles et optimales.
"""

from src.services.toll_locator import locate_tolls
from src.services.toll.route_calculator import RouteCalculator
from src.services.toll.constants import TollOptimizationConfig as Config
from src.services.common.result_formatter import ResultFormatter


class ProgressiveAvoidanceStrategy:
    """
    Strat√©gie d'√©vitement progressif.
    Responsabilit√© unique : trouver des routes alternatives en √©vitant progressivement
    les p√©ages de la route de base.
    """
    
    def __init__(self, ors_service):
        """
        Initialise la strat√©gie d'√©vitement progressif.
        Args:
            ors_service: Service ORS pour les appels API
        """
        self.ors = ors_service
        self.route_calculator = RouteCalculator(ors_service)
    
    def find_route_with_progressive_avoidance(self, coordinates, max_tolls, veh_class=Config.DEFAULT_VEH_CLASS):
        """
        Trouve une route alternative en √©vitant progressivement les p√©ages de la route de base.
        
        Args:
            coordinates: Coordonn√©es [d√©part, arriv√©e]
            max_tolls: Nombre maximum de p√©ages autoris√©s
            veh_class: Classe de v√©hicule
            
        Returns:
            dict: Route optimis√©e ou None si √©chec
        """
        print(f"üîÑ === √âVITEMENT PROGRESSIF : ‚â§ {max_tolls} p√©ages ===")
        
        # Cas sp√©cial : si max_tolls = 0, calculer directement une route sans p√©age
        if max_tolls == 0:
            print("üö´ max_tolls = 0 : Calcul direct d'une route sans p√©age...")
            return self._calculate_no_toll_route(coordinates, veh_class)
        
        # 1. Calculer la route de base et identifier les p√©ages
        try:
            print(f"üìç 1. Analyse de la route de base...")
            base_route = self.route_calculator.get_base_route_with_tracking(coordinates)
            tolls_dict = self.route_calculator.locate_and_cost_tolls(base_route, veh_class)
            base_tolls = tolls_dict.get("on_route", [])
            base_toll_count = len(base_tolls)
            
            print(f"   Route de base: {base_toll_count} p√©ages d√©tect√©s")
            
            # Si la route de base respecte d√©j√† la limite
            if base_toll_count <= max_tolls:
                print(f"‚úÖ Route de base OK: {base_toll_count} ‚â§ {max_tolls} p√©ages")
                base_cost = sum(t.get("cost", 0) for t in base_tolls)
                base_duration = base_route["features"][0]["properties"]["summary"]["duration"]
                return ResultFormatter.format_route_result(base_route, base_cost, base_duration, base_toll_count)
            
            # Calculer combien de p√©ages √©viter
            tolls_to_remove = base_toll_count - max_tolls
            print(f"üéØ Besoin d'√©viter {tolls_to_remove} p√©ages pour atteindre {max_tolls}")
            
        except Exception as e:
            print(f"‚ùå Erreur analyse route de base: {e}")
            return None
          # 2. Tester l'√©vitement progressif
        return self._test_progressive_avoidance(coordinates, base_tolls, tolls_to_remove, max_tolls, veh_class)
    
    def _test_progressive_avoidance(self, coordinates, base_tolls, tolls_to_remove, max_tolls, veh_class):
        """
        Teste l'√©vitement progressif des p√©ages.
        
        Args:
            coordinates: Coordonn√©es [d√©part, arriv√©e]
            base_tolls: P√©ages de la route de base
            tolls_to_remove: Nombre de p√©ages √† √©viter
            max_tolls: Nombre maximum de p√©ages autoris√©s (objectif)
            veh_class: Classe de v√©hicule
            
        Returns:
            dict: Meilleure route trouv√©e ou None
        """
        from itertools import combinations
        
        print(f"üß™ 2. Test d'√©vitement progressif...")
        
        best_result = None
        best_toll_count = float('inf')
        best_cost = float('inf')
        # Tester toutes les combinaisons possibles de p√©ages √† √©viter
        for r in range(1, min(tolls_to_remove + 1, len(base_tolls)) + 1):
            print(f"\nüîç Test √©vitement de {r} p√©ages...")
            
            for tolls_to_avoid in combinations(base_tolls, r):
                toll_ids = [t.get('id', 'NO_ID') for t in tolls_to_avoid]
                print(f"   üö´ √âvitement: {', '.join(toll_ids)}")
                
                # Tester cette combinaison d'√©vitement
                result = self._test_avoidance_combination(coordinates, tolls_to_avoid, veh_class)
                
                if result:
                    route_tolls = result.get('toll_count', 0)
                    route_cost = result.get('cost', 0)
                    
                    print(f"   ‚úÖ Trouv√©: {route_tolls} p√©ages, {route_cost:.2f}‚Ç¨")
                    
                    # Garder le meilleur r√©sultat (moins de p√©ages, puis moins cher)
                    if (route_tolls < best_toll_count or 
                        (route_tolls == best_toll_count and route_cost < best_cost)):
                        best_result = result
                        best_toll_count = route_tolls
                        best_cost = route_cost
                        print(f"   üèÜ Nouveau meilleur r√©sultat!")
                        
                        # Si on a atteint l'objectif exact, on peut s'arr√™ter
                        if route_tolls <= max_tolls:
                            print(f"üéØ OBJECTIF ATTEINT: {route_tolls} ‚â§ {max_tolls} p√©ages")
                            break
                else:
                    print(f"   ‚ùå √âchec √©vitement")
            
            # Si on a atteint l'objectif, sortir de la boucle externe aussi
            if best_toll_count <= max_tolls:
                print(f"‚úÖ Objectif respect√©: {best_toll_count} ‚â§ {max_tolls} p√©ages")
                break        
        if best_result:
            print(f"üéâ SUCC√àS √©vitement progressif: {best_toll_count} p√©ages, {best_cost:.2f}‚Ç¨")
            return best_result
        else:
            print(f"‚ùå √âCHEC: Aucune am√©lioration trouv√©e")
            return None

    def _test_avoidance_combination(self, coordinates, tolls_to_avoid, veh_class):
        """
        Teste une combinaison sp√©cifique d'√©vitement avec rayons progressifs.
        
        Args:
            coordinates: Coordonn√©es [d√©part, arriv√©e]
            tolls_to_avoid: P√©ages √† √©viter
            veh_class: Classe de v√©hicule
            
        Returns:
            dict: Route r√©sultante ou None si √©chec
        """
        try:
            from src.utils.poly_utils import avoidance_multipolygon
            # Rayons progressifs pour trouver des alternatives plus √©loign√©es
            # Incluant des rayons plus grands pour les d√©tours longs
            radius_sequence = [500, 1000, 1500, 2000]
            
            for attempt, radius in enumerate(radius_sequence, 1):
                try:
                    print(f"   üîÑ Tentative √©vitement {attempt}/{len(radius_sequence)} (rayon {radius}m)")
                    
                    # Cr√©er les polygones d'√©vitement avec le rayon actuel
                    avoid_polygons = avoidance_multipolygon(tolls_to_avoid, radius_m=radius)
                    
                    # Calculer la route avec √©vitement
                    alternative_route = self.ors.get_route_avoiding_polygons(
                        coordinates, avoid_polygons, include_tollways=True
                    )
                    
                    if not alternative_route or 'features' not in alternative_route:
                        print(f"   ‚ùå Tentative {attempt}: Aucune route trouv√©e")
                        continue
                    
                    # Analyser la route alternative
                    tolls_dict = self.route_calculator.locate_and_cost_tolls(alternative_route, veh_class)
                    route_tolls = tolls_dict.get("on_route", [])
                    route_cost = sum(t.get("cost", 0) for t in route_tolls)
                    route_duration = alternative_route["features"][0]["properties"]["summary"]["duration"]
                    
                    print(f"   ‚úÖ Tentative {attempt}: {len(route_tolls)} p√©ages, {route_cost:.2f}‚Ç¨")
                    
                    # Formater et retourner le premier r√©sultat valide
                    return ResultFormatter.format_route_result(
                        alternative_route, route_cost, route_duration, len(route_tolls)
                    )
                    
                except Exception as e:
                    print(f"   ‚ö†Ô∏è Tentative {attempt} √©chou√©e: {e}")
                    continue
            
            # Aucune tentative n'a r√©ussi
            print(f"   ‚ùå Toutes les tentatives d'√©vitement ont √©chou√©")
            return None
            
        except Exception as e:
            print(f"‚ö†Ô∏è Erreur test √©vitement: {e}")
            return None

    def _calculate_no_toll_route(self, coordinates, veh_class):
        """
        Calcule directement une route sans p√©age.
        Utilise la m√™me m√©thode que les autres strat√©gies.
        
        Args:
            coordinates: Coordonn√©es [d√©part, arriv√©e]
            veh_class: Classe de v√©hicule
            
        Returns:
            dict: Route sans p√©age format√©e ou None si √©chec
        """
        try:
            print("üö´ Calcul d'une route √©vitant tous les p√©ages...")
            
            # Utiliser la m√™me m√©thode que SimpleConstraintStrategy
            toll_free_route = self.route_calculator.get_route_avoid_tollways_with_tracking(coordinates)
            
            if not toll_free_route or 'features' not in toll_free_route:
                print("‚ùå Impossible de calculer une route sans p√©age")
                return None
            
            # Analyser la route pour confirmation
            tolls_dict = self.route_calculator.locate_and_cost_tolls(toll_free_route, veh_class)
            route_tolls = tolls_dict.get("on_route", [])
            route_cost = sum(t.get("cost", 0) for t in route_tolls)
            route_duration = toll_free_route["features"][0]["properties"]["summary"]["duration"]
            toll_count = len(route_tolls)
            
            print(f"‚úÖ Route sans p√©age calcul√©e: {toll_count} p√©ages, {route_cost:.2f}‚Ç¨")
            
            # Formater le r√©sultat
            return ResultFormatter.format_route_result(
                toll_free_route, route_cost, route_duration, toll_count
            )
            
        except Exception as e:
            print(f"‚ùå Erreur calcul route sans p√©age: {e}")
            return None
