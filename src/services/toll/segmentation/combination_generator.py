"""
combination_generator.py
-----------------------

Responsabilit√© : G√©n√©rer les combinaisons de p√©ages √† tester.
Priorise les combinaisons par co√ªt estim√© (moins cher en premier).
"""

from src.services.toll.constants import TollOptimizationConfig as Config
from src.services.toll_cost import add_marginal_cost
from itertools import combinations


class CombinationGenerator:
    """
    G√©n√©rateur de combinaisons de p√©ages optimis√©.
    Responsabilit√© unique : cr√©er et prioriser les combinaisons √† tester.
    """
    
    def __init__(self):
        pass
    
    def generate_combinations(self, departure, arrival, available_tolls, max_tolls, veh_class=Config.DEFAULT_VEH_CLASS):
        """
        G√©n√®re les combinaisons de p√©ages tri√©es par co√ªt estim√©.
        
        Args:
            departure: Coordonn√©es de d√©part [lon, lat]
            arrival: Coordonn√©es d'arriv√©e [lon, lat]  
            available_tolls: Liste des p√©ages disponibles sur/proche de la route
            max_tolls: Nombre maximum de p√©ages autoris√©s
            veh_class: Classe de v√©hicule pour calcul du co√ªt
            
        Returns:            list: Combinaisons tri√©es par co√ªt croissant
                 Format: [{'waypoints': [d√©part, p√©age1, p√©age2, arriv√©e], 'estimated_cost': float}]
        """
        print(f"üéØ G√©n√©ration des combinaisons avec exactement {max_tolls} p√©ages")
        
        if max_tolls == 0:
            # Cas sp√©cial : route directe sans p√©ages
            return [{'waypoints': [departure, arrival], 'estimated_cost': 0.0, 'toll_count': 0, 'tolls': []}]
        
        combinations_list = []
        
        # G√©n√©rer SEULEMENT les combinaisons avec exactement max_tolls p√©ages
        if max_tolls <= len(available_tolls):
            for toll_combination in combinations(available_tolls, max_tolls):
                # Cr√©er les waypoints : d√©part + p√©ages + arriv√©e
                waypoints = [departure] + list(toll_combination) + [arrival]
                
                # Estimer le co√ªt de cette combinaison
                estimated_cost = self._estimate_combination_cost(toll_combination, veh_class)
                
                combinations_list.append({
                    'waypoints': waypoints,
                    'estimated_cost': estimated_cost,
                    'toll_count': max_tolls,
                    'tolls': list(toll_combination)  # Ajouter la liste des p√©ages
                })
        else:
            print(f"‚ö†Ô∏è Impossible de g√©n√©rer des combinaisons avec {max_tolls} p√©ages (seulement {len(available_tolls)} disponibles)")        # Trier par co√ªt croissant (moins cher en premier)
        combinations_list.sort(key=lambda x: x['estimated_cost'])
        
        print(f"‚úÖ {len(combinations_list)} combinaisons g√©n√©r√©es et tri√©es par co√ªt")
        return combinations_list

    def _estimate_combination_cost(self, toll_combination, veh_class):
        """
        Estime le co√ªt total d'une combinaison de p√©ages.
        
        NOUVELLE LOGIQUE :
        - P√©ages ouverts (APRR_O) : co√ªt fixe individuel
        - P√©ages ferm√©s (APRR_F) : co√ªt bas√© sur les segments entre entr√©e/sortie
        - Combinaisons : somme des co√ªts de chaque segment identifi√©
        
        Args:
            toll_combination: Tuple de p√©ages
            veh_class: Classe de v√©hicule            
        Returns:
            float: Co√ªt estim√© total
        """
        total_cost = 0.0
        print(f"    üí∞ Calcul co√ªt pour {len(toll_combination)} p√©ages...")
        
        # R√©cup√©rer les donn√©es de co√ªt
        from src.services.toll_data_cache import toll_data_cache
        edges_df = toll_data_cache.virtual_edges_df
        
        # S√©parer p√©ages ouverts et ferm√©s
        open_tolls = []  # APRR_O
        closed_tolls = []  # APRR_F
        
        for i, toll in enumerate(toll_combination):
            if not isinstance(toll, dict):
                print(f"‚ö†Ô∏è P√©age {i} n'est pas un dictionnaire: {type(toll)} = {toll}")
                total_cost += 2.0  # Co√ªt moyen estim√©
                continue
            
            toll_id = toll.get('id', 'N/A')
            print(f"    üîç P√©age {i+1}/{len(toll_combination)}: ID={toll_id}")
            
            if toll_id.startswith("APRR_O"):
                open_tolls.append((toll_id, toll))
            elif toll_id.startswith("APRR_F"):
                closed_tolls.append((toll_id, toll))
        
        # Calculer co√ªts des p√©ages ouverts (co√ªt fixe)
        for toll_id, toll in open_tolls:
            try:
                cost = edges_df.loc[(toll_id, toll_id)][veh_class]
                print(f"    üí∞ P√©age ouvert {toll_id}: {cost}‚Ç¨")
                total_cost += cost
            except KeyError:
                print(f"    ‚ö†Ô∏è Co√ªt p√©age ouvert {toll_id} non trouv√©, fallback 2.0‚Ç¨")
                total_cost += 2.0
        
        # Calculer co√ªts des p√©ages ferm√©s (segments)
        if len(closed_tolls) >= 2:
            # Si on a plusieurs p√©ages ferm√©s, calculer le co√ªt du segment global
            # Prendre le premier comme entr√©e et le dernier comme sortie
            # TODO: Am√©liorer cette logique si n√©cessaire
            entry_id = closed_tolls[0][0]
            exit_id = closed_tolls[-1][0]
            
            try:
                segment_cost = edges_df.loc[(entry_id, exit_id)][veh_class]
                print(f"    üí∞ Segment ferm√© {entry_id} ‚Üí {exit_id}: {segment_cost}‚Ç¨")
                total_cost += segment_cost
            except KeyError:
                # Si le segment direct n'existe pas, calculer somme des segments interm√©diaires
                segment_cost = 0.0
                for i in range(len(closed_tolls) - 1):
                    from_id = closed_tolls[i][0]
                    to_id = closed_tolls[i + 1][0]
                    try:
                        step_cost = edges_df.loc[(from_id, to_id)][veh_class]
                        segment_cost += step_cost
                        print(f"    üí∞ √âtape {from_id} ‚Üí {to_id}: {step_cost}‚Ç¨")
                    except KeyError:
                        print(f"    ‚ö†Ô∏è Segment {from_id} ‚Üí {to_id} non trouv√©, fallback 1.0‚Ç¨")
                        segment_cost += 1.0
                
                if segment_cost > 0:
                    total_cost += segment_cost
                    print(f"    üí∞ Total segments ferm√©s: {segment_cost}‚Ç¨")
                else:
                    print(f"    ‚ö†Ô∏è Aucun segment ferm√© trouv√©, fallback {len(closed_tolls) * 1.5}‚Ç¨")
                    total_cost += len(closed_tolls) * 1.5
        
        elif len(closed_tolls) == 1:
            # Un seul p√©age ferm√©, consid√©rer comme co√ªt moyen
            toll_id = closed_tolls[0][0]
            print(f"    üí∞ P√©age ferm√© unique {toll_id}: 2.5‚Ç¨ (estimation)")
            total_cost += 2.5
        
        print(f"    üí∞ Co√ªt total estim√©: {total_cost:.2f}‚Ç¨")
        return total_cost

    def generate_valid_combinations(self, departure, arrival, available_tolls, max_tolls, veh_class=Config.DEFAULT_VEH_CLASS):
        """
        G√©n√®re des combinaisons VALIDES de p√©ages selon la logique m√©tier fran√ßaise.
        
        R√àGLES M√âTIER :
        - P√©age ouvert (APRR_O) : Prix fixe, peut √™tre seul
        - P√©ages ferm√©s (APRR_F) : Fonctionnent par paires entr√©e/sortie
        - Combinaisons valides :
          * [APRR_O] (p√©age ouvert seul)
          * [APRR_F_entr√©e, APRR_F_sortie] (segment ferm√©)
          * [APRR_O, APRR_F_entr√©e, APRR_F_sortie] (ouvert + segment)
          * Plusieurs p√©ages ouverts + segments ferm√©s
        
        Args:
            departure: Coordonn√©es de d√©part [lon, lat]
            arrival: Coordonn√©es d'arriv√©e [lon, lat]  
            available_tolls: Liste des p√©ages disponibles
            max_tolls: Nombre maximum de p√©ages par combinaison
            veh_class: Classe de v√©hicule pour estimation du co√ªt
            
        Returns:
            list: Combinaisons valides tri√©es par co√ªt croissant
        """
        print(f"üéØ G√©n√©ration de combinaisons VALIDES avec exactement {max_tolls} p√©ages")
        
        if max_tolls == 0:
            return [{'waypoints': [departure, arrival], 'estimated_cost': 0.0, 'toll_count': 0, 'tolls': []}]
        
        # S√©parer p√©ages ouverts et ferm√©s
        open_tolls = []
        closed_tolls = []
        
        for toll in available_tolls:
            toll_id = toll.get('id', '') if isinstance(toll, dict) else str(toll)
            if toll_id.startswith('APRR_O'):
                open_tolls.append(toll)
            elif toll_id.startswith('APRR_F'):
                closed_tolls.append(toll)
        
        print(f"üîç P√©ages disponibles: {len(open_tolls)} ouverts, {len(closed_tolls)} ferm√©s")
        
        valid_combinations = []
        
        # === 1. COMBINAISONS P√âAGES OUVERTS SEULS ===
        if max_tolls <= len(open_tolls):
            for open_combo in combinations(open_tolls, max_tolls):
                waypoints = [departure] + list(open_combo) + [arrival]
                cost = self._estimate_valid_combination_cost(open_combo, veh_class)
                valid_combinations.append({
                    'waypoints': waypoints,
                    'estimated_cost': cost,
                    'toll_count': max_tolls,
                    'tolls': list(open_combo),
                    'type': 'open_only'
                })
        
        # === 2. COMBINAISONS SEGMENTS FERM√âS SEULS ===
        if max_tolls >= 2 and max_tolls % 2 == 0 and len(closed_tolls) >= max_tolls:
            for closed_combo in combinations(closed_tolls, max_tolls):
                waypoints = [departure] + list(closed_combo) + [arrival]
                cost = self._estimate_valid_combination_cost(closed_combo, veh_class)
                valid_combinations.append({
                    'waypoints': waypoints,
                    'estimated_cost': cost,
                    'toll_count': max_tolls,
                    'tolls': list(closed_combo),
                    'type': 'closed_segments'
                })
        
        # === 3. COMBINAISONS MIXTES (OUVERTS + SEGMENTS FERM√âS) ===
        for num_open in range(1, min(len(open_tolls) + 1, max_tolls)):
            remaining_slots = max_tolls - num_open
            if remaining_slots >= 2 and remaining_slots % 2 == 0 and len(closed_tolls) >= remaining_slots:
                for open_combo in combinations(open_tolls, num_open):
                    for closed_combo in combinations(closed_tolls, remaining_slots):
                        mixed_combo = list(open_combo) + list(closed_combo)
                        waypoints = [departure] + mixed_combo + [arrival]
                        cost = self._estimate_valid_combination_cost(tuple(mixed_combo), veh_class)
                        valid_combinations.append({
                            'waypoints': waypoints,
                            'estimated_cost': cost,
                            'toll_count': max_tolls,
                            'tolls': mixed_combo,
                            'type': 'mixed'
                        })
        
        # Trier par co√ªt croissant
        valid_combinations.sort(key=lambda x: x['estimated_cost'])
        
        print(f"‚úÖ {len(valid_combinations)} combinaisons VALIDES g√©n√©r√©es et tri√©es par co√ªt")
        return valid_combinations
    
    def _estimate_valid_combination_cost(self, toll_combination, veh_class):
        """
        Estime le co√ªt d'une combinaison VALIDE en utilisant la logique m√©tier correcte.
        Utilise la fonction add_marginal_cost qui respecte les r√®gles des p√©ages.
        
        Args:
            toll_combination: Tuple de p√©ages
            veh_class: Classe de v√©hicule            
        Returns:
            float: Co√ªt estim√© total
        """
        if not toll_combination:
            return 0.0
        
        print(f"    üí∞ Calcul co√ªt VALIDE pour {len(toll_combination)} p√©ages...")
        
        # Convertir en liste de dictionnaires pour add_marginal_cost
        tolls_list = []
        for toll in toll_combination:
            if isinstance(toll, dict):
                tolls_list.append(toll.copy())
            else:
                print(f"‚ö†Ô∏è P√©age invalide ignor√©: {toll}")
                continue
        
        if not tolls_list:
            return 0.0
        
        try:
            # Utiliser la logique m√©tier officielle
            from src.services.toll_cost import add_marginal_cost
            tolls_with_cost = add_marginal_cost(tolls_list, veh_class)
            total_cost = sum(t.get('cost', 0) for t in tolls_with_cost)
            
            print(f"    üí∞ Co√ªt total VALIDE: {total_cost:.2f}‚Ç¨")
            return total_cost
            
        except Exception as e:
            print(f"‚ö†Ô∏è Erreur calcul co√ªt valide: {e}")
            # Fallback vers l'ancienne m√©thode si erreur
            return self._estimate_combination_cost(toll_combination, veh_class)
