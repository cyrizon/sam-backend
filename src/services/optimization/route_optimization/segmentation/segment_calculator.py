"""
Segment Calculator
==================

Calcul des segments de route via les appels ORS optimis√©s.
√âTAPE 7 de l'algorithme d'optimisation.
"""

from typing import List, Dict


class SegmentCalculator:
    """
    Calculateur de segments optimis√©s.
    Responsabilit√© : √âTAPE 7 de l'algorithme d'optimisation.
    """
    
    def __init__(self, ors_service):
        """
        Initialise le calculateur avec le service ORS.
        
        Args:
            ors_service: Service ORS pour les calculs de routes
        """
        self.ors = ors_service
    
    def calculate_segments_routes(
        self,
        segments_config: List[Dict],
        creation_result: Dict
    ) -> List[Dict]:
        """
        √âTAPE 7: Calcule les routes pour chaque segment via ORS.
        
        Args:
            segments_config: Configuration des segments √† calculer (depuis segment_creator)
            creation_result: R√©sultat de la cr√©ation de segments (√©tape 6)
            
        Returns:
            Liste des segments calcul√©s avec leurs routes
        """
        print("üõ£Ô∏è √âtape 7: Calcul des routes par segment...")
        
        if not segments_config:
            print("‚ùå Aucun segment √† calculer")
            return []
        
        calculated_segments = []
        
        for i, segment in enumerate(segments_config):
            print(f"   üìç Calcul segment {i+1}/{len(segments_config)}...")
            
            # R√©cup√©rer les coordonn√©es d√©but/fin
            start_point = segment.get('start_point')
            end_point = segment.get('end_point')
            avoid_tolls = segment.get('avoid_tolls', False)
            
            if not start_point or not end_point:
                print(f"   ‚ùå Coordonn√©es manquantes pour segment {i+1}")
                continue
            
            try:
                # Appeler ORS selon le flag p√©age
                if avoid_tolls:
                    # √âviter les p√©ages
                    print(f"     üö´ √âviter p√©ages : {start_point} -> {end_point}")
                    route = self.ors.get_route_avoid_tollways([start_point, end_point])
                else:
                    # Autoriser les p√©ages
                    print(f"     üí∞ Avec p√©ages : {start_point} -> {end_point}")
                    route = self.ors.get_base_route([start_point, end_point])
                
                if route:
                    # Extraire les informations utiles de la r√©ponse ORS
                    segment_result = self._extract_segment_info(route, segment, i, avoid_tolls)
                    calculated_segments.append(segment_result)
                    print(f"     ‚úÖ Segment {i+1} calcul√©")
                else:
                    print(f"     ‚ùå √âchec ORS pour segment {i+1}")
                    
            except Exception as e:
                print(f"     ‚ùå Erreur calcul segment {i+1}: {e}")
        
        print(f"‚úÖ {len(calculated_segments)} segments calcul√©s sur {len(segments_config)}")
        return calculated_segments
    
    def _extract_segment_info(self, ors_response: Dict, segment_config: Dict, index: int, avoid_tolls: bool) -> Dict:
        """
        Extrait les informations utiles de la r√©ponse ORS.
        
        Args:
            ors_response: R√©ponse compl√®te d'ORS
            segment_config: Configuration du segment
            index: Index du segment
            avoid_tolls: Flag √©viter p√©ages
            
        Returns:
            Segment avec informations extraites
        """
        try:
            # Extraire les donn√©es principales du premier feature
            feature = ors_response.get('features', [{}])[0]
            properties = feature.get('properties', {})
            geometry = feature.get('geometry', {})
            
            # Informations de r√©sum√©
            summary = properties.get('summary', {})
            distance = summary.get('distance', 0)  # en m√®tres
            duration = summary.get('duration', 0)  # en secondes
            
            # Informations sur les p√©ages
            extras = properties.get('extras', {})
            tollways_info = extras.get('tollways', {})
            tollways_summary = tollways_info.get('summary', [])
            
            # Coordonn√©es de la g√©om√©trie
            coordinates = geometry.get('coordinates', [])
            
            # Segments d√©taill√©s
            segments = properties.get('segments', [])
            
            return {
                'segment_id': segment_config.get('segment_id', index),
                'segment_type': segment_config.get('segment_type', 'direct'),
                'start_point': segment_config.get('start_point'),
                'end_point': segment_config.get('end_point'),
                'has_tolls': not avoid_tolls,
                'calculation_method': 'avoid_tolls' if avoid_tolls else 'with_tolls',
                
                # Donn√©es extraites d'ORS
                'distance_m': distance,
                'duration_s': duration,
                'distance_km': round(distance / 1000, 2),
                'duration_min': round(duration / 60, 1),
                
                # G√©om√©trie compl√®te
                'geometry': geometry,
                'coordinates': coordinates,
                
                # Informations p√©ages
                'tollways_info': tollways_summary,
                'segments_detail': segments,
                
                # R√©ponse ORS compl√®te (si besoin pour debug)
                'ors_response': ors_response
            }
            
        except Exception as e:
            print(f"     ‚ö†Ô∏è Erreur extraction donn√©es ORS: {e}")
            # Fallback avec donn√©es minimales
            return {
                'segment_id': segment_config.get('segment_id', index),
                'segment_type': segment_config.get('segment_type', 'direct'),
                'start_point': segment_config.get('start_point'),
                'end_point': segment_config.get('end_point'),
                'has_tolls': not avoid_tolls,
                'calculation_method': 'avoid_tolls' if avoid_tolls else 'with_tolls',
                'error': str(e),
                'ors_response': ors_response
            }

