"""
Segment Creator
===============

Cr√©ation des segments de route optimis√©s selon les p√©ages s√©lectionn√©s.
√âTAPE 6 de l'algorithme d'optimisation.
"""

from typing import List, Dict, Tuple


class SegmentCreator:
    """
    Cr√©ateur de segments optimis√©s.
    Responsabilit√© : √âTAPE 6 de l'algorithme d'optimisation.
    """
    
    def __init__(self):
        """Initialise le cr√©ateur de segments."""
        pass
    
    def create_optimized_segments(
        self,
        coordinates: List[List[float]],
        selected_tolls: List,
        identification_result: Dict,
        selection_result: Dict
    ) -> List[Dict]:
        """
        √âTAPE 6: Cr√©e les segments optimis√©s pour le calcul de routes.
        
        Args:
            coordinates: Coordonn√©es [d√©part, arriv√©e]
            selected_tolls: P√©ages s√©lectionn√©s √† utiliser
            identification_result: R√©sultat de l'identification (√©tape 3)
            selection_result: R√©sultat de la s√©lection (√©tape 5)
            
        Returns:
            Liste des segments √† calculer avec points de passage
        """
        print("üèóÔ∏è √âtape 6: Cr√©ation des segments optimis√©s...")
        print(f"   üìä {len(selected_tolls)} p√©ages s√©lectionn√©s")
        
        start_point = coordinates[0]
        end_point = coordinates[-1]
        
        # 1. Pas de p√©ages ‚Üí segment sans p√©age
        if not selected_tolls:
            return self._create_no_toll_segment(start_point, end_point)
        
        # 2. Parcourir selection_result pour cr√©er les segments
        segments_data = selection_result.get('segments', [])
        
        if segments_data:
            # On a des segments d√©finis dans selection_result
            return self._create_segments_from_selection(segments_data)
        else:
            # Fallback : segment simple avec tous les p√©ages
            return self._create_simple_segment_with_tolls(start_point, end_point, selected_tolls)
    
    def _create_no_toll_segment(self, start_point: List[float], end_point: List[float]) -> List[Dict]:
        """Cr√©e un segment simple sans p√©age."""
        print("   üö´ Segment sans p√©age")
        
        return [{
            'segment_id': 0,
            'segment_type': 'no_tolls',
            'start_point': start_point,
            'end_point': end_point,
            'waypoints': [start_point, end_point],
            'avoid_tolls': True,
            'force_tolls': [],
            'optimization_hints': ['avoid_all_tolls']
        }]
    
    def _create_segments_from_selection(self, segments_data: List[Dict]) -> List[Dict]:
        """
        Cr√©e les segments √† partir des donn√©es de selection_result.
        Format attendu : [[D√©part->p√©ageX, avec p√©age], [p√©ageX->sortieX, avec p√©age], [sortieX->arriv√©e, sans p√©age]]
        
        Args:
            segments_data: Donn√©es des segments depuis selection_result
            
        Returns:
            Liste des segments format√©s
        """
        print(f"   ÔøΩ Cr√©ation de {len(segments_data)} segments depuis selection_result")
        
        segments = []
        
        for i, segment_info in enumerate(segments_data):
            # Extraire les coordonn√©es et le flag p√©age
            start_coord = segment_info.get('start_point')
            end_coord = segment_info.get('end_point')
            has_toll = segment_info.get('has_toll', False)
            toll_info = segment_info.get('toll_info', {})
            
            # Cr√©er le segment
            segment = {
                'segment_id': i,
                'segment_type': 'with_tolls' if has_toll else 'no_tolls',
                'start_point': start_coord,
                'end_point': end_coord,
                'waypoints': [start_coord, end_coord],
                'avoid_tolls': not has_toll,
                'force_tolls': [toll_info] if has_toll and toll_info else [],
                'optimization_hints': ['use_tolls'] if has_toll else ['avoid_tolls']
            }
            
            segments.append(segment)
            
            print(f"     Segment {i}: {start_coord} -> {end_coord} ({'avec' if has_toll else 'sans'} p√©age)")
        
        return segments
    
    def _create_simple_segment_with_tolls(
        self, 
        start_point: List[float], 
        end_point: List[float], 
        selected_tolls: List
    ) -> List[Dict]:
        """
        Cr√©e un segment simple avec tous les p√©ages s√©lectionn√©s.
        Fallback quand on n'a pas de segments d√©finis.
        
        Args:
            start_point: Point de d√©part
            end_point: Point d'arriv√©e
            selected_tolls: P√©ages s√©lectionn√©s
            
        Returns:
            Segment unique avec tous les p√©ages
        """
        print("   üìç Segment simple avec tous les p√©ages")
        
        return [{
            'segment_id': 0,
            'segment_type': 'simple_with_tolls',
            'start_point': start_point,
            'end_point': end_point,
            'waypoints': [start_point, end_point],
            'avoid_tolls': False,
            'force_tolls': selected_tolls,
            'optimization_hints': ['use_selected_tolls']
        }]
