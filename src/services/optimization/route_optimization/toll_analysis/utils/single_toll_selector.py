"""
Single Toll Selector
===================

Responsabilit√© : S√©lection sp√©ciale pour le cas d'un seul p√©age.
"""

from typing import List, Dict


class SingleTollSelector:
    """S√©lecteur sp√©cialis√© pour un seul p√©age."""
    
    @staticmethod
    def select_single_open_toll(tolls_on_route: List) -> Dict:
        """
        S√©lectionne un seul p√©age ouvert.
        
        Args:
            tolls_on_route: P√©ages disponibles sur la route
            
        Returns:
            R√©sultat de s√©lection avec un p√©age ouvert ou √©chec
        """
        print("üéØ Cas sp√©cial : 1 p√©age demand√©")
        
        # Chercher p√©ages √† syst√®me ouvert
        open_tolls = []
        for toll in tolls_on_route:
            if SingleTollSelector._is_open_system(toll):
                open_tolls.append(toll)
        
        if open_tolls:
            selected_toll = open_tolls[0]  # Premier p√©age ouvert
            toll_name = getattr(selected_toll, 'osm_name', 'Inconnu')
            print(f"‚úÖ P√©age ouvert s√©lectionn√© : {toll_name}")
            
            return {
                'selected_tolls': [selected_toll],
                'selection_method': 'count_based',
                'selection_strategy': 'single_open_toll',
                'target_count': 1,
                'achieved_count': 1,
                'selection_valid': True,
                'updated_segments_mapping': {}
            }
        
        # Aucun p√©age ouvert : retourner route sans p√©age
        print("‚ö†Ô∏è Aucun p√©age ouvert trouv√© ‚Üí Route sans p√©age")
        return {
            'selected_tolls': [],
            'selection_method': 'count_based',
            'selection_strategy': 'empty',
            'target_count': 1,
            'achieved_count': 0,
            'selection_valid': False,
            'failure_reason': 'no_open_system',
            'updated_segments_mapping': {}
        }
    
    @staticmethod
    def _is_open_system(toll) -> bool:
        """V√©rifie si le p√©age est √† syst√®me ouvert."""
        # MatchedToll model
        if hasattr(toll, 'is_open_system'):
            return toll.is_open_system
        elif hasattr(toll, 'csv_role'):
            return getattr(toll, 'csv_role', '') == 'O'
        
        # TollStation model  
        elif hasattr(toll, 'toll_type'):
            return getattr(toll, 'toll_type', '').lower() == 'open'
        
        # Fallback : examiner le nom pour indicateurs
        name = getattr(toll, 'osm_name', None) or getattr(toll, 'name', '') or ''
        name = name.lower()
        return 'open' in name or 'ouvert' in name
