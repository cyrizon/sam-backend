"""
Cache Accessor V2
=================

Acc√®s unifi√© au syst√®me de cache V2 pour r√©cup√©rer p√©ages, links complets et donn√©es motorway.
Utilise le nouveau cache V2 avec liens motorway et association automatique des p√©ages.
"""

from typing import List, Optional, Dict, Any
from src.cache.v2.managers.v2_cache_manager_with_linking import V2CacheManagerWithLinking
from src.cache.v2.models.complete_motorway_link import CompleteMotorwayLink
from src.cache.v2.models.toll_booth_station import TollBoothStation


class CacheAccessor:
    """Accesseur unifi√© au cache V2 avec liens motorway et p√©ages associ√©s."""
    
    _cache_manager: Optional[V2CacheManagerWithLinking] = None
    _initialized: bool = False
    
    @classmethod
    def _ensure_initialized(cls) -> bool:
        """Assure que le cache V2 est initialis√©."""
        if cls._initialized and cls._cache_manager:
            return True
        
        try:
            print("üöÄ Initialisation du cache V2 pour route optimization...")
            cls._cache_manager = V2CacheManagerWithLinking("data")
            success = cls._cache_manager.load_all_including_motorway_linking()
            
            if success:
                cls._initialized = True
                print("‚úÖ Cache V2 initialis√© avec succ√®s")
                return True
            else:
                print("‚ùå √âchec d'initialisation du cache V2")
                return False
                
        except Exception as e:
            print(f"‚ùå Erreur initialisation cache V2: {e}")
            return False
    
    @classmethod
    def get_toll_stations(cls) -> List[TollBoothStation]:
        """
        R√©cup√®re toutes les stations de p√©age du cache V2.
        
        Returns:
            Liste des stations de p√©age avec types (ouvert/ferm√©)
        """
        if not cls._ensure_initialized():
            return []
        
        return cls._cache_manager.toll_booths or []
    
    @classmethod
    def get_complete_motorway_links(cls) -> List[CompleteMotorwayLink]:
        """
        R√©cup√®re tous les liens complets d'autoroute du cache V2.
        
        Returns:
            Liste des liens complets avec segments cha√Æn√©s
        """
        if not cls._ensure_initialized():
            return []
        
        return cls._cache_manager.get_complete_motorway_links()
    
    @classmethod
    def get_links_with_tolls(cls) -> List[CompleteMotorwayLink]:
        """
        R√©cup√®re uniquement les liens motorway avec p√©ages associ√©s.
        
        Returns:
            Liste des liens avec p√©ages (distance < 2m)
        """
        if not cls._ensure_initialized():
            return []
        
        return cls._cache_manager.get_links_with_tolls()
    
    @classmethod
    def get_entry_links(cls) -> List[CompleteMotorwayLink]:
        """
        R√©cup√®re tous les liens d'entr√©e d'autoroute.
        
        Returns:
            Liste des liens d'entr√©e
        """
        if not cls._ensure_initialized():
            return []
        
        return cls._cache_manager.get_entry_links()
    
    @classmethod
    def get_exit_links(cls) -> List[CompleteMotorwayLink]:
        """
        R√©cup√®re tous les liens de sortie d'autoroute.
        
        Returns:
            Liste des liens de sortie
        """
        if not cls._ensure_initialized():
            return []
        
        return cls._cache_manager.get_exit_links()
    
    @classmethod
    def get_links_by_toll_type(cls, toll_type: str) -> List[CompleteMotorwayLink]:
        """
        R√©cup√®re les liens filtr√©s par type de p√©age.
        
        Args:
            toll_type: "O" pour ouvert, "F" pour ferm√©
            
        Returns:
            Liste des liens correspondants
        """
        if not cls._ensure_initialized():
            return []
        
        return cls._cache_manager.get_links_by_toll_type(toll_type)
    
    @classmethod
    def get_links_by_operator(cls, operator: str) -> List[CompleteMotorwayLink]:
        """
        R√©cup√®re les liens filtr√©s par op√©rateur de p√©age.
        
        Args:
            operator: Nom de l'op√©rateur (ex: "ASF", "APRR")
            
        Returns:
            Liste des liens correspondants
        """
        if not cls._ensure_initialized():
            return []
        
        return cls._cache_manager.get_links_by_operator(operator)
    
    @classmethod
    def calculate_toll_cost(
        cls, 
        toll_from: TollBoothStation, 
        toll_to: TollBoothStation, 
        vehicle_category: str = "1",
        distance_km: Optional[float] = None
    ) -> Optional[float]:
        """
        Calcule le co√ªt entre deux p√©ages en utilisant le cache V2.
        
        Args:
            toll_from: Station de p√©age de d√©part
            toll_to: Station de p√©age d'arriv√©e  
            vehicle_category: Cat√©gorie du v√©hicule (1-5)
            distance_km: Distance en km (calcul√©e automatiquement si non fournie)
            
        Returns:
            Co√ªt en euros ou None si impossible
        """
        if not cls._ensure_initialized():
            return None
        
        try:
            # Utiliser la m√©thode calculate_toll_cost du cache manager
            result = cls._cache_manager.calculate_toll_cost(
                from_id=toll_from.osm_id,
                to_id=toll_to.osm_id,
                vehicle_class=vehicle_category,
                distance_km=distance_km
            )
            
            if result and 'cost' in result:
                return round(result['cost'], 2)
            else:
                print(f"‚ö†Ô∏è Calcul de co√ªt impossible entre {toll_from.osm_id} et {toll_to.osm_id}")
                return None
            
        except Exception as e:
            print(f"‚ùå Erreur calcul co√ªt p√©age: {e}")
            return None
    
    @classmethod
    def calculate_total_cost(
        cls, 
        toll_objects: List, 
        vehicle_category: str = "1"
    ) -> float:
        """
        Calcule le co√ªt total d'une liste de p√©ages par couples cons√©cutifs.
        
        Args:
            toll_objects: Liste d'objets TollBoothStation ou CompleteMotorwayLink
            vehicle_category: Cat√©gorie du v√©hicule (1-5)
            
        Returns:
            Co√ªt total en euros
        """
        if not toll_objects or len(toll_objects) < 2:
            return 0.0
        
        # Filtrer pour ne garder que les TollBoothStation
        toll_stations = []
        for obj in toll_objects:
            if hasattr(obj, 'osm_id') and hasattr(obj, 'name'):
                # C'est un TollBoothStation
                toll_stations.append(obj)
            elif hasattr(obj, 'associated_toll'):
                # C'est un CompleteMotorwayLink avec p√©age associ√©
                toll_stations.append(obj.associated_toll)
        
        if len(toll_stations) < 2:
            return 0.0
        
        # Calcul par couples cons√©cutifs
        total_cost = 0.0
        for i in range(len(toll_stations) - 1):
            toll_from = toll_stations[i]
            toll_to = toll_stations[i + 1]
            
            cost = cls.calculate_toll_cost(toll_from, toll_to, vehicle_category)
            if cost is not None:
                total_cost += cost
        
        return round(total_cost, 2)

    @classmethod
    def is_cache_available(cls) -> bool:
        """
        V√©rifie si le cache V2 est disponible et charg√©.
        
        Returns:
            True si le cache est disponible, False sinon
        """
        return cls._initialized and cls._cache_manager is not None
    
    @classmethod
    def get_cache_stats(cls) -> Dict[str, Any]:
        """
        R√©cup√®re les statistiques compl√®tes du cache V2.
        
        Returns:
            Dictionnaire avec les statistiques d√©taill√©es
        """
        if not cls._ensure_initialized():
            return {
                'available': False,
                'toll_stations': 0,
                'complete_links': 0,
                'links_with_tolls': 0,
                'entry_links': 0,
                'exit_links': 0
            }
        
        links_with_tolls = cls.get_links_with_tolls()
        entry_links = cls.get_entry_links()
        exit_links = cls.get_exit_links()
        
        # Statistiques d√©taill√©es par op√©rateur
        operators_stats = {}
        for link in links_with_tolls:
            op = link.associated_toll.operator
            operators_stats[op] = operators_stats.get(op, 0) + 1
        
        # Statistiques par type de p√©age
        open_tolls = len(cls.get_links_by_toll_type("O"))
        closed_tolls = len(cls.get_links_by_toll_type("F"))
        
        return {
            'available': True,
            'toll_stations': len(cls.get_toll_stations()),
            'complete_links': len(cls.get_complete_motorway_links()),
            'links_with_tolls': len(links_with_tolls),
            'entry_links': len(entry_links),
            'exit_links': len(exit_links),
            'toll_types': {
                'open_tolls': open_tolls,
                'closed_tolls': closed_tolls
            },
            'operators': operators_stats,
            'cache_efficiency': cls._cache_manager.get_linking_statistics() if cls._cache_manager else None
        }
    
    @classmethod
    def force_rebuild_cache(cls) -> bool:
        """
        Force la reconstruction du cache (utile pour tests).
        
        Returns:
            True si la reconstruction a r√©ussi
        """
        try:
            if cls._cache_manager:
                success = cls._cache_manager.force_rebuild_links()
                if success:
                    print("‚úÖ Cache V2 reconstruit avec succ√®s")
                return success
            return False
        except Exception as e:
            print(f"‚ùå Erreur reconstruction cache: {e}")
            return False
