"""
feasibility_checker.py
---------------------

V√©rificateur de faisabilit√© budg√©taire pr√©coce.
Responsabilit√© unique : d√©terminer si un budget est r√©alisable avant calculs co√ªteux.
"""

from src.services.budget.route_calculator import BudgetRouteCalculator
from src.services.budget.constants import BudgetOptimizationConfig as Config


class BudgetFeasibilityChecker:
    """V√©rificateur de faisabilit√© budg√©taire pour √©viter les calculs inutiles."""
    
    def __init__(self, ors_service):
        self.ors = ors_service
    def should_check_feasibility(self, max_price, max_price_percent):
        """D√©termine si on doit faire une v√©rification de faisabilit√© budg√©taire."""
        # Faire la v√©rification pour TOUS les budgets absolus
        # Ne PAS faire pour les budgets en pourcentage car on ne conna√Æt pas encore le co√ªt de base
        return (max_price is not None and max_price > 0)
    
    def check_budget_feasibility_early(self, coordinates, max_price, max_price_percent, veh_class):
        """
        V√©rification pr√©coce : le budget demand√© est-il r√©alisable par rapport aux p√©ages disponibles ?
        
        Returns:
            bool: True si fallback n√©cessaire (budget impossible), False sinon
        """
        try:
            print("üîç V√©rification pr√©coce de faisabilit√© budg√©taire...")
            
            # Calculer la route de base pour analyser les p√©ages
            route_calculator = BudgetRouteCalculator(self.ors)
            base_route = route_calculator.get_base_route_with_tracking(coordinates)
            
            if not base_route:
                print("‚ö†Ô∏è  Impossible de calculer la route de base pour la v√©rification")
                return False  # En cas d'√©chec, ne pas d√©clencher le fallback pr√©coce
            
            # Localiser et co√ªter tous les p√©ages sur et autour de la route
            tolls_dict = route_calculator.locate_and_cost_tolls(base_route, veh_class)
            all_tolls = tolls_dict["on_route"] + tolls_dict["nearby"]
            
            if not all_tolls:
                print("üìç Aucun p√©age trouv√© - Budget probablement r√©alisable")
                return False  # Pas de p√©ages, budget potentiellement r√©alisable
            
            # Calculer le co√ªt minimal possible
            min_cost = self._calculate_minimum_possible_cost(all_tolls)
            # D√©terminer le budget effectif selon le type de contrainte
            if max_price is not None:
                budget_limit = max_price
                budget_type = "absolu"
            else:
                # Pour le pourcentage, calculer le co√ªt de base
                base_cost = sum(t.get("cost", 0) for t in tolls_dict["on_route"])
                budget_limit = base_cost * max_price_percent
                budget_type = "pourcentage"
            
            # Comparaison budget vs co√ªt minimal
            if budget_limit < min_cost:
                print(f"üö´ Budget {budget_type} ({budget_limit:.2f}‚Ç¨) < Co√ªt minimal possible ({min_cost:.2f}‚Ç¨)")
                print("‚Üí Budget impossible √† respecter - Fallback imm√©diat justifi√©")
                return True  # D√©clencher le fallback pr√©coce
            else:
                print(f"‚úÖ Budget {budget_type} ({budget_limit:.2f}‚Ç¨) >= Co√ªt minimal possible ({min_cost:.2f}‚Ç¨)")
                print("‚Üí Budget potentiellement r√©alisable - Poursuite avec les strat√©gies")
                return False  # Continuer avec les strat√©gies normales
                
        except Exception as e:
            print(f"‚ö†Ô∏è  Erreur lors de la v√©rification pr√©coce: {e}")
            return False  # En cas d'erreur, ne pas d√©clencher le fallback pr√©coce
    
    def check_percentage_budget_feasibility(self, base_cost, max_price_percent, tolls_dict):
        """
        V√©rification de faisabilit√© sp√©cifique aux budgets en pourcentage.
        Appel√©e APR√àS le calcul de la route de base.
        
        Args:
            base_cost: Co√ªt de la route de base en euros
            max_price_percent: Pourcentage de budget demand√© (0.4 = 40%)
            tolls_dict: Dictionnaire des p√©ages trouv√©s {"on_route": [...], "nearby": [...]}
            
        Returns:
            bool: True si budget impossible (d√©clencher fallback), False sinon
        """
        try:
            print("üîç V√©rification de faisabilit√© pour budget pourcentage...")
            
            # Calculer le budget effectif en euros
            budget_limit = base_cost * max_price_percent
            print(f"üí∞ Budget effectif: {budget_limit:.2f}‚Ç¨ ({max_price_percent*100:.1f}% de {base_cost:.2f}‚Ç¨)")
            
            # R√©cup√©rer tous les p√©ages (sur route + proximit√©)
            all_tolls = tolls_dict["on_route"] + tolls_dict["nearby"]
            
            if not all_tolls:
                print("üìç Aucun p√©age trouv√© - Budget probablement r√©alisable")
                return False
            
            # Calculer le co√ªt minimal possible
            min_cost = self._calculate_minimum_possible_cost(all_tolls)
            print(f"üí° Co√ªt minimal possible: {min_cost:.2f}‚Ç¨")
            
            # V√©rification de faisabilit√©
            if budget_limit < min_cost:
                print(f"üö´ Budget pourcentage ({budget_limit:.2f}‚Ç¨) < Co√ªt minimal possible ({min_cost:.2f}‚Ç¨)")
                print("‚Üí Budget impossible √† respecter - Fallback justifi√©")
                return True  # Budget impossible, d√©clencher fallback
            else:
                print(f"‚úÖ Budget pourcentage ({budget_limit:.2f}‚Ç¨) >= Co√ªt minimal possible ({min_cost:.2f}‚Ç¨)")
                print("‚Üí Budget potentiellement r√©alisable, optimisation justifi√©e")
                return False  # Budget possible, continuer optimisation
                
        except Exception as e:
            print(f"‚ö†Ô∏è  Erreur lors de la v√©rification de faisabilit√© pourcentage: {e}")
            return False  # En cas d'erreur, ne pas d√©clencher fallback pr√©coce

    def _calculate_minimum_possible_cost(self, all_tolls):
        """
        Calcule le co√ªt minimal possible parmi tous les p√©ages disponibles.
        
        Returns:
            float: Le co√ªt du p√©age ouvert le moins cher ou 0 si route sans p√©age possible
        """
        from src.utils.route_utils import is_toll_open_system
        
        if not all_tolls:
            return 0
        
        # Filtrer les p√©ages ouverts (co√ªt fixe)
        open_tolls = [toll for toll in all_tolls if is_toll_open_system(toll["id"])]
        
        if open_tolls:
            # Trouver le p√©age ouvert le moins cher
            min_open_cost = min(toll.get("cost", float('inf')) for toll in open_tolls)
            print(f"üí∞ P√©age ouvert le moins cher: {min_open_cost:.2f}‚Ç¨")
            return min_open_cost
        else:
            # Si pas de p√©ages ouverts, prendre le p√©age ferm√© le moins cher
            min_closed_cost = min(toll.get("cost", float('inf')) for toll in all_tolls)
            print(f"üí∞ P√©age ferm√© le moins cher: {min_closed_cost:.2f}‚Ç¨")
            return min_closed_cost
