#!/usr/bin/env python3
"""
Analyse des performances SAM
============================

Script d'exemple pour analyser les logs et sessions de performance du backend SAM.
Utilise les donn√©es g√©n√©r√©es par le PerformanceTracker.
"""

import json
import glob
from pathlib import Path
from datetime import datetime
from typing import Dict, List, Any


def analyze_daily_performance(log_dir: str = "benchmark/logs"):
    """
    Analyse les performances quotidiennes du syst√®me SAM.
    
    Args:
        log_dir: R√©pertoire contenant les logs de performance
    """
    log_path = Path(log_dir)
    
    # Trouver tous les fichiers de session JSON
    session_files = list(log_path.glob("session_route_*.json"))
    
    if not session_files:
        print("‚ùå Aucune session trouv√©e")
        return
    
    print(f"üìä Analyse de {len(session_files)} sessions d'optimisation")
    print("=" * 60)
    
    # Statistiques globales
    total_sessions = len(session_files)
    total_duration = 0
    total_api_calls = 0
    error_count = 0
    
    # Statistiques par op√©ration
    operation_stats = {}
    api_call_stats = {}
    
    # Analyser chaque session
    for session_file in session_files:
        try:
            with open(session_file, 'r', encoding='utf-8') as f:
                session = json.load(f)
            
            # Statistiques globales
            total_duration += session.get('total_duration_ms', 0)
            session_api_calls = sum(session.get('api_calls', {}).values())
            total_api_calls += session_api_calls
            error_count += len(session.get('errors', []))
            
            # Analyser les m√©triques
            for metric in session.get('metrics', []):
                op = metric['operation']
                duration = metric['duration_ms']
                
                if op not in operation_stats:
                    operation_stats[op] = {
                        'count': 0,
                        'total_duration': 0,
                        'max_duration': 0,
                        'min_duration': float('inf')
                    }
                
                operation_stats[op]['count'] += 1
                operation_stats[op]['total_duration'] += duration
                operation_stats[op]['max_duration'] = max(operation_stats[op]['max_duration'], duration)
                operation_stats[op]['min_duration'] = min(operation_stats[op]['min_duration'], duration)
            
            # Analyser les appels API
            for api, count in session.get('api_calls', {}).items():
                api_call_stats[api] = api_call_stats.get(api, 0) + count
                
        except Exception as e:
            print(f"‚ö†Ô∏è Erreur lors de l'analyse de {session_file.name}: {e}")
            continue
    
    # Afficher les r√©sultats
    print(f"üöÄ Sessions totales: {total_sessions}")
    print(f"‚è±Ô∏è Temps total: {total_duration/1000:.1f}s")
    print(f"üìû Appels API totaux: {total_api_calls}")
    print(f"‚ùå Erreurs totales: {error_count}")
    print(f"üìà Temps moyen par session: {total_duration/total_sessions/1000:.1f}s")
    print(f"üìä API calls par session: {total_api_calls/total_sessions:.1f}")
    
    print("\nüîç TOP 10 - Op√©rations les plus chronophages:")
    print("-" * 50)
    
    # Trier par dur√©e totale
    sorted_ops = sorted(
        operation_stats.items(), 
        key=lambda x: x[1]['total_duration'], 
        reverse=True
    )
    
    for i, (op, stats) in enumerate(sorted_ops[:10], 1):
        avg_duration = stats['total_duration'] / stats['count']
        percentage = (stats['total_duration'] / total_duration * 100)
        
        print(f"{i:2d}. {op}")
        print(f"    üîÑ {stats['count']}x ex√©cutions")
        print(f"    ‚è±Ô∏è {stats['total_duration']:.0f}ms total ({percentage:.1f}%)")
        print(f"    üìä {avg_duration:.1f}ms moyenne")
        print(f"    üìà {stats['min_duration']:.1f}ms ‚Üí {stats['max_duration']:.1f}ms")
        print()
    
    print("üìû R√©partition des appels API:")
    print("-" * 30)
    
    for api, count in sorted(api_call_stats.items(), key=lambda x: x[1], reverse=True):
        percentage = (count / total_api_calls * 100) if total_api_calls > 0 else 0
        print(f"  {api}: {count} ({percentage:.1f}%)")
    
    # Recommandations
    print(f"\nüí° Recommandations:")
    print("-" * 20)
    
    avg_session_time = total_duration / total_sessions if total_sessions > 0 else 0
    
    if avg_session_time > 5000:  # 5 secondes
        print("  ‚ö†Ô∏è Temps d'optimisation √©lev√© - consid√©rer l'optimisation des algorithmes")
    
    if total_api_calls / total_sessions > 10:
        print("  üìû Nombre d'appels API √©lev√© - consid√©rer la mise en cache")
    
    if error_count > 0:
        print(f"  ‚ùå {error_count} erreurs d√©tect√©es - v√©rifier les logs d√©taill√©s")
    
    # Identifier les op√©rations les plus lentes
    slowest_op = max(operation_stats.items(), key=lambda x: x[1]['max_duration'])
    if slowest_op[1]['max_duration'] > 10000:  # 10 secondes
        print(f"  üêå Op√©ration tr√®s lente d√©tect√©e: {slowest_op[0]} ({slowest_op[1]['max_duration']:.0f}ms)")


def analyze_specific_session(session_file: str):
    """
    Analyse d√©taill√©e d'une session sp√©cifique.
    
    Args:
        session_file: Chemin vers le fichier JSON de session
    """
    try:
        with open(session_file, 'r', encoding='utf-8') as f:
            session = json.load(f)
    except Exception as e:
        print(f"‚ùå Erreur lors du chargement de {session_file}: {e}")
        return
    
    print(f"üîç Analyse d√©taill√©e - {session['session_id']}")
    print("=" * 60)
    
    # Informations g√©n√©rales
    print(f"üìç Route: {session['origin']} ‚Üí {session['destination']}")
    print(f"üìè Distance: {session['route_distance_km']:.1f} km")
    print(f"‚è±Ô∏è Dur√©e totale: {session['total_duration_ms']:.0f}ms")
    print(f"üîÑ Op√©rations: {len(session['metrics'])}")
    print(f"üìû Appels API: {sum(session['api_calls'].values())}")
    print(f"‚ùå Erreurs: {len(session.get('errors', []))}")
    
    # Timeline des op√©rations
    print(f"\nüìÖ Timeline des op√©rations:")
    print("-" * 40)
    
    start_time = datetime.fromisoformat(session['start_time'])
    
    for i, metric in enumerate(session['metrics'], 1):
        op_time = datetime.fromisoformat(metric['timestamp'])
        elapsed = (op_time - start_time).total_seconds()
        
        print(f"{i:2d}. +{elapsed:6.2f}s | {metric['operation']:25} | {metric['duration_ms']:8.1f}ms")
    
    # Appels API
    if session['api_calls']:
        print(f"\nüìû D√©tail des appels API:")
        print("-" * 25)
        for api, count in session['api_calls'].items():
            print(f"  {api}: {count}x")
    
    # Erreurs
    if session.get('errors'):
        print(f"\n‚ùå Erreurs rencontr√©es:")
        print("-" * 20)
        for error in session['errors']:
            print(f"  ‚Ä¢ {error}")
    
    # R√©sultat d'optimisation
    if session.get('optimization_result'):
        result = session['optimization_result']
        print(f"\nüéØ R√©sultat d'optimisation:")
        print("-" * 25)
        print(f"  Statut: {result.get('status', 'N/A')}")
        
        if 'fastest' in result:
            fastest = result['fastest']
            print(f"  Route rapide: {fastest.get('duration', 0)/3600:.1f}h, {fastest.get('cost', 0):.2f}‚Ç¨")
        
        if 'cheapest' in result:
            cheapest = result['cheapest']
            print(f"  Route √©conomique: {cheapest.get('duration', 0)/3600:.1f}h, {cheapest.get('cost', 0):.2f}‚Ç¨")


if __name__ == "__main__":
    import sys
    
    if len(sys.argv) > 1:
        # Analyser une session sp√©cifique
        session_file = sys.argv[1]
        analyze_specific_session(session_file)
    else:
        # Analyse globale
        analyze_daily_performance()
