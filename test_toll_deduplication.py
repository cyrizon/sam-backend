"""
Test de d√©duplication des p√©ages
==============================

Test sp√©cifique pour valider la logique de d√©duplication bas√©e sur la proximit√©
et la similarit√© s√©mantique.
"""

import sys
import os
sys.path.append(os.path.abspath('.'))

from src.services.toll.route_optimization.toll_analysis.core_identifier import CoreTollIdentifier


class MockToll:
    """Mock toll pour les tests."""
    
    def __init__(self, osm_id, nom, operator, autoroute, lat, lon, is_open_toll=False):
        self.osm_id = osm_id
        self.nom = nom
        self.operator = operator
        self.autoroute = autoroute
        self.latitude = lat
        self.longitude = lon
        self.is_open_toll = is_open_toll
    
    def get_coordinates(self):
        return [self.longitude, self.latitude]


def test_toll_deduplication():
    """Test de d√©duplication des p√©ages."""
    print("üß™ Test de d√©duplication des p√©ages")
    
    identifier = CoreTollIdentifier()
    
    # Cr√©er des p√©ages de test avec des doublons
    toll1 = MockToll(
        osm_id=123456,
        nom="P√©age de Paris",
        operator="APRR",
        autoroute="A6",
        lat=48.8566,
        lon=2.3522,
        is_open_toll=False
    )
    
    # Doublon tr√®s proche (m√™me lieu physique)
    toll2 = MockToll(
        osm_id=123457,
        nom="P√©age de Paris",
        operator="APRR", 
        autoroute="A6",
        lat=48.8566001,  # Diff√©rence de ~0.1m
        lon=2.3522001,
        is_open_toll=False
    )
    
    # P√©age diff√©rent (plus loin)
    toll3 = MockToll(
        osm_id=123458,
        nom="P√©age de Lyon",
        operator="APRR",
        autoroute="A6",
        lat=48.8570,  # Diff√©rence de ~400m
        lon=2.3530,
        is_open_toll=False
    )
    
    # Cr√©er des donn√©es de p√©ages format√©es
    toll_data_list = [
        {
            'toll': toll1,
            'coordinates': toll1.get_coordinates(),
            'min_distance_m': 10.0,
            'is_on_route': True,
            'toll_type': 'ferm√©',
            'operator': 'APRR'
        },
        {
            'toll': toll2,
            'coordinates': toll2.get_coordinates(),
            'min_distance_m': 12.0,
            'is_on_route': True,
            'toll_type': 'ferm√©',
            'operator': 'APRR'
        },
        {
            'toll': toll3,
            'coordinates': toll3.get_coordinates(),
            'min_distance_m': 15.0,
            'is_on_route': True,
            'toll_type': 'ferm√©',
            'operator': 'APRR'
        }
    ]
    
    print(f"üìä P√©ages avant d√©duplication : {len(toll_data_list)}")
    
    # Test de d√©duplication
    deduplicated = identifier._deduplicate_toll_list(toll_data_list)
    
    print(f"üìä P√©ages apr√®s d√©duplication : {len(deduplicated)}")
    
    # V√©rifications
    assert len(deduplicated) == 2, f"Attendu 2 p√©ages, obtenu {len(deduplicated)}"
    
    # V√©rifier que le meilleur candidat a √©t√© conserv√© (distance minimale)
    paris_tolls = [t for t in deduplicated if "Paris" in t['toll'].nom]
    assert len(paris_tolls) == 1, "Un seul p√©age de Paris devrait rester"
    assert paris_tolls[0]['min_distance_m'] == 10.0, "Le p√©age avec la distance minimale devrait √™tre conserv√©"
    
    print("‚úÖ Test de d√©duplication r√©ussi")


def test_distance_calculation():
    """Test du calcul de distance entre points."""
    print("\nüß™ Test de calcul de distance")
    
    identifier = CoreTollIdentifier()
    
    # Points tr√®s proches (m√™me lieu)
    coords1 = [2.3522, 48.8566]
    coords2 = [2.3522001, 48.8566001]
    
    distance = identifier._calculate_distance_between_points(coords1, coords2)
    print(f"üìè Distance entre points tr√®s proches : {distance:.2f}m")
    
    assert distance < 1.0, f"Distance attendue < 1m, obtenue {distance:.2f}m"
    
    # Points plus √©loign√©s
    coords3 = [2.3530, 48.8570]
    distance2 = identifier._calculate_distance_between_points(coords1, coords3)
    print(f"üìè Distance entre points √©loign√©s : {distance2:.2f}m")
    
    assert distance2 > 1.0, f"Distance attendue > 1m, obtenue {distance2:.2f}m"
    
    print("‚úÖ Test de calcul de distance r√©ussi")


def test_semantic_similarity():
    """Test de similarit√© s√©mantique."""
    print("\nüß™ Test de similarit√© s√©mantique")
    
    identifier = CoreTollIdentifier()
    
    # P√©ages similaires
    toll1 = MockToll(123456, "P√©age de Paris", "APRR", "A6", 48.8566, 2.3522)
    toll2 = MockToll(123457, "P√©age de Paris", "APRR", "A6", 48.8566, 2.3522)
    
    similar = identifier._are_semantically_similar(toll1, toll2)
    assert similar, "Les p√©ages identiques devraient √™tre similaires"
    
    # P√©ages diff√©rents (op√©rateurs diff√©rents)
    toll3 = MockToll(123458, "P√©age de Paris", "SANEF", "A6", 48.8566, 2.3522)
    not_similar = identifier._are_semantically_similar(toll1, toll3)
    assert not not_similar, "Les p√©ages avec op√©rateurs diff√©rents ne devraient pas √™tre similaires"
    
    # P√©ages diff√©rents (autoroutes diff√©rentes)
    toll4 = MockToll(123459, "P√©age de Paris", "APRR", "A1", 48.8566, 2.3522)
    not_similar2 = identifier._are_semantically_similar(toll1, toll4)
    assert not not_similar2, "Les p√©ages sur autoroutes diff√©rentes ne devraient pas √™tre similaires"
    
    print("‚úÖ Test de similarit√© s√©mantique r√©ussi")


def test_best_candidate_selection():
    """Test de s√©lection du meilleur candidat."""
    print("\nüß™ Test de s√©lection du meilleur candidat")
    
    identifier = CoreTollIdentifier()
    
    # Candidats avec diff√©rentes distances et compl√©tudes
    toll1 = MockToll(123456, "P√©age", "APRR", "A6", 48.8566, 2.3522)
    toll2 = MockToll(123457, "P√©age de Paris Centre", "APRR", "A6", 48.8566, 2.3522)
    toll3 = MockToll(123458, "", "", "", 48.8566, 2.3522)
    
    candidates = [
        {
            'toll': toll1,
            'coordinates': toll1.get_coordinates(),
            'min_distance_m': 15.0,
            'is_on_route': True,
            'toll_type': 'ferm√©',
            'operator': 'APRR'
        },
        {
            'toll': toll2,
            'coordinates': toll2.get_coordinates(),
            'min_distance_m': 10.0,  # Distance plus faible
            'is_on_route': True,
            'toll_type': 'ferm√©',
            'operator': 'APRR'
        },
        {
            'toll': toll3,
            'coordinates': toll3.get_coordinates(),
            'min_distance_m': 8.0,  # Distance encore plus faible mais infos incompl√®tes
            'is_on_route': True,
            'toll_type': 'ferm√©',
            'operator': 'Inconnu'
        }
    ]
    
    best = identifier._select_best_toll_candidate(candidates)
    
    # Le candidat avec la distance minimale devrait √™tre s√©lectionn√©
    assert best['min_distance_m'] == 8.0, "Le candidat avec la distance minimale devrait √™tre s√©lectionn√©"
    assert best['toll'].osm_id == 123458, "Le bon candidat devrait √™tre s√©lectionn√©"
    
    print("‚úÖ Test de s√©lection du meilleur candidat r√©ussi")


if __name__ == "__main__":
    print("üöÄ D√©marrage des tests de d√©duplication des p√©ages\n")
    
    try:
        test_distance_calculation()
        test_semantic_similarity()
        test_best_candidate_selection()
        test_toll_deduplication()
        
        print("\nüéâ Tous les tests de d√©duplication ont r√©ussi !")
        
    except Exception as e:
        print(f"\n‚ùå Erreur dans les tests : {e}")
        import traceback
        traceback.print_exc()
