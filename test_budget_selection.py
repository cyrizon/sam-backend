"""
Test Budget Selection
====================

Test du nouveau syst√®me de s√©lection par budget avec cache V2.
"""

def test_budget_selection():
    """Test de la s√©lection par budget."""
    print("üß™ Test de la s√©lection par budget...")
    
    try:
        # Import du nouveau syst√®me
        from src.services.toll.route_optimization.toll_analysis.budget.budget_selector import BudgetTollSelector
        from src.services.toll.route_optimization.toll_analysis.toll_selector import TollSelector
        
        print("‚úÖ Imports r√©ussis")
        
        # Test d'initialisation
        budget_selector = BudgetTollSelector()
        toll_selector = TollSelector()
        
        print("‚úÖ Initialisation r√©ussie")
        
        # Test avec des donn√©es simul√©es
        mock_tolls = [
            {
                'toll_type': 'ouvert',
                'name': 'P√©age Ouvert',
                'coordinates': [2.3, 48.8],
                'associated_toll': None
            },
            {
                'toll_type': 'ferm√©',
                'name': 'P√©age Ferm√© 1',
                'coordinates': [2.4, 48.9],
                'associated_toll': None
            },
            {
                'toll_type': 'ferm√©',
                'name': 'P√©age Ferm√© 2',
                'coordinates': [2.5, 49.0],
                'associated_toll': None
            }
        ]
        
        mock_route_coords = [[2.3, 48.8], [2.5, 49.0]]
        budget_limit = 10.0  # 10‚Ç¨ max
        
        print(f"üìä Test avec {len(mock_tolls)} p√©ages, budget: {budget_limit}‚Ç¨")
        
        # Test s√©lection par budget
        result = budget_selector.select_tolls_by_budget(
            mock_tolls, budget_limit, mock_route_coords
        )
        
        if result:
            print(f"‚úÖ S√©lection r√©ussie:")
            print(f"   ‚Ä¢ P√©ages s√©lectionn√©s: {len(result.get('selected_tolls', []))}")
            print(f"   ‚Ä¢ Co√ªt total: {result.get('total_cost', 0)}‚Ç¨")
            print(f"   ‚Ä¢ Raison: {result.get('selection_reason', 'N/A')}")
        else:
            print("‚ùå √âchec de la s√©lection")
        
        # Test via TollSelector principal
        identification_result = {
            'route_coordinates': mock_route_coords,
            'total_tolls_on_route': len(mock_tolls)
        }
        
        result2 = toll_selector.select_tolls_by_budget(
            mock_tolls, budget_limit, identification_result
        )
        
        if result2:
            print("‚úÖ Test via TollSelector principal r√©ussi")
        else:
            print("‚ùå √âchec via TollSelector principal")
        
        print("\n‚úÖ Test de s√©lection par budget termin√© !")
        return True
        
    except Exception as e:
        print(f"‚ùå Erreur: {e}")
        import traceback
        traceback.print_exc()
        return False


if __name__ == "__main__":
    test_budget_selection()
