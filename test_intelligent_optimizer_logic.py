"""
Test Logic - Intelligent Optimizer
=================================

Test de la logique des cas sp√©ciaux de l'optimiseur intelligent.
"""

import pytest
from unittest.mock import Mock, MagicMock


def test_special_case_one_toll_only_closed():
    """
    Test du cas sp√©cial : 1 p√©age demand√© mais que des ferm√©s sur la route.
    Doit renvoyer une route sans p√©age (car ferm√© isol√© interdit).
    """
    # Mock de l'optimiseur
    from src.services.toll.route_optimization.main.intelligent_optimizer import IntelligentOptimizer
    
    # Mock du service ORS
    mock_ors = Mock()
    optimizer = IntelligentOptimizer(mock_ors)
    
    # Mock des donn√©es d'identification avec que des ferm√©s
    identification_result = {
        'total_tolls_on_route': 3,
        'tolls_on_route': [
            {'toll_type': 'ferm√©', 'name': 'Ferm√©1'},
            {'toll_type': 'ferm√©', 'name': 'Ferm√©2'},  
            {'toll_type': 'ferm√©', 'name': 'Ferm√©3'}
        ]
    }
    
    # Test du cas sp√©cial
    result = optimizer._is_base_route_sufficient(
        identification_result, 
        target_tolls=1, 
        optimization_mode='count'
    )
    
    # Doit retourner True pour forcer une route sans p√©age
    assert result == True
    print("‚úÖ Cas sp√©cial valid√© : 1 p√©age demand√© + que des ferm√©s ‚Üí route sans p√©age")


def test_normal_case_one_toll_with_open():
    """
    Test du cas normal : 1 p√©age demand√© avec des ouverts disponibles.
    Doit continuer l'optimisation normale.
    """
    from src.services.toll.route_optimization.main.intelligent_optimizer import IntelligentOptimizer
    
    # Mock du service ORS
    mock_ors = Mock()
    optimizer = IntelligentOptimizer(mock_ors)
    
    # Mock des donn√©es d'identification avec ouverts et ferm√©s
    identification_result = {
        'total_tolls_on_route': 3,
        'tolls_on_route': [
            {'toll_type': 'ouvert', 'name': 'Ouvert1'},
            {'toll_type': 'ferm√©', 'name': 'Ferm√©1'},  
            {'toll_type': 'ferm√©', 'name': 'Ferm√©2'}
        ]
    }
    
    # Test du cas normal
    result = optimizer._is_base_route_sufficient(
        identification_result, 
        target_tolls=1, 
        optimization_mode='count'
    )
    
    # Doit retourner False pour continuer l'optimisation
    assert result == False
    print("‚úÖ Cas normal valid√© : 1 p√©age demand√© + ouverts disponibles ‚Üí optimisation")


def test_multiple_tolls_case():
    """
    Test du cas : plusieurs p√©ages demand√©s.
    Doit continuer l'optimisation m√™me avec que des ferm√©s.
    """
    from src.services.toll.route_optimization.main.intelligent_optimizer import IntelligentOptimizer
    
    # Mock du service ORS
    mock_ors = Mock()
    optimizer = IntelligentOptimizer(mock_ors)
    
    # Mock des donn√©es d'identification avec que des ferm√©s
    identification_result = {
        'total_tolls_on_route': 4,
        'tolls_on_route': [
            {'toll_type': 'ferm√©', 'name': 'Ferm√©1'},
            {'toll_type': 'ferm√©', 'name': 'Ferm√©2'},
            {'toll_type': 'ferm√©', 'name': 'Ferm√©3'},
            {'toll_type': 'ferm√©', 'name': 'Ferm√©4'}
        ]
    }
    
    # Test avec 2 p√©ages demand√©s
    result = optimizer._is_base_route_sufficient(
        identification_result, 
        target_tolls=2, 
        optimization_mode='count'
    )
    
    # Doit retourner False pour continuer l'optimisation
    assert result == False
    print("‚úÖ Cas multiple valid√© : 2 p√©ages demand√©s + ferm√©s ‚Üí optimisation possible")


if __name__ == "__main__":
    print("üß™ Test de la logique des cas sp√©ciaux...")
    
    test_special_case_one_toll_only_closed()
    test_normal_case_one_toll_with_open()
    test_multiple_tolls_case()
    
    print("\n‚úÖ Tous les tests de logique passent !")
