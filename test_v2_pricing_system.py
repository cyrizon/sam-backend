"""
Test du syst√®me de pricing V2
------------------------------

Script de test pour d√©montrer le fonctionnement du syst√®me de pricing int√©gr√© au cache V2.
"""

import os
import sys

# Ajouter le r√©pertoire src au path pour les imports
sys.path.append(os.path.join(os.path.dirname(__file__), 'src'))

from src.cache.v2.managers.v2_cache_manager_with_pricing import V2CacheManagerWithPricing


def main():
    """Test principal du syst√®me de pricing V2."""
    print("üß™ Test du syst√®me de pricing V2")
    print("=" * 50)
    
    # Initialiser le gestionnaire
    data_dir = os.path.join(os.path.dirname(__file__), "data")
    manager = V2CacheManagerWithPricing(data_dir)
    
    # Charger toutes les donn√©es
    if not manager.load_all():
        print("‚ùå √âchec du chargement des donn√©es")
        return
    
    # Afficher le r√©sum√©
    print("\nüìä R√©sum√© du cache:")
    summary = manager.get_summary()
    for key, value in summary.items():
        print(f"   {key}: {value}")
    
    # Test de calcul de co√ªt (si des toll booths sont disponibles)
    if len(manager.toll_booths) >= 2:
        print("\nüí∞ Test de calcul de co√ªt:")
        toll1 = manager.toll_booths[0]
        toll2 = manager.toll_booths[1]
        
        print(f"   De: {toll1.display_name} ({toll1.type})")
        print(f"   Vers: {toll2.display_name} ({toll2.type})")
        
        # Calculer le co√ªt pour diff√©rentes classes
        for vehicle_class in ["1", "2", "3"]:
            result = manager.calculate_toll_cost(
                toll1.osm_id, 
                toll2.osm_id, 
                vehicle_class
            )
            
            if result and result.get("cost"):
                print(f"   Classe {vehicle_class}: {result['cost']:.2f}‚Ç¨ ({result['explanation']})")
            else:
                print(f"   Classe {vehicle_class}: {result['explanation'] if result else 'Erreur'}")
    
    # Afficher quelques exemples de toll booths
    print(f"\nüè™ Exemples de toll booths ({min(5, len(manager.toll_booths))} premiers):")
    for i, tb in enumerate(manager.toll_booths[:5]):
        print(f"   {i+1}. {tb.display_name}")
        print(f"      ID: {tb.osm_id}")
        print(f"      Type: {'Ouvert' if tb.is_open_toll else 'Ferm√©'}")
        print(f"      Op√©rateur: {tb.operator or 'Non sp√©cifi√©'}")
        print(f"      Coordonn√©es: {tb.coordinates}")
        print()


if __name__ == "__main__":
    main()
