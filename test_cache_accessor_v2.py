"""
Test Cache Accessor V2
======================

Test du nouvel accesseur de cache V2 pour route optimization.
"""

import sys
import os
sys.path.append(os.path.dirname(os.path.dirname(os.path.dirname(os.path.dirname(__file__)))))

from src.services.toll.route_optimization.utils.cache_accessor import CacheAccessor


def test_cache_v2_integration():
    """Test d'int√©gration du cache V2."""
    
    print("üß™ Test du cache accessor V2")
    print("=" * 50)
    
    # Test 1: V√©rification disponibilit√© (force l'initialisation)
    print("\n1Ô∏è‚É£ Test disponibilit√© du cache...")
    # Force l'initialisation en appelant _ensure_initialized
    CacheAccessor._ensure_initialized()
    is_available = CacheAccessor.is_cache_available()
    print(f"   Cache disponible: {is_available}")
    
    if not is_available:
        print("‚ùå Cache non disponible, arr√™t du test")
        return
    
    # Test 2: Statistiques g√©n√©rales
    print("\n2Ô∏è‚É£ Test statistiques du cache...")
    stats = CacheAccessor.get_cache_stats()
    print(f"   ‚Ä¢ Stations de p√©age: {stats['toll_stations']}")
    print(f"   ‚Ä¢ Liens complets: {stats['complete_links']}")
    print(f"   ‚Ä¢ Liens avec p√©ages: {stats['links_with_tolls']}")
    print(f"   ‚Ä¢ Liens d'entr√©e: {stats['entry_links']}")
    print(f"   ‚Ä¢ Liens de sortie: {stats['exit_links']}")
    
    # Test 3: P√©ages par type
    if 'toll_types' in stats:
        print(f"   ‚Ä¢ P√©ages ouverts: {stats['toll_types']['open_tolls']}")
        print(f"   ‚Ä¢ P√©ages ferm√©s: {stats['toll_types']['closed_tolls']}")
    
    # Test 4: Op√©rateurs principaux
    if 'operators' in stats:
        print(f"\nüè¢ Top 5 op√©rateurs:")
        sorted_ops = sorted(stats['operators'].items(), key=lambda x: x[1], reverse=True)
        for op, count in sorted_ops[:5]:
            print(f"   ‚Ä¢ {op}: {count} liens")
    
    # Test 5: R√©cup√©ration des donn√©es
    print("\n3Ô∏è‚É£ Test r√©cup√©ration des donn√©es...")
    
    # P√©ages
    toll_stations = CacheAccessor.get_toll_stations()
    print(f"   ‚Ä¢ R√©cup√©r√© {len(toll_stations)} stations de p√©age")
    
    # Liens avec p√©ages
    links_with_tolls = CacheAccessor.get_links_with_tolls()
    print(f"   ‚Ä¢ R√©cup√©r√© {len(links_with_tolls)} liens avec p√©ages")
    
    # Test 6: Exemples de liens avec p√©ages
    if links_with_tolls:
        print(f"\n4Ô∏è‚É£ Exemples de liens avec p√©ages:")
        for i, link in enumerate(links_with_tolls[:3]):  # 3 premiers
            print(f"   {i+1}. {link.link_id}")
            print(f"      ‚Ä¢ Type: {link.link_type.value}")
            print(f"      ‚Ä¢ Segments: {len(link.segments)}")
            print(f"      ‚Ä¢ P√©age: {link.associated_toll.name}")
            print(f"      ‚Ä¢ Op√©rateur: {link.associated_toll.operator}")
            print(f"      ‚Ä¢ Distance: {link.toll_distance_meters:.2f}m")
            print(f"      ‚Ä¢ Type p√©age: {'Ouvert' if link.associated_toll.is_open_toll else 'Ferm√©'}")
    
    # Test 7: Filtrage par type de p√©age
    print(f"\n5Ô∏è‚É£ Test filtrage...")
    open_tolls = CacheAccessor.get_links_by_toll_type("O")
    closed_tolls = CacheAccessor.get_links_by_toll_type("F")
    print(f"   ‚Ä¢ Liens avec p√©ages ouverts: {len(open_tolls)}")
    print(f"   ‚Ä¢ Liens avec p√©ages ferm√©s: {len(closed_tolls)}")
    
    # Test 8: Filtrage par op√©rateur
    if stats.get('operators'):
        top_operator = max(stats['operators'].items(), key=lambda x: x[1])[0]
        operator_links = CacheAccessor.get_links_by_operator(top_operator)
        print(f"   ‚Ä¢ Liens avec op√©rateur '{top_operator}': {len(operator_links)}")
    
    # Test 9: Calcul de co√ªt (si possible)
    print(f"\n6Ô∏è‚É£ Test calcul de co√ªts...")
    if links_with_tolls:
        sample_link = links_with_tolls[0]
        cost = CacheAccessor.calculate_toll_cost(sample_link, "1")
        if cost is not None:
            print(f"   ‚Ä¢ Co√ªt exemple ({sample_link.associated_toll.name}): {cost:.2f}‚Ç¨")
        else:
            print(f"   ‚Ä¢ Calcul co√ªt non disponible pour {sample_link.associated_toll.name}")
    
    print(f"\n‚úÖ Test du cache accessor V2 termin√©!")


def test_cache_performance():
    """Test rapide de performance du cache."""
    
    print("\n‚ö° Test de performance...")
    
    import time
    
    # Test vitesse d'acc√®s
    start = time.time()
    
    # 10 acc√®s r√©p√©t√©s
    for _ in range(10):
        links = CacheAccessor.get_links_with_tolls()
        stats = CacheAccessor.get_cache_stats()
    
    end = time.time()
    
    print(f"   ‚Ä¢ 10 acc√®s r√©p√©t√©s: {(end-start)*1000:.1f}ms")
    print(f"   ‚Ä¢ Moyenne par acc√®s: {(end-start)*100:.1f}ms")


if __name__ == "__main__":
    print("üöÄ Tests du Cache Accessor V2")
    print("=" * 60)
    
    try:
        test_cache_v2_integration()
        test_cache_performance()
        
        print("\nüéâ Tous les tests ont r√©ussi!")
        
    except Exception as e:
        print(f"\n‚ùå Erreur lors des tests: {e}")
        import traceback
        traceback.print_exc()
