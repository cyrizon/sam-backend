"""
Test rapide pour v√©rifier la correction de l'optimisation des p√©ages
"""

import sys
import os
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from src.services.toll.route_optimization.main.intelligent_optimizer import IntelligentOptimizer
from src.cache.v2.managers.v2_cache_manager_with_linking import V2CacheManagerWithLinking

def test_toll_optimization_correction():
    """Test que l'optimisation conserve bien les p√©ages s√©lectionn√©s."""
    
    print("üß™ Test correction optimisation p√©ages")
    
    # Utiliser des coordonn√©es r√©elles qui passent par des p√©ages
    coordinates = [
        [7.448595, 48.262004],  # Strasbourg 
        [4.840823, 45.752181]   # Lyon
    ]
    
    # Mock ORS service simple
    class MockORS:
        def directions(self, coordinates, profile="driving-car", **kwargs):
            return {
                "type": "FeatureCollection",
                "features": [{
                    "type": "Feature",
                    "geometry": {
                        "type": "LineString",
                        "coordinates": coordinates
                    },
                    "properties": {
                        "summary": {"distance": 500000, "duration": 18000},
                        "segments": [{
                            "distance": 500000,
                            "duration": 18000,
                            "steps": [{
                                "instruction": "Continue",
                                "name": "A35",
                                "distance": 500000,
                                "duration": 18000
                            }]
                        }]
                    }
                }]
            }
    
    # Initialiser l'optimiseur
    optimizer = IntelligentOptimizer(MockORS())
    
    # Test avec 2 p√©ages demand√©s
    print("üéØ Test optimisation avec 2 p√©ages demand√©s")
    result = optimizer.find_optimized_route(coordinates, target_tolls=2)
    
    if result:
        print(f"‚úÖ R√©sultat obtenu:")
        print(f"   üìä P√©ages trouv√©s: {result.get('toll_count', 0)}")
        print(f"   üí∞ Co√ªt: {result.get('cost', 0)}‚Ç¨")
        print(f"   üõ£Ô∏è Distance: {result.get('distance', 0)/1000:.1f}km")
        print(f"   üìç P√©ages: {[toll.get('from_name', 'Inconnu') for toll in result.get('tolls', [])]}")
        
        # V√©rifier que des p√©ages ont √©t√© trouv√©s
        if result.get('toll_count', 0) > 0:
            print("‚úÖ Test r√©ussi - Des p√©ages ont √©t√© conserv√©s apr√®s optimisation")
            return True
        else:
            print("‚ùå Test √©chou√© - Aucun p√©age trouv√© apr√®s optimisation")
            return False
    else:
        print("‚ùå Test √©chou√© - Aucun r√©sultat")
        return False

if __name__ == "__main__":
    test_toll_optimization_correction()
